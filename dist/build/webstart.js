var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/******/ (function () {
    /******/ "use strict";
    /******/ var __webpack_modules__ = ({
        /***/ "./node_modules/lezer-python/dist/index.cjs": 
        /*!**************************************************!*\
          !*** ./node_modules/lezer-python/dist/index.cjs ***!
          \**************************************************/
        /***/ (function (__unused_webpack_module, exports, __webpack_require__) {
            Object.defineProperty(exports, "__esModule", ({ value: true }));
            var lezer = __webpack_require__(/*! lezer */ "./node_modules/lezer/dist/index.cjs");
            // This file was generated by lezer-generator. You probably shouldn't edit it.
            var printKeyword = 1, indent = 162, dedent = 163, newline$1 = 164, newlineBracketed = 165, newlineEmpty = 166, eof = 167, ParenthesizedExpression = 21, TupleExpression = 47, ComprehensionExpression = 48, ArrayExpression = 52, ArrayComprehensionExpression = 55, DictionaryExpression = 56, DictionaryComprehensionExpression = 59, SetExpression = 60, SetComprehensionExpression = 61, ArgList = 63, ParamList = 121;
            var newline = 10, carriageReturn = 13, space = 32, tab = 9, hash = 35, parenOpen = 40, dot = 46;
            var bracketed = [
                ParenthesizedExpression, TupleExpression, ComprehensionExpression, ArrayExpression, ArrayComprehensionExpression,
                DictionaryExpression, DictionaryComprehensionExpression, SetExpression, SetComprehensionExpression, ArgList, ParamList
            ];
            var cachedIndent = 0, cachedInput = null, cachedPos = 0;
            function getIndent(input, pos) {
                if (pos == cachedPos && input == cachedInput)
                    return cachedIndent;
                cachedInput = input;
                cachedPos = pos;
                return cachedIndent = getIndentInner(input, pos);
            }
            function getIndentInner(input, pos) {
                for (var indent_1 = 0;; pos++) {
                    var ch = input.get(pos);
                    if (ch == space)
                        indent_1++;
                    else if (ch == tab)
                        indent_1 += 8 - (indent_1 % 8);
                    else if (ch == newline || ch == carriageReturn || ch == hash)
                        return -1;
                    else
                        return indent_1;
                }
            }
            var newlines = new lezer.ExternalTokenizer(function (input, token, stack) {
                var next = input.get(token.start);
                if (next < 0) {
                    token.accept(eof, token.start);
                }
                else if (next != newline && next != carriageReturn)
                    ;
                else if (stack.startOf(bracketed) != null) {
                    token.accept(newlineBracketed, token.start + 1);
                }
                else if (getIndent(input, token.start + 1) < 0) {
                    token.accept(newlineEmpty, token.start + 1);
                }
                else {
                    token.accept(newline$1, token.start + 1);
                }
            }, { contextual: true, fallback: true });
            var indentation = new lezer.ExternalTokenizer(function (input, token, stack) {
                var prev = input.get(token.start - 1), depth;
                if ((prev == newline || prev == carriageReturn) &&
                    (depth = getIndent(input, token.start)) >= 0 &&
                    depth != stack.context.depth &&
                    stack.startOf(bracketed) == null)
                    token.accept(depth < stack.context.depth ? dedent : indent, token.start);
            });
            function IndentLevel(parent, depth) {
                this.parent = parent;
                this.depth = depth;
                this.hash = (parent ? parent.hash + parent.hash << 8 : 0) + depth + (depth << 4);
            }
            var topIndent = new IndentLevel(null, 0);
            var trackIndent = new lezer.ContextTracker({
                start: topIndent,
                shift: function (context, term, input, stack) {
                    return term == indent ? new IndentLevel(context, getIndent(input, stack.pos)) :
                        term == dedent ? context.parent : context;
                },
                hash: function (context) { return context.hash; }
            });
            var legacyPrint = new lezer.ExternalTokenizer(function (input, token) {
                var pos = token.start;
                for (var print_1 = "print", i = 0; i < print_1.length; i++, pos++)
                    if (input.get(pos) != print_1.charCodeAt(i))
                        return;
                var end = pos;
                if (/\w/.test(String.fromCharCode(input.get(pos))))
                    return;
                for (;; pos++) {
                    var next = input.get(pos);
                    if (next == space || next == tab)
                        continue;
                    if (next != parenOpen && next != dot && next != newline && next != carriageReturn && next != hash)
                        token.accept(printKeyword, end);
                    return;
                }
            });
            // This file was generated by lezer-generator. You probably shouldn't edit it.
            var spec_identifier = { __proto__: null, await: 40, or: 48, and: 50, in: 54, not: 56, is: 58, if: 64, else: 66, lambda: 70, yield: 88, from: 90, async: 98, for: 100, None: 152, True: 154, False: 154, del: 168, pass: 172, break: 176, continue: 180, return: 184, raise: 192, import: 196, as: 198, global: 202, nonlocal: 204, assert: 208, elif: 218, while: 222, try: 228, except: 230, finally: 232, with: 236, def: 240, class: 250 };
            var parser = lezer.Parser.deserialize({
                version: 13,
                states: "!?|O`Q$IXOOO%cQ$I[O'#GaOOQ$IS'#Cm'#CmOOQ$IS'#Cn'#CnO'RQ$IWO'#ClO(tQ$I[O'#G`OOQ$IS'#Ga'#GaOOQ$IS'#DR'#DROOQ$IS'#G`'#G`O)bQ$IWO'#CqO)rQ$IWO'#DbO*SQ$IWO'#DfOOQ$IS'#Ds'#DsO*gO`O'#DsO*oOpO'#DsO*wO!bO'#DtO+SO#tO'#DtO+_O&jO'#DtO+jO,UO'#DtO-lQ$I[O'#GQOOQ$IS'#GQ'#GQO'RQ$IWO'#GPO/OQ$I[O'#GPOOQ$IS'#E]'#E]O/gQ$IWO'#E^OOQ$IS'#GO'#GOO/qQ$IWO'#F}OOQ$IV'#F}'#F}O/|Q$IWO'#FPOOQ$IS'#Fr'#FrO0RQ$IWO'#FOOOQ$IV'#HZ'#HZOOQ$IV'#F|'#F|OOQ$IT'#FR'#FRQ`Q$IXOOO'RQ$IWO'#CoO0aQ$IWO'#CzO0hQ$IWO'#DOO0vQ$IWO'#GeO1WQ$I[O'#EQO'RQ$IWO'#EROOQ$IS'#ET'#ETOOQ$IS'#EV'#EVOOQ$IS'#EX'#EXO1lQ$IWO'#EZO2SQ$IWO'#E_O/|Q$IWO'#EaO2gQ$I[O'#EaO/|Q$IWO'#EdO/gQ$IWO'#EgO/gQ$IWO'#EkO/gQ$IWO'#EnO2rQ$IWO'#EpO2yQ$IWO'#EuO3UQ$IWO'#EqO/gQ$IWO'#EuO/|Q$IWO'#EwO/|Q$IWO'#E|OOQ$IS'#Cc'#CcOOQ$IS'#Cd'#CdOOQ$IS'#Ce'#CeOOQ$IS'#Cf'#CfOOQ$IS'#Cg'#CgOOQ$IS'#Ch'#ChOOQ$IS'#Cj'#CjO'RQ$IWO,58|O'RQ$IWO,58|O'RQ$IWO,58|O'RQ$IWO,58|O'RQ$IWO,58|O'RQ$IWO,58|O3ZQ$IWO'#DmOOQ$IS,5:W,5:WO3nQ$IWO,5:ZO3{Q%1`O,5:ZO4QQ$I[O,59WO0aQ$IWO,59_O0aQ$IWO,59_O0aQ$IWO,59_O6pQ$IWO,59_O6uQ$IWO,59_O6|Q$IWO,59gO7TQ$IWO'#G`O8ZQ$IWO'#G_OOQ$IS'#G_'#G_OOQ$IS'#DX'#DXO8rQ$IWO,59]O'RQ$IWO,59]O9QQ$IWO,59]O9VQ$IWO,5:PO'RQ$IWO,5:POOQ$IS,59|,59|O9eQ$IWO,59|O9jQ$IWO,5:VO'RQ$IWO,5:VO'RQ$IWO,5:TOOQ$IS,5:Q,5:QO9{Q$IWO,5:QO:QQ$IWO,5:UOOOO'#FZ'#FZO:VO`O,5:_OOQ$IS,5:_,5:_OOOO'#F['#F[O:_OpO,5:_O:gQ$IWO'#DuOOOO'#F]'#F]O:wO!bO,5:`OOQ$IS,5:`,5:`OOOO'#F`'#F`O;SO#tO,5:`OOOO'#Fa'#FaO;_O&jO,5:`OOOO'#Fb'#FbO;jO,UO,5:`OOQ$IS'#Fc'#FcO;uQ$I[O,5:dO>gQ$I[O,5<kO?QQ%GlO,5<kO?qQ$I[O,5<kOOQ$IS,5:x,5:xO@YQ$IXO'#FkOAiQ$IWO,5;TOOQ$IV,5<i,5<iOAtQ$I[O'#HWOB]Q$IWO,5;kOOQ$IS-E9p-E9pOOQ$IV,5;j,5;jO3PQ$IWO'#EwOOQ$IT-E9P-E9POBeQ$I[O,59ZODlQ$I[O,59fOEVQ$IWO'#GbOEbQ$IWO'#GbO/|Q$IWO'#GbOEmQ$IWO'#DQOEuQ$IWO,59jOEzQ$IWO'#GfO'RQ$IWO'#GfO/gQ$IWO,5=POOQ$IS,5=P,5=PO/gQ$IWO'#D|OOQ$IS'#D}'#D}OFiQ$IWO'#FeOFyQ$IWO,58zOGXQ$IWO,58zO)eQ$IWO,5:jOG^Q$I[O'#GhOOQ$IS,5:m,5:mOOQ$IS,5:u,5:uOGqQ$IWO,5:yOHSQ$IWO,5:{OOQ$IS'#Fh'#FhOHbQ$I[O,5:{OHpQ$IWO,5:{OHuQ$IWO'#HYOOQ$IS,5;O,5;OOITQ$IWO'#HVOOQ$IS,5;R,5;RO3UQ$IWO,5;VO3UQ$IWO,5;YOIfQ$I[O'#H[O'RQ$IWO'#H[OIpQ$IWO,5;[O2rQ$IWO,5;[O/gQ$IWO,5;aO/|Q$IWO,5;cOIuQ$IXO'#ElOKOQ$IZO,5;]ONaQ$IWO'#H]O3UQ$IWO,5;aONlQ$IWO,5;cONqQ$IWO,5;hO!#fQ$I[O1G.hO!#mQ$I[O1G.hO!&^Q$I[O1G.hO!&hQ$I[O1G.hO!)RQ$I[O1G.hO!)fQ$I[O1G.hO!)yQ$IWO'#GnO!*XQ$I[O'#GQO/gQ$IWO'#GnO!*cQ$IWO'#GmOOQ$IS,5:X,5:XO!*kQ$IWO,5:XO!*pQ$IWO'#GoO!*{Q$IWO'#GoO!+`Q$IWO1G/uOOQ$IS'#Dq'#DqOOQ$IS1G/u1G/uOOQ$IS1G.y1G.yO!,`Q$I[O1G.yO!,gQ$I[O1G.yO0aQ$IWO1G.yO!-SQ$IWO1G/ROOQ$IS'#DW'#DWO/gQ$IWO,59qOOQ$IS1G.w1G.wO!-ZQ$IWO1G/cO!-kQ$IWO1G/cO!-sQ$IWO1G/dO'RQ$IWO'#GgO!-xQ$IWO'#GgO!-}Q$I[O1G.wO!._Q$IWO,59fO!/eQ$IWO,5=VO!/uQ$IWO,5=VO!/}Q$IWO1G/kO!0SQ$I[O1G/kOOQ$IS1G/h1G/hO!0dQ$IWO,5=QO!1ZQ$IWO,5=QO/gQ$IWO1G/oO!1xQ$IWO1G/qO!1}Q$I[O1G/qO!2_Q$I[O1G/oOOQ$IS1G/l1G/lOOQ$IS1G/p1G/pOOOO-E9X-E9XOOQ$IS1G/y1G/yOOOO-E9Y-E9YO!2oQ$IWO'#GzO/gQ$IWO'#GzO!2}Q$IWO,5:aOOOO-E9Z-E9ZOOQ$IS1G/z1G/zOOOO-E9^-E9^OOOO-E9_-E9_OOOO-E9`-E9`OOQ$IS-E9a-E9aO!3YQ%GlO1G2VO!3yQ$I[O1G2VO'RQ$IWO,5<OOOQ$IS,5<O,5<OOOQ$IS-E9b-E9bOOQ$IS,5<V,5<VOOQ$IS-E9i-E9iOOQ$IV1G0o1G0oO/|Q$IWO'#FgO!4bQ$I[O,5=rOOQ$IS1G1V1G1VO!4yQ$IWO1G1VOOQ$IS'#DS'#DSO/gQ$IWO,5<|OOQ$IS,5<|,5<|O!5OQ$IWO'#FSO!5ZQ$IWO,59lO!5cQ$IWO1G/UO!5mQ$I[O,5=QOOQ$IS1G2k1G2kOOQ$IS,5:h,5:hO!6^Q$IWO'#GPOOQ$IS,5<P,5<POOQ$IS-E9c-E9cO!6oQ$IWO1G.fOOQ$IS1G0U1G0UO!6}Q$IWO,5=SO!7_Q$IWO,5=SO/gQ$IWO1G0eO/gQ$IWO1G0eO/|Q$IWO1G0gOOQ$IS-E9f-E9fO!7pQ$IWO1G0gO!7{Q$IWO1G0gO!8QQ$IWO,5=tO!8`Q$IWO,5=tO!8nQ$IWO,5=qO!9UQ$IWO,5=qO!9gQ$IZO1G0qO!<uQ$IZO1G0tO!@QQ$IWO,5=vO!@[Q$IWO,5=vO!@dQ$I[O,5=vO/gQ$IWO1G0vO!@nQ$IWO1G0vO3UQ$IWO1G0{ONlQ$IWO1G0}OOQ$IV,5;W,5;WO!@sQ$IYO,5;WO!@xQ$IZO1G0wO!DZQ$IWO'#FoO3UQ$IWO1G0wO3UQ$IWO1G0wO!DhQ$IWO,5=wO!DuQ$IWO,5=wO/|Q$IWO,5=wOOQ$IV1G0{1G0{O!D}Q$IWO'#EyO!E`Q%1`O1G0}OOQ$IV1G1S1G1SO3UQ$IWO1G1SOOQ$IS,5=Y,5=YOOQ$IS'#Dn'#DnO/gQ$IWO,5=YO!EhQ$IWO,5=XO!E{Q$IWO,5=XOOQ$IS1G/s1G/sO!FTQ$IWO,5=ZO!FeQ$IWO,5=ZO!FmQ$IWO,5=ZO!GQQ$IWO,5=ZO!GbQ$IWO,5=ZOOQ$IS7+%a7+%aOOQ$IS7+$e7+$eO!5cQ$IWO7+$mO!ITQ$IWO1G.yO!I[Q$IWO1G.yOOQ$IS1G/]1G/]OOQ$IS,5;p,5;pO'RQ$IWO,5;pOOQ$IS7+$}7+$}O!IcQ$IWO7+$}OOQ$IS-E9S-E9SOOQ$IS7+%O7+%OO!IsQ$IWO,5=RO'RQ$IWO,5=ROOQ$IS7+$c7+$cO!IxQ$IWO7+$}O!JQQ$IWO7+%OO!JVQ$IWO1G2qOOQ$IS7+%V7+%VO!JgQ$IWO1G2qO!JoQ$IWO7+%VOOQ$IS,5;o,5;oO'RQ$IWO,5;oO!JtQ$IWO1G2lOOQ$IS-E9R-E9RO!KkQ$IWO7+%ZOOQ$IS7+%]7+%]O!KyQ$IWO1G2lO!LhQ$IWO7+%]O!LmQ$IWO1G2rO!L}Q$IWO1G2rO!MVQ$IWO7+%ZO!M[Q$IWO,5=fO!MrQ$IWO,5=fO!MrQ$IWO,5=fO!NQO!LQO'#DwO!N]OSO'#G{OOOO1G/{1G/{O!NbQ$IWO1G/{O!NjQ%GlO7+'qO# ZQ$I[O1G1jP# tQ$IWO'#FdOOQ$IS,5<R,5<ROOQ$IS-E9e-E9eOOQ$IS7+&q7+&qOOQ$IS1G2h1G2hOOQ$IS,5;n,5;nOOQ$IS-E9Q-E9QOOQ$IS7+$p7+$pO#!RQ$IWO,5<kO#!lQ$IWO,5<kO#!}Q$I[O,5;qO##bQ$IWO1G2nOOQ$IS-E9T-E9TOOQ$IS7+&P7+&PO##rQ$IWO7+&POOQ$IS7+&R7+&RO#$QQ$IWO'#HXO/|Q$IWO7+&RO#$fQ$IWO7+&ROOQ$IS,5<U,5<UO#$qQ$IWO1G3`OOQ$IS-E9h-E9hOOQ$IS,5<Q,5<QO#%PQ$IWO1G3]OOQ$IS-E9d-E9dO#%gQ$IZO7+&]O!DZQ$IWO'#FmO3UQ$IWO7+&]O3UQ$IWO7+&`O#(uQ$I[O,5<YO'RQ$IWO,5<YO#)PQ$IWO1G3bOOQ$IS-E9l-E9lO#)ZQ$IWO1G3bO3UQ$IWO7+&bO/gQ$IWO7+&bOOQ$IV7+&g7+&gO!E`Q%1`O7+&iO#)cQ$IXO1G0rOOQ$IV-E9m-E9mO3UQ$IWO7+&cO3UQ$IWO7+&cOOQ$IV,5<Z,5<ZO#+UQ$IWO,5<ZOOQ$IV7+&c7+&cO#+aQ$IZO7+&cO#.lQ$IWO,5<[O#.wQ$IWO1G3cOOQ$IS-E9n-E9nO#/UQ$IWO1G3cO#/^Q$IWO'#H_O#/lQ$IWO'#H_O/|Q$IWO'#H_OOQ$IS'#H_'#H_O#/wQ$IWO'#H^OOQ$IS,5;e,5;eO#0PQ$IWO,5;eO/gQ$IWO'#E{OOQ$IV7+&i7+&iO3UQ$IWO7+&iOOQ$IV7+&n7+&nOOQ$IS1G2t1G2tOOQ$IS,5;s,5;sO#0UQ$IWO1G2sOOQ$IS-E9V-E9VO#0iQ$IWO,5;tO#0tQ$IWO,5;tO#1XQ$IWO1G2uOOQ$IS-E9W-E9WO#1iQ$IWO1G2uO#1qQ$IWO1G2uO#2RQ$IWO1G2uO#1iQ$IWO1G2uOOQ$IS<<HX<<HXO#2^Q$I[O1G1[OOQ$IS<<Hi<<HiP#2kQ$IWO'#FUO6|Q$IWO1G2mO#2xQ$IWO1G2mO#2}Q$IWO<<HiOOQ$IS<<Hj<<HjO#3_Q$IWO7+(]OOQ$IS<<Hq<<HqO#3oQ$I[O1G1ZP#4`Q$IWO'#FTO#4mQ$IWO7+(^O#4}Q$IWO7+(^O#5VQ$IWO<<HuO#5[Q$IWO7+(WOOQ$IS<<Hw<<HwO#6RQ$IWO,5;rO'RQ$IWO,5;rOOQ$IS-E9U-E9UOOQ$IS<<Hu<<HuOOQ$IS,5;x,5;xO/gQ$IWO,5;xO#6WQ$IWO1G3QOOQ$IS-E9[-E9[O#6nQ$IWO1G3QOOOO'#F_'#F_O#6|O!LQO,5:cOOOO,5=g,5=gOOOO7+%g7+%gO#7XQ$IWO1G2VO#7rQ$IWO1G2VP'RQ$IWO'#FVO/gQ$IWO<<IkO#8TQ$IWO,5=sO#8fQ$IWO,5=sO/|Q$IWO,5=sO#8wQ$IWO<<ImOOQ$IS<<Im<<ImO/|Q$IWO<<ImP/|Q$IWO'#FjP/gQ$IWO'#FfOOQ$IV-E9k-E9kO3UQ$IWO<<IwOOQ$IV,5<X,5<XO3UQ$IWO,5<XOOQ$IV<<Iw<<IwOOQ$IV<<Iz<<IzO#8|Q$I[O1G1tP#9WQ$IWO'#FnO#9_Q$IWO7+(|O#9iQ$IZO<<I|O3UQ$IWO<<I|OOQ$IV<<JT<<JTO3UQ$IWO<<JTOOQ$IV'#Fl'#FlO#<tQ$IZO7+&^OOQ$IV<<I}<<I}O#>mQ$IZO<<I}OOQ$IV1G1u1G1uO/|Q$IWO1G1uO3UQ$IWO<<I}O/|Q$IWO1G1vP/gQ$IWO'#FpO#AxQ$IWO7+(}O#BVQ$IWO7+(}OOQ$IS'#Ez'#EzO/gQ$IWO,5=yO#B_Q$IWO,5=yOOQ$IS,5=y,5=yO#BjQ$IWO,5=xO#B{Q$IWO,5=xOOQ$IS1G1P1G1POOQ$IS,5;g,5;gP#CTQ$IWO'#FXO#CeQ$IWO1G1`O#CxQ$IWO1G1`O#DYQ$IWO1G1`P#DeQ$IWO'#FYO#DrQ$IWO7+(aO#ESQ$IWO7+(aO#ESQ$IWO7+(aO#E[Q$IWO7+(aO#ElQ$IWO7+(XO6|Q$IWO7+(XOOQ$ISAN>TAN>TO#FVQ$IWO<<KxOOQ$ISAN>aAN>aO/gQ$IWO1G1^O#FgQ$I[O1G1^P#FqQ$IWO'#FWOOQ$IS1G1d1G1dP#GOQ$IWO'#F^O#G]Q$IWO7+(lOOOO-E9]-E9]O#GsQ$IWO7+'qOOQ$ISAN?VAN?VO#H^Q$IWO,5<TO#HrQ$IWO1G3_OOQ$IS-E9g-E9gO#ITQ$IWO1G3_OOQ$ISAN?XAN?XO#IfQ$IWOAN?XOOQ$IVAN?cAN?cOOQ$IV1G1s1G1sO3UQ$IWOAN?hO#IkQ$IZOAN?hOOQ$IVAN?oAN?oOOQ$IV-E9j-E9jOOQ$IV<<Ix<<IxO3UQ$IWOAN?iO3UQ$IWO7+'aOOQ$IVAN?iAN?iOOQ$IS7+'b7+'bO#LvQ$IWO<<LiOOQ$IS1G3e1G3eO/gQ$IWO1G3eOOQ$IS,5<],5<]O#MTQ$IWO1G3dOOQ$IS-E9o-E9oO#MfQ$IWO7+&zO#MvQ$IWO7+&zOOQ$IS7+&z7+&zO#NRQ$IWO<<K{O#NcQ$IWO<<K{O#NcQ$IWO<<K{O#NkQ$IWO'#GiOOQ$IS<<Ks<<KsO#NuQ$IWO<<KsOOQ$IS7+&x7+&xO/|Q$IWO1G1oP/|Q$IWO'#FiO$ `Q$IWO7+(yO$ qQ$IWO7+(yOOQ$ISG24sG24sOOQ$IVG25SG25SO3UQ$IWOG25SOOQ$IVG25TG25TOOQ$IV<<J{<<J{OOQ$IS7+)P7+)PP$!SQ$IWO'#FqOOQ$IS<<Jf<<JfO$!bQ$IWO<<JfO$!rQ$IWOANAgO$#SQ$IWOANAgO$#[Q$IWO'#GjOOQ$IS'#Gj'#GjO0hQ$IWO'#DaO$#uQ$IWO,5=TOOQ$ISANA_ANA_OOQ$IS7+'Z7+'ZO$$^Q$IWO<<LeOOQ$IVLD*nLD*nOOQ$ISAN@QAN@QO$$oQ$IWOG27RO$%PQ$IWO,59{OOQ$IS1G2o1G2oO#NkQ$IWO1G/gOOQ$IS7+%R7+%RO6|Q$IWO'#CzO6|Q$IWO,59_O6|Q$IWO,59_O6|Q$IWO,59_O$%UQ$I[O,5<kO6|Q$IWO1G.yO/gQ$IWO1G/UO/gQ$IWO7+$mP$%iQ$IWO'#FdO'RQ$IWO'#GPO$%vQ$IWO,59_O$%{Q$IWO,59_O$&SQ$IWO,59jO$&XQ$IWO1G/RO0hQ$IWO'#DOO6|Q$IWO,59g",
                stateData: "$&o~O$oOS$lOS$kOSQOS~OPhOTeOdsOfXOltOp!SOsuO|vO}!PO!R!VO!S!UO!VYO!ZZO!fdO!mdO!ndO!odO!vxO!xyO!zzO!|{O#O|O#S}O#U!OO#X!QO#Y!QO#[!RO#c!TO#f!WO#j!XO#l!YO#q!ZO#tlO$jqO$zQO${QO%PRO%QVO%e[O%f]O%i^O%l_O%r`O%uaO%wbO~OT!aO]!aO_!bOf!iO!V!kO!d!lO$u![O$v!]O$w!^O$x!_O$y!_O$z!`O${!`O$|!aO$}!aO%O!aO~Oh%TXi%TXj%TXk%TXl%TXm%TXp%TXw%TXx%TX!s%TX#^%TX$j%TX$m%TX%V%TX!O%TX!R%TX!S%TX%W%TX!W%TX![%TX}%TX#V%TXq%TX!j%TX~P$_OdsOfXO!VYO!ZZO!fdO!mdO!ndO!odO$zQO${QO%PRO%QVO%e[O%f]O%i^O%l_O%r`O%uaO%wbO~Ow%SXx%SX#^%SX$j%SX$m%SX%V%SX~Oh!oOi!pOj!nOk!nOl!qOm!rOp!sO!s%SX~P(`OT!yOl-fOs-tO|vO~P'ROT!|Ol-fOs-tO!W!}O~P'ROT#QO_#ROl-fOs-tO![#SO~P'RO%g#VO%h#XO~O%j#YO%k#XO~O!Z#[O%m#]O%q#_O~O!Z#[O%s#`O%t#_O~O!Z#[O%h#_O%v#bO~O!Z#[O%k#_O%x#dO~OT$tX]$tX_$tXf$tXh$tXi$tXj$tXk$tXl$tXm$tXp$tXw$tX!V$tX!d$tX$u$tX$v$tX$w$tX$x$tX$y$tX$z$tX${$tX$|$tX$}$tX%O$tX!O$tX!R$tX!S$tX~O%e[O%f]O%i^O%l_O%r`O%uaO%wbOx$tX!s$tX#^$tX$j$tX$m$tX%V$tX%W$tX!W$tX![$tX}$tX#V$tXq$tX!j$tX~P+uOw#iOx$sX!s$sX#^$sX$j$sX$m$sX%V$sX~Ol-fOs-tO~P'RO#^#lO$j#nO$m#nO~O%QVO~O!R#sO#l!YO#q!ZO#tlO~OltO~P'ROT#xO_#yO%QVOxtP~OT#}Ol-fOs-tO}$OO~P'ROx$QO!s$VO%V$RO#^!tX$j!tX$m!tX~OT#}Ol-fOs-tO#^!}X$j!}X$m!}X~P'ROl-fOs-tO#^#RX$j#RX$m#RX~P'RO!d$]O!m$]O%QVO~OT$gO~P'RO!S$iO#j$jO#l$kO~Ox$lO~OT$zO_$zOl-fOs-tO!O$|O~P'ROl-fOs-tOx%PO~P'RO%d%RO~O_!bOf!iO!V!kO!d!lOT`a]`ah`ai`aj`ak`al`am`ap`aw`ax`a!s`a#^`a$j`a$m`a$u`a$v`a$w`a$x`a$y`a$z`a${`a$|`a$}`a%O`a%V`a!O`a!R`a!S`a%W`a!W`a![`a}`a#V`aq`a!j`a~Ok%WO~Ol%WO~P'ROl-fO~P'ROh-hOi-iOj-gOk-gOl-pOm-qOp-uO!O%SX!R%SX!S%SX%W%SX!W%SX![%SX}%SX#V%SX!j%SX~P(`O%W%YOw%RX!O%RX!R%RX!S%RX!W%RXx%RX~Ow%]O!O%[O!R%aO!S%`O~O!O%[O~Ow%dO!R%aO!S%`O!W%_X~O!W%hO~Ow%iOx%kO!R%aO!S%`O![%YX~O![%oO~O![%pO~O%g#VO%h%rO~O%j#YO%k%rO~OT%uOl-fOs-tO|vO~P'RO!Z#[O%m#]O%q%xO~O!Z#[O%s#`O%t%xO~O!Z#[O%h%xO%v#bO~O!Z#[O%k%xO%x#dO~OT!la]!la_!laf!lah!lai!laj!lak!lal!lam!lap!law!lax!la!V!la!d!la!s!la#^!la$j!la$m!la$u!la$v!la$w!la$x!la$y!la$z!la${!la$|!la$}!la%O!la%V!la!O!la!R!la!S!la%W!la!W!la![!la}!la#V!laq!la!j!la~P#vOw%}Ox$sa!s$sa#^$sa$j$sa$m$sa%V$sa~P$_OT&POltOsuOx$sa!s$sa#^$sa$j$sa$m$sa%V$sa~P'ROw%}Ox$sa!s$sa#^$sa$j$sa$m$sa%V$sa~OPhOTeOltOsuO|vO}!PO!vxO!xyO!zzO!|{O#O|O#S}O#U!OO#X!QO#Y!QO#[!RO#^$_X$j$_X$m$_X~P'RO#^#lO$j&UO$m&UO~O!d&VOf%zX$j%zX#V%zX#^%zX$m%zX#U%zX~Of!iO$j&XO~Ohcaicajcakcalcamcapcawcaxca!sca#^ca$jca$mca%Vca!Oca!Rca!Sca%Wca!Wca![ca}ca#Vcaqca!jca~P$_Opnawnaxna#^na$jna$mna%Vna~Oh!oOi!pOj!nOk!nOl!qOm!rO!sna~PDTO%V&ZOw%UXx%UX~O%QVOw%UXx%UX~Ow&^OxtX~Ox&`O~Ow%iO#^%YX$j%YX$m%YX!O%YXx%YX![%YX!j%YX%V%YX~OT-oOl-fOs-tO|vO~P'RO%V$RO#^Sa$jSa$mSa~O%V$RO~Ow&iO#^%[X$j%[X$m%[Xk%[X~P$_Ow&lO}&kO#^#Ra$j#Ra$m#Ra~O#V&mO#^#Ta$j#Ta$m#Ta~O!d$]O!m$]O#U&oO%QVO~O#U&oO~Ow&qO#^%|X$j%|X$m%|X~Ow&sO#^%yX$j%yX$m%yXx%yX~Ow&wOk&OX~P$_Ok&zO~OPhOTeOltOsuO|vO}!PO!vxO!xyO!zzO!|{O#O|O#S}O#U!OO#X!QO#Y!QO#[!RO$j'PO~P'ROq'TO#g'RO#h'SOP#eaT#ead#eaf#eal#eap#eas#ea|#ea}#ea!R#ea!S#ea!V#ea!Z#ea!f#ea!m#ea!n#ea!o#ea!v#ea!x#ea!z#ea!|#ea#O#ea#S#ea#U#ea#X#ea#Y#ea#[#ea#c#ea#f#ea#j#ea#l#ea#q#ea#t#ea$g#ea$j#ea$z#ea${#ea%P#ea%Q#ea%e#ea%f#ea%i#ea%l#ea%r#ea%u#ea%w#ea$i#ea$m#ea~Ow'UO#V'WOx&PX~Of'YO~Of!iOx$lO~OT!aO]!aO_!bOf!iO!V!kO!d!lO$w!^O$x!_O$y!_O$z!`O${!`O$|!aO$}!aO%O!aOhUiiUijUikUilUimUipUiwUixUi!sUi#^Ui$jUi$mUi$uUi%VUi!OUi!RUi!SUi%WUi!WUi![Ui}Ui#VUiqUi!jUi~O$v!]O~PNyO$vUi~PNyOT!aO]!aO_!bOf!iO!V!kO!d!lO$z!`O${!`O$|!aO$}!aO%O!aOhUiiUijUikUilUimUipUiwUixUi!sUi#^Ui$jUi$mUi$uUi$vUi$wUi%VUi!OUi!RUi!SUi%WUi!WUi![Ui}Ui#VUiqUi!jUi~O$x!_O$y!_O~P!#tO$xUi$yUi~P!#tO_!bOf!iO!V!kO!d!lOhUiiUijUikUilUimUipUiwUixUi!sUi#^Ui$jUi$mUi$uUi$vUi$wUi$xUi$yUi$zUi${Ui%VUi!OUi!RUi!SUi%WUi!WUi![Ui}Ui#VUiqUi!jUi~OT!aO]!aO$|!aO$}!aO%O!aO~P!&rOTUi]Ui$|Ui$}Ui%OUi~P!&rO!R%aO!S%`Ow%bX!O%bX~O%V'_O%W'_O~P+uOw'aO!O%aX~O!O'cO~Ow'dOx'fO!W%cX~Ol-fOs-tOw'dOx'gO!W%cX~P'RO!W'iO~Oj!nOk!nOl!qOm!rOhgipgiwgixgi!sgi#^gi$jgi$mgi%Vgi~Oi!pO~P!+eOigi~P!+eOh-hOi-iOj-gOk-gOl-pOm-qO~Oq'kO~P!,nOT'pOl-fOs-tO!O'qO~P'ROw'rO!O'qO~O!O'tO~O!S'vO~Ow'rO!O'wO!R%aO!S%`O~P$_Oh-hOi-iOj-gOk-gOl-pOm-qO!Ona!Rna!Sna%Wna!Wna![na}na#Vnaqna!jna~PDTOT'pOl-fOs-tO!W%_a~P'ROw'zO!W%_a~O!W'{O~Ow'zO!R%aO!S%`O!W%_a~P$_OT(POl-fOs-tO![%Ya#^%Ya$j%Ya$m%Ya!O%Yax%Ya!j%Ya%V%Ya~P'ROw(QO![%Ya#^%Ya$j%Ya$m%Ya!O%Yax%Ya!j%Ya%V%Ya~O![(TO~Ow(QO!R%aO!S%`O![%Ya~P$_Ow(WO!R%aO!S%`O![%`a~P$_Ow(ZOx%nX![%nX!j%nX~Ox(^O![(`O!j(aO~OT&POltOsuOx$si!s$si#^$si$j$si$m$si%V$si~P'ROw(bOx$si!s$si#^$si$j$si$m$si%V$si~O!d&VOf%za$j%za#V%za#^%za$m%za#U%za~O$j(gO~OT#xO_#yO%QVO~Ow&^Oxta~OltOsuO~P'ROw(QO#^%Ya$j%Ya$m%Ya!O%Yax%Ya![%Ya!j%Ya%V%Ya~P$_Ow(lO#^$sX$j$sX$m$sX%V$sX~O%V$RO#^Si$jSi$mSi~O#^%[a$j%[a$m%[ak%[a~P'ROw(oO#^%[a$j%[a$m%[ak%[a~OT(sOf(uO%QVO~O#U(vO~O%QVO#^%|a$j%|a$m%|a~Ow(xO#^%|a$j%|a$m%|a~Ol-fOs-tO#^%ya$j%ya$m%yax%ya~P'ROw({O#^%ya$j%ya$m%yax%ya~Oq)PO#a)OOP#_iT#_id#_if#_il#_ip#_is#_i|#_i}#_i!R#_i!S#_i!V#_i!Z#_i!f#_i!m#_i!n#_i!o#_i!v#_i!x#_i!z#_i!|#_i#O#_i#S#_i#U#_i#X#_i#Y#_i#[#_i#c#_i#f#_i#j#_i#l#_i#q#_i#t#_i$g#_i$j#_i$z#_i${#_i%P#_i%Q#_i%e#_i%f#_i%i#_i%l#_i%r#_i%u#_i%w#_i$i#_i$m#_i~Oq)QOP#biT#bid#bif#bil#bip#bis#bi|#bi}#bi!R#bi!S#bi!V#bi!Z#bi!f#bi!m#bi!n#bi!o#bi!v#bi!x#bi!z#bi!|#bi#O#bi#S#bi#U#bi#X#bi#Y#bi#[#bi#c#bi#f#bi#j#bi#l#bi#q#bi#t#bi$g#bi$j#bi$z#bi${#bi%P#bi%Q#bi%e#bi%f#bi%i#bi%l#bi%r#bi%u#bi%w#bi$i#bi$m#bi~OT)SOk&Oa~P'ROw)TOk&Oa~Ow)TOk&Oa~P$_Ok)XO~O$h)[O~Oq)_O#g'RO#h)^OP#eiT#eid#eif#eil#eip#eis#ei|#ei}#ei!R#ei!S#ei!V#ei!Z#ei!f#ei!m#ei!n#ei!o#ei!v#ei!x#ei!z#ei!|#ei#O#ei#S#ei#U#ei#X#ei#Y#ei#[#ei#c#ei#f#ei#j#ei#l#ei#q#ei#t#ei$g#ei$j#ei$z#ei${#ei%P#ei%Q#ei%e#ei%f#ei%i#ei%l#ei%r#ei%u#ei%w#ei$i#ei$m#ei~Ol-fOs-tOx$lO~P'ROl-fOs-tOx&Pa~P'ROw)eOx&Pa~OT)iO_)jO!O)mO$|)kO%QVO~Ox$lO&S)oO~OT$zO_$zOl-fOs-tO!O%aa~P'ROw)uO!O%aa~Ol-fOs-tOx)xO!W%ca~P'ROw)yO!W%ca~Ol-fOs-tOw)yOx)|O!W%ca~P'ROl-fOs-tOw)yO!W%ca~P'ROw)yOx)|O!W%ca~Oj-gOk-gOl-pOm-qOhgipgiwgi!Ogi!Rgi!Sgi%Wgi!Wgixgi![gi#^gi$jgi$mgi}gi#Vgiqgi!jgi%Vgi~Oi-iO~P!GmOigi~P!GmOT'pOl-fOs-tO!O*RO~P'ROk*TO~Ow*VO!O*RO~O!O*WO~OT'pOl-fOs-tO!W%_i~P'ROw*XO!W%_i~O!W*YO~OT(POl-fOs-tO![%Yi#^%Yi$j%Yi$m%Yi!O%Yix%Yi!j%Yi%V%Yi~P'ROw*]O!R%aO!S%`O![%`i~Ow*`O![%Yi#^%Yi$j%Yi$m%Yi!O%Yix%Yi!j%Yi%V%Yi~O![*aO~O_*cOl-fOs-tO![%`i~P'ROw*]O![%`i~O![*eO~OT*gOl-fOs-tOx%na![%na!j%na~P'ROw*hOx%na![%na!j%na~O!Z#[O%p*kO![!kX~O![*mO~Ox(^O![*nO~OT&POltOsuOx$sq!s$sq#^$sq$j$sq$m$sq%V$sq~P'ROw$Wix$Wi!s$Wi#^$Wi$j$Wi$m$Wi%V$Wi~P$_OT&POltOsuO~P'ROT&POl-fOs-tO#^$sa$j$sa$m$sa%V$sa~P'ROw*oO#^$sa$j$sa$m$sa%V$sa~Ow#ya#^#ya$j#ya$m#yak#ya~P$_O#^%[i$j%[i$m%[ik%[i~P'ROw*rO#^#Rq$j#Rq$m#Rq~Ow*sO#V*uO#^%{X$j%{X$m%{X!O%{X~OT*wOf*xO%QVO~O%QVO#^%|i$j%|i$m%|i~Ol-fOs-tO#^%yi$j%yi$m%yix%yi~P'ROq*|O#a)OOP#_qT#_qd#_qf#_ql#_qp#_qs#_q|#_q}#_q!R#_q!S#_q!V#_q!Z#_q!f#_q!m#_q!n#_q!o#_q!v#_q!x#_q!z#_q!|#_q#O#_q#S#_q#U#_q#X#_q#Y#_q#[#_q#c#_q#f#_q#j#_q#l#_q#q#_q#t#_q$g#_q$j#_q$z#_q${#_q%P#_q%Q#_q%e#_q%f#_q%i#_q%l#_q%r#_q%u#_q%w#_q$i#_q$m#_q~Ok$baw$ba~P$_OT)SOk&Oi~P'ROw+TOk&Oi~OPhOTeOltOp!SOsuO|vO}!PO!R!VO!S!UO!vxO!xyO!zzO!|{O#O|O#S}O#U!OO#X!QO#Y!QO#[!RO#c!TO#f!WO#j!XO#l!YO#q!ZO#tlO~P'ROw+_Ox$lO#V+_O~O#h+`OP#eqT#eqd#eqf#eql#eqp#eqs#eq|#eq}#eq!R#eq!S#eq!V#eq!Z#eq!f#eq!m#eq!n#eq!o#eq!v#eq!x#eq!z#eq!|#eq#O#eq#S#eq#U#eq#X#eq#Y#eq#[#eq#c#eq#f#eq#j#eq#l#eq#q#eq#t#eq$g#eq$j#eq$z#eq${#eq%P#eq%Q#eq%e#eq%f#eq%i#eq%l#eq%r#eq%u#eq%w#eq$i#eq$m#eq~O#V+aOw$dax$da~Ol-fOs-tOx&Pi~P'ROw+cOx&Pi~Ox$QO%V+eOw&RX!O&RX~O%QVOw&RX!O&RX~Ow+iO!O&QX~O!O+kO~OT$zO_$zOl-fOs-tO!O%ai~P'ROx+nOw#|a!W#|a~Ol-fOs-tOx+oOw#|a!W#|a~P'ROl-fOs-tOx)xO!W%ci~P'ROw+rO!W%ci~Ol-fOs-tOw+rO!W%ci~P'ROw+rOx+uO!W%ci~Ow#xi!O#xi!W#xi~P$_OT'pOl-fOs-tO~P'ROk+wO~OT'pOl-fOs-tO!O+xO~P'ROT'pOl-fOs-tO!W%_q~P'ROw#wi![#wi#^#wi$j#wi$m#wi!O#wix#wi!j#wi%V#wi~P$_OT(POl-fOs-tO~P'RO_*cOl-fOs-tO![%`q~P'ROw+yO![%`q~O![+zO~OT(POl-fOs-tO![%Yq#^%Yq$j%Yq$m%Yq!O%Yqx%Yq!j%Yq%V%Yq~P'ROx+{O~OT*gOl-fOs-tOx%ni![%ni!j%ni~P'ROw,QOx%ni![%ni!j%ni~O!Z#[O%p*kO![!ka~OT&POl-fOs-tO#^$si$j$si$m$si%V$si~P'ROw,SO#^$si$j$si$m$si%V$si~O%QVO#^%{a$j%{a$m%{a!O%{a~Ow,VO#^%{a$j%{a$m%{a!O%{a~O!O,YO~Ok$biw$bi~P$_OT)SO~P'ROT)SOk&Oq~P'ROq,^OP#dyT#dyd#dyf#dyl#dyp#dys#dy|#dy}#dy!R#dy!S#dy!V#dy!Z#dy!f#dy!m#dy!n#dy!o#dy!v#dy!x#dy!z#dy!|#dy#O#dy#S#dy#U#dy#X#dy#Y#dy#[#dy#c#dy#f#dy#j#dy#l#dy#q#dy#t#dy$g#dy$j#dy$z#dy${#dy%P#dy%Q#dy%e#dy%f#dy%i#dy%l#dy%r#dy%u#dy%w#dy$i#dy$m#dy~OPhOTeOltOp!SOsuO|vO}!PO!R!VO!S!UO!vxO!xyO!zzO!|{O#O|O#S}O#U!OO#X!QO#Y!QO#[!RO#c!TO#f!WO#j!XO#l!YO#q!ZO#tlO$i,bO$m,bO~P'RO#h,cOP#eyT#eyd#eyf#eyl#eyp#eys#ey|#ey}#ey!R#ey!S#ey!V#ey!Z#ey!f#ey!m#ey!n#ey!o#ey!v#ey!x#ey!z#ey!|#ey#O#ey#S#ey#U#ey#X#ey#Y#ey#[#ey#c#ey#f#ey#j#ey#l#ey#q#ey#t#ey$g#ey$j#ey$z#ey${#ey%P#ey%Q#ey%e#ey%f#ey%i#ey%l#ey%r#ey%u#ey%w#ey$i#ey$m#ey~Ol-fOs-tOx&Pq~P'ROw,gOx&Pq~O%V+eOw&Ra!O&Ra~OT)iO_)jO$|)kO%QVO!O&Qa~Ow,kO!O&Qa~OT$zO_$zOl-fOs-tO~P'ROl-fOs-tOx,mOw#|i!W#|i~P'ROl-fOs-tOw#|i!W#|i~P'ROx,mOw#|i!W#|i~Ol-fOs-tOx)xO~P'ROl-fOs-tOx)xO!W%cq~P'ROw,pO!W%cq~Ol-fOs-tOw,pO!W%cq~P'ROp,sO!R%aO!S%`O!O%Zq!W%Zq![%Zqw%Zq~P!,nO_*cOl-fOs-tO![%`y~P'ROw#zi![#zi~P$_O_*cOl-fOs-tO~P'ROT*gOl-fOs-tO~P'ROT*gOl-fOs-tOx%nq![%nq!j%nq~P'ROT&POl-fOs-tO#^$sq$j$sq$m$sq%V$sq~P'RO#V,wOw$]a#^$]a$j$]a$m$]a!O$]a~O%QVO#^%{i$j%{i$m%{i!O%{i~Ow,yO#^%{i$j%{i$m%{i!O%{i~O!O,{O~Oq,}OP#d!RT#d!Rd#d!Rf#d!Rl#d!Rp#d!Rs#d!R|#d!R}#d!R!R#d!R!S#d!R!V#d!R!Z#d!R!f#d!R!m#d!R!n#d!R!o#d!R!v#d!R!x#d!R!z#d!R!|#d!R#O#d!R#S#d!R#U#d!R#X#d!R#Y#d!R#[#d!R#c#d!R#f#d!R#j#d!R#l#d!R#q#d!R#t#d!R$g#d!R$j#d!R$z#d!R${#d!R%P#d!R%Q#d!R%e#d!R%f#d!R%i#d!R%l#d!R%r#d!R%u#d!R%w#d!R$i#d!R$m#d!R~Ol-fOs-tOx&Py~P'ROT)iO_)jO$|)kO%QVO!O&Qi~Ol-fOs-tOw#|q!W#|q~P'ROx-TOw#|q!W#|q~Ol-fOs-tOx)xO!W%cy~P'ROw-UO!W%cy~Ol-fOs-YO~P'ROp,sO!R%aO!S%`O!O%Zy!W%Zy![%Zyw%Zy~P!,nO%QVO#^%{q$j%{q$m%{q!O%{q~Ow-^O#^%{q$j%{q$m%{q!O%{q~OT)iO_)jO$|)kO%QVO~Ol-fOs-tOw#|y!W#|y~P'ROl-fOs-tOx)xO!W%c!R~P'ROw-aO!W%c!R~Op%^X!O%^X!R%^X!S%^X!W%^X![%^Xw%^X~P!,nOp,sO!R%aO!S%`O!O%]a!W%]a![%]aw%]a~O%QVO#^%{y$j%{y$m%{y!O%{y~Ol-fOs-tOx)xO!W%c!Z~P'ROx-dO~Ow*oO#^$sa$j$sa$m$sa%V$sa~P$_OT&POl-fOs-tO~P'ROk-kO~Ol-kO~P'ROx-lO~Oq-mO~P!,nO%f%i%u%w%e!Z%m%s%v%x%l%r%l%Q~",
                goto: "!,u&SPPPP&TP&])n*T*k+S+l,VP,qP&]-_-_&]P&]P0pPPPPPP0p3`PP3`P5l5u:yPP:|;[;_PPP&]&]PP;k&]PP&]&]PP&]&]&]&];o<c&]P<fP<i<i@OP@d&]PPP@h@n&TP&T&TP&TP&TP&TP&TP&T&T&TP&TPP&TPP&TP@tP@{ARP@{P@{@{PPP@{PBzPCTCZCaBzP@{CgPCnCtCzDWDjDpDzEQEnEtEzFQF[FbFhFnFtFzG^GhGnGtGzHUH[HbHhHnHxIOIYI`PPPPPPPPPIiIqIzJUJaPPPPPPPPPPPPNv! `!%n!(zPP!)S!)b!)k!*a!*W!*j!*p!*s!*v!*y!+RPPPPPPPPPP!+U!+XPPPPPPPPP!+_!+k!+w!,T!,W!,^!,d!,j!,m]iOr#l$l)[+Z'odOSXYZehrstvx|}!R!S!T!U!X!c!d!e!f!g!h!i!k!n!o!p!r!s!y!|#Q#R#[#i#l#}$O$Q$S$V$g$i$j$l$z%P%W%Z%]%`%d%i%k%u%}&P&[&`&i&k&l&s&w&z'R'U'`'a'd'f'g'k'p'r'v'z(P(Q(W(Z(b(d(l(o({)O)S)T)X)[)e)o)u)x)y)|*S*T*V*X*[*]*`*c*g*h*o*q*r*z+S+T+Z+b+c+f+m+n+o+q+r+u+w+y+{+},P,Q,S,g,i,m,p,s-T-U-a-d-f-g-h-i-k-l-m-n-o-q-uw!cP#h#u$W$f%b%g%m%n&a&y(c(n)R*Q*Z+R+|-jy!dP#h#u$W$f$r%b%g%m%n&a&y(c(n)R*Q*Z+R+|-j{!eP#h#u$W$f$r$s%b%g%m%n&a&y(c(n)R*Q*Z+R+|-j}!fP#h#u$W$f$r$s$t%b%g%m%n&a&y(c(n)R*Q*Z+R+|-j!P!gP#h#u$W$f$r$s$t$u%b%g%m%n&a&y(c(n)R*Q*Z+R+|-j!R!hP#h#u$W$f$r$s$t$u$v%b%g%m%n&a&y(c(n)R*Q*Z+R+|-j!V!hP!m#h#u$W$f$r$s$t$u$v$w%b%g%m%n&a&y(c(n)R*Q*Z+R+|-j'oSOSXYZehrstvx|}!R!S!T!U!X!c!d!e!f!g!h!i!k!n!o!p!r!s!y!|#Q#R#[#i#l#}$O$Q$S$V$g$i$j$l$z%P%W%Z%]%`%d%i%k%u%}&P&[&`&i&k&l&s&w&z'R'U'`'a'd'f'g'k'p'r'v'z(P(Q(W(Z(b(d(l(o({)O)S)T)X)[)e)o)u)x)y)|*S*T*V*X*[*]*`*c*g*h*o*q*r*z+S+T+Z+b+c+f+m+n+o+q+r+u+w+y+{+},P,Q,S,g,i,m,p,s-T-U-a-d-f-g-h-i-k-l-m-n-o-q-u&ZUOXYZhrtv|}!R!S!T!X!i!k!n!o!p!r!s#[#i#l$O$Q$S$V$j$l$z%P%W%Z%]%d%i%k%u%}&[&`&k&l&s&z'R'U'`'a'd'f'g'k'r'z(Q(W(Z(b(d(l({)O)X)[)e)o)u)x)y)|*S*T*V*X*[*]*`*g*h*o*r*z+Z+b+c+f+m+n+o+q+r+u+w+y+{+},P,Q,S,g,i,m,p,s-T-U-a-d-f-g-h-i-k-l-m-n-q-u%eWOXYZhrv|}!R!S!T!X!i!k#[#i#l$O$Q$S$V$j$l$z%P%Z%]%d%i%k%u%}&[&`&k&l&s&z'R'U'`'a'd'f'g'k'r'z(Q(W(Z(b(d(l({)O)X)[)e)o)u)x)y)|*S*V*X*[*]*`*g*h*o*r*z+Z+b+c+f+m+n+o+q+r+u+y+{+},P,Q,S,g,i,m,p-T-U-a-l-m-nQ#{uQ-b-YR-r-t'fdOSXYZehrstvx|}!R!S!T!U!X!c!d!e!f!g!h!k!n!o!p!r!s!y!|#Q#R#[#i#l#}$O$Q$S$V$g$i$j$l$z%P%W%Z%]%`%d%i%k%u%}&P&[&`&i&k&l&s&w&z'R'U'`'d'f'g'k'p'r'v'z(P(Q(W(Z(b(d(l(o({)O)S)T)X)[)e)o)x)y)|*S*T*V*X*[*]*`*c*g*h*o*q*r*z+S+T+Z+b+c+f+n+o+q+r+u+w+y+{+},P,Q,S,g,i,m,p,s-T-U-a-d-f-g-h-i-k-l-m-n-o-q-uW#ol!O!P$^W#wu&^-Y-tQ$`!QQ$p!YQ$q!ZW$y!i'a)u+mS&]#x#yQ&}$kQ(e&VQ(s&mW(t&o(u(v*xU(w&q(x*yQ)g'WW)h'Y+i,k-RS+h)i)jY,U*s,V,x,y-^Q,X*uQ,d+_Q,f+aR-],wR&[#wi!vXY!S!T%]%d'r'z)O*S*V*XR%Z!uQ!zXQ%v#[Q&e$SR&h$VT-X,s-d!U!jP!m#h#u$W$f$r$s$t$u$v$w%b%g%m%n&a&y(c(n)R*Q*Z+R+|-jQ&Y#pR']$qR'`$yR%S!l'ncOSXYZehrstvx|}!R!S!T!U!X!c!d!e!f!g!h!i!k!n!o!p!r!s!y!|#Q#R#[#i#l#}$O$Q$S$V$g$i$j$l$z%P%W%Z%]%`%d%i%k%u%}&P&[&`&i&k&l&s&w&z'R'U'`'a'd'f'g'k'p'r'v'z(P(Q(W(Z(b(d(l(o({)O)S)T)X)[)e)o)u)x)y)|*S*T*V*X*[*]*`*c*g*h*o*q*r*z+S+T+Z+b+c+f+m+n+o+q+r+u+w+y+{+},P,Q,S,g,i,m,p,s-T-U-a-d-f-g-h-i-k-l-m-n-o-q-uT#fc#gS#]_#^S#``#aS#ba#cS#db#eT*k(^*lT(_%v(aQ$UwR+g)hX$Sw$T$U&gZkOr$l)[+ZXoOr)[+ZQ$m!WQ&u$dQ&v$eQ'X$oQ'[$qQ)Y&|Q)`'RQ)b'SQ)c'TQ)p'ZQ)r']Q*})OQ+P)PQ+Q)QQ+U)WS+W)Z)qQ+[)^Q+])_Q+^)aQ,[*|Q,]+OQ,_+VQ,`+XQ,e+`Q,|,^Q-O,cQ-P,dR-_,}WoOr)[+ZR#rnQ'Z$pR)Z&}Q+f)hR,i+gQ)q'ZR+X)ZZmOnr)[+ZQrOR#trQ&_#zR(j&_S%j#P#|S(R%j(UT(U%m&aQ%^!xQ%e!{W's%^%e'x'|Q'x%bR'|%gQ&j$WR(p&jQ(X%nQ*^(ST*d(X*^Q'b${R)v'bS'e%O%PY)z'e){+s,q-VU){'f'g'hU+s)|)}*OS,q+t+uR-V,rQ#W]R%q#WQ#Z^R%s#ZQ#^_R%w#^Q([%tS*i([*jR*j(]Q*l(^R,R*lQ#a`R%y#aQ#caR%z#cQ#ebR%{#eQ#gcR%|#gQ#jfQ&O#hW&R#j&O(m*pQ(m&dR*p-jQ$TwS&f$T&gR&g$UQ&t$bR(|&tQ&W#oR(f&WQ$^!PR&n$^Q*t(tS,W*t,zR,z,XQ&r$`R(y&rQ#mjR&T#mQ+Z)[R,a+ZQ(}&uR*{(}Q&x$fS)U&x)VR)V&yQ'Q$mR)]'QQ'V$nS)f'V+dR+d)gQ+j)lR,l+jWnOr)[+ZR#qnSqOrT+Y)[+ZWpOr)[+ZR'O$lYjOr$l)[+ZR&S#l[wOr#l$l)[+ZR&e$S&YPOXYZhrtv|}!R!S!T!X!i!k!n!o!p!r!s#[#i#l$O$Q$S$V$j$l$z%P%W%Z%]%d%i%k%u%}&[&`&k&l&s&z'R'U'`'a'd'f'g'k'r'z(Q(W(Z(b(d(l({)O)X)[)e)o)u)x)y)|*S*T*V*X*[*]*`*g*h*o*r*z+Z+b+c+f+m+n+o+q+r+u+w+y+{+},P,Q,S,g,i,m,p,s-T-U-a-d-f-g-h-i-k-l-m-n-q-uQ!mSQ#heQ#usU$Wx%`'vS$f!U$iQ$r!cQ$s!dQ$t!eQ$u!fQ$v!gQ$w!hQ%b!yQ%g!|Q%m#QQ%n#RQ&a#}Q&y$gQ(c&PU(n&i(o*qW)R&w)T+S+TQ*Q'pQ*Z(PQ+R)SQ+|*cR-j-oQ!xXQ!{YQ$d!SQ$e!T^'o%]%d'r'z*S*V*XR+O)O[fOr#l$l)[+Zh!uXY!S!T%]%d'r'z)O*S*V*XQ#PZQ#khS#|v|Q$Z}W$b!R$V&z)XS$n!X$jW$x!i'a)u+mQ%O!kQ%t#[`&Q#i%}(b(d(l*o,S-nQ&b$OQ&c$QQ&d$SQ'^$zQ'h%PQ'n%ZW(O%i(Q*[*`Q(S%kQ(]%uQ(h&[S(k&`-lQ(q&kQ(r&lU(z&s({*zQ)a'RY)d'U)e+b+c,gQ)s'`^)w'd)y+q+r,p-U-aQ)}'fQ*O'gS*P'k-mW*b(W*]+y+}W*f(Z*h,P,QQ+l)oQ+p)xQ+t)|Q,O*gQ,T*rQ,h+fQ,n+nQ,o+oQ,r+uQ,v+{Q-Q,iQ-S,mR-`-ThTOr#i#l$l%}&`'k(b(d)[+Z$z!tXYZhv|}!R!S!T!X!i!k#[$O$Q$S$V$j$z%P%Z%]%d%i%k%u&[&k&l&s&z'R'U'`'a'd'f'g'r'z(Q(W(Z(l({)O)X)e)o)u)x)y)|*S*V*X*[*]*`*g*h*o*r*z+b+c+f+m+n+o+q+r+u+y+{+},P,Q,S,g,i,m,p-T-U-a-l-m-nQ#vtW%T!n!r-g-qQ%U!oQ%V!pQ%X!sQ%c-fS'j%W-kQ'l-hQ'm-iQ+v*TQ,u+wS-W,s-dR-s-uU#zu-Y-tR(i&^[gOr#l$l)[+ZX!wX#[$S$VQ#UZQ$PvR$Y|Q%_!xQ%f!{Q%l#PQ'^$xQ'y%bQ'}%gQ(V%mQ(Y%nQ*_(SQ,t+vQ-[,uR-c-ZQ$XxQ'u%`R*U'vQ-Z,sR-e-dR#OYR#TZR$}!iQ${!iV)t'a)u+mR%Q!kR%v#[Q(`%vR*n(aQ$c!RQ&h$VQ)W&zR+V)XQ#plQ$[!OQ$_!PR&p$^Q(s&oQ*v(uQ*w(vR,Z*xR$a!QXpOr)[+ZQ$h!UR&{$iQ$o!XR&|$jR)n'YQ)l'YV,j+i,k-R",
                nodeNames: "⚠ print Comment Script AssignStatement * BinaryExpression BitOp BitOp BitOp BitOp ArithOp ArithOp @ ArithOp ** UnaryExpression ArithOp BitOp AwaitExpression await ParenthesizedExpression ( BinaryExpression or and CompareOp in not is UnaryExpression ConditionalExpression if else LambdaExpression lambda ParamList VariableName AssignOp , : NamedExpression AssignOp YieldExpression yield from ) TupleExpression ComprehensionExpression async for LambdaExpression ArrayExpression [ ] ArrayComprehensionExpression DictionaryExpression { } DictionaryComprehensionExpression SetExpression SetComprehensionExpression CallExpression ArgList AssignOp MemberExpression . PropertyName Number String FormatString FormatReplacement FormatConversion FormatSpec ContinuedString Ellipsis None Boolean TypeDef AssignOp UpdateStatement UpdateOp ExpressionStatement DeleteStatement del PassStatement pass BreakStatement break ContinueStatement continue ReturnStatement return YieldStatement PrintStatement RaiseStatement raise ImportStatement import as ScopeStatement global nonlocal AssertStatement assert StatementGroup ; IfStatement Body elif WhileStatement while ForStatement TryStatement try except finally WithStatement with FunctionDefinition def ParamList AssignOp TypeDef ClassDefinition class DecoratedStatement Decorator At",
                maxTerm: 234,
                context: trackIndent,
                nodeProps: [
                    [lezer.NodeProp.group, -14, 4, 80, 82, 83, 85, 87, 89, 91, 93, 94, 95, 97, 100, 103, "Statement Statement", -22, 6, 16, 19, 21, 37, 47, 48, 52, 55, 56, 59, 60, 61, 62, 65, 68, 69, 70, 74, 75, 76, 77, "Expression", -9, 105, 107, 110, 112, 113, 117, 119, 124, 126, "Statement"]
                ],
                skippedNodes: [0, 2],
                repeatNodeCount: 32,
                tokenData: "&AaMgR!^OX$}XY!#xY[$}[]!#x]p$}pq!#xqr!&Srs!)yst!C{tu$}uv$+}vw$.awx$/mxy$Lgyz$Mmz{$Ns{|%#c|}%$o}!O%%u!O!P%([!P!Q%3b!Q!R%6Q!R![%:S![!]%EO!]!^%Gb!^!_%Hh!_!`%KW!`!a%Ld!a!b$}!b!c& P!c!d&!_!d!e&$P!e!h&!_!h!i&.R!i!t&!_!t!u&7g!u!w&!_!w!x&,a!x!}&!_!}#O&9q#O#P!%b#P#Q&:w#Q#R&;}#R#S&!_#S#T$}#T#U&!_#U#V&$P#V#Y&!_#Y#Z&.R#Z#f&!_#f#g&7g#g#i&!_#i#j&,a#j#o&!_#o#p&=Z#p#q&>P#q#r&?]#r#s&@Z#s$g$}$g~&!_<r%`Z%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}9[&^Z%p7[%gS%m`%v!bOr'PrsCxsw'Pwx(Px#O'P#O#P>v#P#o'P#o#pCU#p#q'P#q#r?[#r~'P9['^Z%p7[%gS%jW%m`%v!bOr'Prs&Rsw'Pwx(Px#O'P#O#P>v#P#o'P#o#pCU#p#q'P#q#r?[#r~'P8z(WZ%p7[%jWOr(yrs)wsw(ywx;bx#O(y#O#P2V#P#o(y#o#p7n#p#q(y#q#r2k#r~(y8z)UZ%p7[%gS%jW%v!bOr(yrs)wsw(ywx(Px#O(y#O#P2V#P#o(y#o#p7n#p#q(y#q#r2k#r~(y8z*QZ%p7[%gS%v!bOr(yrs*ssw(ywx(Px#O(y#O#P2V#P#o(y#o#p7n#p#q(y#q#r2k#r~(y8z*|Z%p7[%gS%v!bOr(yrs+osw(ywx(Px#O(y#O#P2V#P#o(y#o#p7n#p#q(y#q#r2k#r~(y8r+xX%p7[%gS%v!bOw+owx,ex#O+o#O#P.V#P#o+o#o#p0^#p#q+o#q#r.k#r~+o8r,jX%p7[Ow+owx-Vx#O+o#O#P.V#P#o+o#o#p0^#p#q+o#q#r.k#r~+o8r-[X%p7[Ow+owx-wx#O+o#O#P.V#P#o+o#o#p0^#p#q+o#q#r.k#r~+o7[-|R%p7[O#o-w#p#q-w#r~-w8r.[T%p7[O#o+o#o#p.k#p#q+o#q#r.k#r~+o!f.rV%gS%v!bOw.kwx/Xx#O.k#O#P0W#P#o.k#o#p0^#p~.k!f/[VOw.kwx/qx#O.k#O#P0W#P#o.k#o#p0^#p~.k!f/tUOw.kx#O.k#O#P0W#P#o.k#o#p0^#p~.k!f0ZPO~.k!f0cV%gSOw0xwx1^x#O0x#O#P2P#P#o0x#o#p.k#p~0xS0}T%gSOw0xwx1^x#O0x#O#P2P#P~0xS1aTOw0xwx1px#O0x#O#P2P#P~0xS1sSOw0xx#O0x#O#P2P#P~0xS2SPO~0x8z2[T%p7[O#o(y#o#p2k#p#q(y#q#r2k#r~(y!n2tX%gS%jW%v!bOr2krs3asw2kwx4wx#O2k#O#P7h#P#o2k#o#p7n#p~2k!n3hX%gS%v!bOr2krs4Tsw2kwx4wx#O2k#O#P7h#P#o2k#o#p7n#p~2k!n4[X%gS%v!bOr2krs.ksw2kwx4wx#O2k#O#P7h#P#o2k#o#p7n#p~2k!n4|X%jWOr2krs3asw2kwx5ix#O2k#O#P7h#P#o2k#o#p7n#p~2k!n5nX%jWOr2krs3asw2kwx6Zx#O2k#O#P7h#P#o2k#o#p7n#p~2kW6`T%jWOr6Zrs6os#O6Z#O#P7b#P~6ZW6rTOr6Zrs7Rs#O6Z#O#P7b#P~6ZW7USOr6Zs#O6Z#O#P7b#P~6ZW7ePO~6Z!n7kPO~2k!n7uX%gS%jWOr8brs9Osw8bwx:Ux#O8b#O#P;[#P#o8b#o#p2k#p~8b[8iV%gS%jWOr8brs9Osw8bwx:Ux#O8b#O#P;[#P~8b[9TV%gSOr8brs9jsw8bwx:Ux#O8b#O#P;[#P~8b[9oV%gSOr8brs0xsw8bwx:Ux#O8b#O#P;[#P~8b[:ZV%jWOr8brs9Osw8bwx:px#O8b#O#P;[#P~8b[:uV%jWOr8brs9Osw8bwx6Zx#O8b#O#P;[#P~8b[;_PO~8b8z;iZ%p7[%jWOr(yrs)wsw(ywx<[x#O(y#O#P2V#P#o(y#o#p7n#p#q(y#q#r2k#r~(y7d<cX%p7[%jWOr<[rs=Os#O<[#O#P>b#P#o<[#o#p6Z#p#q<[#q#r6Z#r~<[7d=TX%p7[Or<[rs=ps#O<[#O#P>b#P#o<[#o#p6Z#p#q<[#q#r6Z#r~<[7d=uX%p7[Or<[rs-ws#O<[#O#P>b#P#o<[#o#p6Z#p#q<[#q#r6Z#r~<[7d>gT%p7[O#o<[#o#p6Z#p#q<[#q#r6Z#r~<[9[>{T%p7[O#o'P#o#p?[#p#q'P#q#r?[#r~'P#O?gX%gS%jW%m`%v!bOr?[rs@Ssw?[wx4wx#O?[#O#PCO#P#o?[#o#pCU#p~?[#O@]X%gS%m`%v!bOr?[rs@xsw?[wx4wx#O?[#O#PCO#P#o?[#o#pCU#p~?[#OARX%gS%m`%v!bOr?[rsAnsw?[wx4wx#O?[#O#PCO#P#o?[#o#pCU#p~?[!vAwV%gS%m`%v!bOwAnwx/Xx#OAn#O#PB^#P#oAn#o#pBd#p~An!vBaPO~An!vBiV%gSOw0xwx1^x#O0x#O#P2P#P#o0x#o#pAn#p~0x#OCRPO~?[#OC]X%gS%jWOr8brs9Osw8bwx:Ux#O8b#O#P;[#P#o8b#o#p?[#p~8b9[DTZ%p7[%gS%m`%v!bOr'PrsDvsw'Pwx(Px#O'P#O#P>v#P#o'P#o#pCU#p#q'P#q#r?[#r~'P9SERX%p7[%gS%m`%v!bOwDvwx,ex#ODv#O#PEn#P#oDv#o#pBd#p#qDv#q#rAn#r~Dv9SEsT%p7[O#oDv#o#pAn#p#qDv#q#rAn#r~Dv<bF_Z%p7[%jW%sp%x#tOrGQrs)wswGQwxM^x#OGQ#O#PHS#P#oGQ#o#pLj#p#qGQ#q#rHh#r~GQ<bGaZ%p7[%gS%jW%sp%v!b%x#tOrGQrs)wswGQwxFSx#OGQ#O#PHS#P#oGQ#o#pLj#p#qGQ#q#rHh#r~GQ<bHXT%p7[O#oGQ#o#pHh#p#qGQ#q#rHh#r~GQ&UHuX%gS%jW%sp%v!b%x#tOrHhrs3aswHhwxIbx#OHh#O#PLd#P#oHh#o#pLj#p~Hh&UIkX%jW%sp%x#tOrHhrs3aswHhwxJWx#OHh#O#PLd#P#oHh#o#pLj#p~Hh&UJaX%jW%sp%x#tOrHhrs3aswHhwxJ|x#OHh#O#PLd#P#oHh#o#pLj#p~Hh$nKVX%jW%sp%x#tOrJ|rs6oswJ|wxJ|x#OJ|#O#PKr#P#oJ|#o#pKx#p~J|$nKuPO~J|$nK}V%jWOr6Zrs6os#O6Z#O#P7b#P#o6Z#o#pJ|#p~6Z&ULgPO~Hh&ULqX%gS%jWOr8brs9Osw8bwx:Ux#O8b#O#P;[#P#o8b#o#pHh#p~8b<bMiZ%p7[%jW%sp%x#tOrGQrs)wswGQwxN[x#OGQ#O#PHS#P#oGQ#o#pLj#p#qGQ#q#rHh#r~GQ:zNgZ%p7[%jW%sp%x#tOrN[rs=OswN[wxN[x#ON[#O#P! Y#P#oN[#o#pKx#p#qN[#q#rJ|#r~N[:z! _T%p7[O#oN[#o#pJ|#p#qN[#q#rJ|#r~N[<r! sT%p7[O#o$}#o#p!!S#p#q$}#q#r!!S#r~$}&f!!cX%gS%jW%m`%sp%v!b%x#tOr!!Srs@Ssw!!SwxIbx#O!!S#O#P!#O#P#o!!S#o#p!#U#p~!!S&f!#RPO~!!S&f!#]X%gS%jWOr8brs9Osw8bwx:Ux#O8b#O#P;[#P#o8b#o#p!!S#p~8bMg!$]a%p7[%gS%jW$o1s%m`%sp%v!b%x#tOX$}XY!#xY[$}[]!#x]p$}pq!#xqr$}rs&Rsw$}wxFSx#O$}#O#P!%b#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Mg!%gX%p7[OY$}YZ!#xZ]$}]^!#x^#o$}#o#p!!S#p#q$}#q#r!!S#r~$}<u!&eb%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`!'m!`#O$}#O#P! n#P#T$}#T#U!(s#U#f$}#f#g!(s#g#h!(s#h#o$}#o#p!#U#p#q$}#q#r!!S#r~$}<u!(QZjR%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}<u!)WZ!jR%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{!*Y_%tp%p7[%gS%e,X%m`%v!bOY!+XYZ'PZ]!+X]^'P^r!+Xrs!BPsw!+Xwx!-gx#O!+X#O#P!>e#P#o!+X#o#p!@}#p#q!+X#q#r!>y#r~!+XDe!+h_%p7[%gS%jW%e,X%m`%v!bOY!+XYZ'PZ]!+X]^'P^r!+Xrs!,gsw!+Xwx!-gx#O!+X#O#P!>e#P#o!+X#o#p!@}#p#q!+X#q#r!>y#r~!+XDe!,tZ%p7[%gS%e,X%m`%v!bOr'PrsCxsw'Pwx(Px#O'P#O#P>v#P#o'P#o#pCU#p#q'P#q#r?[#r~'PDT!-p_%p7[%jW%e,XOY!.oYZ(yZ]!.o]^(y^r!.ors!/{sw!.owx!;Rx#O!.o#O#P!0y#P#o!.o#o#p!6m#p#q!.o#q#r!1_#r~!.oDT!.|_%p7[%gS%jW%e,X%v!bOY!.oYZ(yZ]!.o]^(y^r!.ors!/{sw!.owx!-gx#O!.o#O#P!0y#P#o!.o#o#p!6m#p#q!.o#q#r!1_#r~!.oDT!0WZ%p7[%gS%e,X%v!bOr(yrs*ssw(ywx(Px#O(y#O#P2V#P#o(y#o#p7n#p#q(y#q#r2k#r~(yDT!1OT%p7[O#o!.o#o#p!1_#p#q!.o#q#r!1_#r~!.o-w!1j]%gS%jW%e,X%v!bOY!1_YZ2kZ]!1_]^2k^r!1_rs!2csw!1_wx!3Xx#O!1_#O#P!6g#P#o!1_#o#p!6m#p~!1_-w!2lX%gS%e,X%v!bOr2krs4Tsw2kwx4wx#O2k#O#P7h#P#o2k#o#p7n#p~2k-w!3`]%jW%e,XOY!1_YZ2kZ]!1_]^2k^r!1_rs!2csw!1_wx!4Xx#O!1_#O#P!6g#P#o!1_#o#p!6m#p~!1_-w!4`]%jW%e,XOY!1_YZ2kZ]!1_]^2k^r!1_rs!2csw!1_wx!5Xx#O!1_#O#P!6g#P#o!1_#o#p!6m#p~!1_,a!5`X%jW%e,XOY!5XYZ6ZZ]!5X]^6Z^r!5Xrs!5{s#O!5X#O#P!6a#P~!5X,a!6QT%e,XOr6Zrs7Rs#O6Z#O#P7b#P~6Z,a!6dPO~!5X-w!6jPO~!1_-w!6v]%gS%jW%e,XOY!7oYZ8bZ]!7o]^8b^r!7ors!8ksw!7owx!9Xx#O!7o#O#P!:{#P#o!7o#o#p!1_#p~!7o,e!7xZ%gS%jW%e,XOY!7oYZ8bZ]!7o]^8b^r!7ors!8ksw!7owx!9Xx#O!7o#O#P!:{#P~!7o,e!8rV%gS%e,XOr8brs9jsw8bwx:Ux#O8b#O#P;[#P~8b,e!9`Z%jW%e,XOY!7oYZ8bZ]!7o]^8b^r!7ors!8ksw!7owx!:Rx#O!7o#O#P!:{#P~!7o,e!:YZ%jW%e,XOY!7oYZ8bZ]!7o]^8b^r!7ors!8ksw!7owx!5Xx#O!7o#O#P!:{#P~!7o,e!;OPO~!7oDT!;[_%p7[%jW%e,XOY!.oYZ(yZ]!.o]^(y^r!.ors!/{sw!.owx!<Zx#O!.o#O#P!0y#P#o!.o#o#p!6m#p#q!.o#q#r!1_#r~!.oBm!<d]%p7[%jW%e,XOY!<ZYZ<[Z]!<Z]^<[^r!<Zrs!=]s#O!<Z#O#P!>P#P#o!<Z#o#p!5X#p#q!<Z#q#r!5X#r~!<ZBm!=dX%p7[%e,XOr<[rs=ps#O<[#O#P>b#P#o<[#o#p6Z#p#q<[#q#r6Z#r~<[Bm!>UT%p7[O#o!<Z#o#p!5X#p#q!<Z#q#r!5X#r~!<ZDe!>jT%p7[O#o!+X#o#p!>y#p#q!+X#q#r!>y#r~!+X.X!?W]%gS%jW%e,X%m`%v!bOY!>yYZ?[Z]!>y]^?[^r!>yrs!@Psw!>ywx!3Xx#O!>y#O#P!@w#P#o!>y#o#p!@}#p~!>y.X!@[X%gS%e,X%m`%v!bOr?[rs@xsw?[wx4wx#O?[#O#PCO#P#o?[#o#pCU#p~?[.X!@zPO~!>y.X!AW]%gS%jW%e,XOY!7oYZ8bZ]!7o]^8b^r!7ors!8ksw!7owx!9Xx#O!7o#O#P!:{#P#o!7o#o#p!>y#p~!7oGZ!B^Z%p7[%gS%e,X%m`%v!bOr'Prs!CPsw'Pwx(Px#O'P#O#P>v#P#o'P#o#pCU#p#q'P#q#r?[#r~'PGZ!C`X%k#|%p7[%gS%i,X%m`%v!bOwDvwx,ex#ODv#O#PEn#P#oDv#o#pBd#p#qDv#q#rAn#r~DvMg!D`_Q1s%p7[%gS%jW%m`%sp%v!b%x#tOY!C{YZ$}Z]!C{]^$}^r!C{rs!E_sw!C{wx#Hqx#O!C{#O#P$(i#P#o!C{#o#p$*{#p#q!C{#q#r$)]#r~!C{JP!El_Q1s%p7[%gS%m`%v!bOY!FkYZ'PZ]!Fk]^'P^r!Fkrs#Eksw!Fkwx!Gyx#O!Fk#O#P#=u#P#o!Fk#o#p#Di#p#q!Fk#q#r#>i#r~!FkJP!Fz_Q1s%p7[%gS%jW%m`%v!bOY!FkYZ'PZ]!Fk]^'P^r!Fkrs!E_sw!Fkwx!Gyx#O!Fk#O#P#=u#P#o!Fk#o#p#Di#p#q!Fk#q#r#>i#r~!FkIo!HS_Q1s%p7[%jWOY!IRYZ(yZ]!IR]^(y^r!IRrs!J_sw!IRwx#8wx#O!IR#O#P#*R#P#o!IR#o#p#2}#p#q!IR#q#r#*u#r~!IRIo!I`_Q1s%p7[%gS%jW%v!bOY!IRYZ(yZ]!IR]^(y^r!IRrs!J_sw!IRwx!Gyx#O!IR#O#P#*R#P#o!IR#o#p#2}#p#q!IR#q#r#*u#r~!IRIo!Jj_Q1s%p7[%gS%v!bOY!IRYZ(yZ]!IR]^(y^r!IRrs!Kisw!IRwx!Gyx#O!IR#O#P#*R#P#o!IR#o#p#2}#p#q!IR#q#r#*u#r~!IRIo!Kt_Q1s%p7[%gS%v!bOY!IRYZ(yZ]!IR]^(y^r!IRrs!Lssw!IRwx!Gyx#O!IR#O#P#*R#P#o!IR#o#p#2}#p#q!IR#q#r#*u#r~!IRIg!MO]Q1s%p7[%gS%v!bOY!LsYZ+oZ]!Ls]^+o^w!Lswx!Mwx#O!Ls#O#P#!y#P#o!Ls#o#p#&m#p#q!Ls#q#r##m#r~!LsIg!NO]Q1s%p7[OY!LsYZ+oZ]!Ls]^+o^w!Lswx!Nwx#O!Ls#O#P#!y#P#o!Ls#o#p#&m#p#q!Ls#q#r##m#r~!LsIg# O]Q1s%p7[OY!LsYZ+oZ]!Ls]^+o^w!Lswx# wx#O!Ls#O#P#!y#P#o!Ls#o#p#&m#p#q!Ls#q#r##m#r~!LsHP#!OXQ1s%p7[OY# wYZ-wZ]# w]^-w^#o# w#o#p#!k#p#q# w#q#r#!k#r~# w1s#!pRQ1sOY#!kZ]#!k^~#!kIg##QXQ1s%p7[OY!LsYZ+oZ]!Ls]^+o^#o!Ls#o#p##m#p#q!Ls#q#r##m#r~!Ls3Z##vZQ1s%gS%v!bOY##mYZ.kZ]##m]^.k^w##mwx#$ix#O##m#O#P#&X#P#o##m#o#p#&m#p~##m3Z#$nZQ1sOY##mYZ.kZ]##m]^.k^w##mwx#%ax#O##m#O#P#&X#P#o##m#o#p#&m#p~##m3Z#%fZQ1sOY##mYZ.kZ]##m]^.k^w##mwx#!kx#O##m#O#P#&X#P#o##m#o#p#&m#p~##m3Z#&^TQ1sOY##mYZ.kZ]##m]^.k^~##m3Z#&tZQ1s%gSOY#'gYZ0xZ]#'g]^0x^w#'gwx#(Zx#O#'g#O#P#)m#P#o#'g#o#p##m#p~#'g1w#'nXQ1s%gSOY#'gYZ0xZ]#'g]^0x^w#'gwx#(Zx#O#'g#O#P#)m#P~#'g1w#(`XQ1sOY#'gYZ0xZ]#'g]^0x^w#'gwx#({x#O#'g#O#P#)m#P~#'g1w#)QXQ1sOY#'gYZ0xZ]#'g]^0x^w#'gwx#!kx#O#'g#O#P#)m#P~#'g1w#)rTQ1sOY#'gYZ0xZ]#'g]^0x^~#'gIo#*YXQ1s%p7[OY!IRYZ(yZ]!IR]^(y^#o!IR#o#p#*u#p#q!IR#q#r#*u#r~!IR3c#+Q]Q1s%gS%jW%v!bOY#*uYZ2kZ]#*u]^2k^r#*urs#+ysw#*uwx#-}x#O#*u#O#P#2i#P#o#*u#o#p#2}#p~#*u3c#,S]Q1s%gS%v!bOY#*uYZ2kZ]#*u]^2k^r#*urs#,{sw#*uwx#-}x#O#*u#O#P#2i#P#o#*u#o#p#2}#p~#*u3c#-U]Q1s%gS%v!bOY#*uYZ2kZ]#*u]^2k^r#*urs##msw#*uwx#-}x#O#*u#O#P#2i#P#o#*u#o#p#2}#p~#*u3c#.U]Q1s%jWOY#*uYZ2kZ]#*u]^2k^r#*urs#+ysw#*uwx#.}x#O#*u#O#P#2i#P#o#*u#o#p#2}#p~#*u3c#/U]Q1s%jWOY#*uYZ2kZ]#*u]^2k^r#*urs#+ysw#*uwx#/}x#O#*u#O#P#2i#P#o#*u#o#p#2}#p~#*u1{#0UXQ1s%jWOY#/}YZ6ZZ]#/}]^6Z^r#/}rs#0qs#O#/}#O#P#2T#P~#/}1{#0vXQ1sOY#/}YZ6ZZ]#/}]^6Z^r#/}rs#1cs#O#/}#O#P#2T#P~#/}1{#1hXQ1sOY#/}YZ6ZZ]#/}]^6Z^r#/}rs#!ks#O#/}#O#P#2T#P~#/}1{#2YTQ1sOY#/}YZ6ZZ]#/}]^6Z^~#/}3c#2nTQ1sOY#*uYZ2kZ]#*u]^2k^~#*u3c#3W]Q1s%gS%jWOY#4PYZ8bZ]#4P]^8b^r#4Prs#4{sw#4Pwx#6ox#O#4P#O#P#8c#P#o#4P#o#p#*u#p~#4P2P#4YZQ1s%gS%jWOY#4PYZ8bZ]#4P]^8b^r#4Prs#4{sw#4Pwx#6ox#O#4P#O#P#8c#P~#4P2P#5SZQ1s%gSOY#4PYZ8bZ]#4P]^8b^r#4Prs#5usw#4Pwx#6ox#O#4P#O#P#8c#P~#4P2P#5|ZQ1s%gSOY#4PYZ8bZ]#4P]^8b^r#4Prs#'gsw#4Pwx#6ox#O#4P#O#P#8c#P~#4P2P#6vZQ1s%jWOY#4PYZ8bZ]#4P]^8b^r#4Prs#4{sw#4Pwx#7ix#O#4P#O#P#8c#P~#4P2P#7pZQ1s%jWOY#4PYZ8bZ]#4P]^8b^r#4Prs#4{sw#4Pwx#/}x#O#4P#O#P#8c#P~#4P2P#8hTQ1sOY#4PYZ8bZ]#4P]^8b^~#4PIo#9Q_Q1s%p7[%jWOY!IRYZ(yZ]!IR]^(y^r!IRrs!J_sw!IRwx#:Px#O!IR#O#P#*R#P#o!IR#o#p#2}#p#q!IR#q#r#*u#r~!IRHX#:Y]Q1s%p7[%jWOY#:PYZ<[Z]#:P]^<[^r#:Prs#;Rs#O#:P#O#P#=R#P#o#:P#o#p#/}#p#q#:P#q#r#/}#r~#:PHX#;Y]Q1s%p7[OY#:PYZ<[Z]#:P]^<[^r#:Prs#<Rs#O#:P#O#P#=R#P#o#:P#o#p#/}#p#q#:P#q#r#/}#r~#:PHX#<Y]Q1s%p7[OY#:PYZ<[Z]#:P]^<[^r#:Prs# ws#O#:P#O#P#=R#P#o#:P#o#p#/}#p#q#:P#q#r#/}#r~#:PHX#=YXQ1s%p7[OY#:PYZ<[Z]#:P]^<[^#o#:P#o#p#/}#p#q#:P#q#r#/}#r~#:PJP#=|XQ1s%p7[OY!FkYZ'PZ]!Fk]^'P^#o!Fk#o#p#>i#p#q!Fk#q#r#>i#r~!Fk3s#>v]Q1s%gS%jW%m`%v!bOY#>iYZ?[Z]#>i]^?[^r#>irs#?osw#>iwx#-}x#O#>i#O#P#DT#P#o#>i#o#p#Di#p~#>i3s#?z]Q1s%gS%m`%v!bOY#>iYZ?[Z]#>i]^?[^r#>irs#@ssw#>iwx#-}x#O#>i#O#P#DT#P#o#>i#o#p#Di#p~#>i3s#AO]Q1s%gS%m`%v!bOY#>iYZ?[Z]#>i]^?[^r#>irs#Awsw#>iwx#-}x#O#>i#O#P#DT#P#o#>i#o#p#Di#p~#>i3k#BSZQ1s%gS%m`%v!bOY#AwYZAnZ]#Aw]^An^w#Awwx#$ix#O#Aw#O#P#Bu#P#o#Aw#o#p#CZ#p~#Aw3k#BzTQ1sOY#AwYZAnZ]#Aw]^An^~#Aw3k#CbZQ1s%gSOY#'gYZ0xZ]#'g]^0x^w#'gwx#(Zx#O#'g#O#P#)m#P#o#'g#o#p#Aw#p~#'g3s#DYTQ1sOY#>iYZ?[Z]#>i]^?[^~#>i3s#Dr]Q1s%gS%jWOY#4PYZ8bZ]#4P]^8b^r#4Prs#4{sw#4Pwx#6ox#O#4P#O#P#8c#P#o#4P#o#p#>i#p~#4PJP#Ex_Q1s%p7[%gS%m`%v!bOY!FkYZ'PZ]!Fk]^'P^r!Fkrs#Fwsw!Fkwx!Gyx#O!Fk#O#P#=u#P#o!Fk#o#p#Di#p#q!Fk#q#r#>i#r~!FkIw#GU]Q1s%p7[%gS%m`%v!bOY#FwYZDvZ]#Fw]^Dv^w#Fwwx!Mwx#O#Fw#O#P#G}#P#o#Fw#o#p#CZ#p#q#Fw#q#r#Aw#r~#FwIw#HUXQ1s%p7[OY#FwYZDvZ]#Fw]^Dv^#o#Fw#o#p#Aw#p#q#Fw#q#r#Aw#r~#FwMV#IO_Q1s%p7[%jW%sp%x#tOY#I}YZGQZ]#I}]^GQ^r#I}rs!J_sw#I}wx$%]x#O#I}#O#P#K_#P#o#I}#o#p$$Z#p#q#I}#q#r#LR#r~#I}MV#J`_Q1s%p7[%gS%jW%sp%v!b%x#tOY#I}YZGQZ]#I}]^GQ^r#I}rs!J_sw#I}wx#Hqx#O#I}#O#P#K_#P#o#I}#o#p$$Z#p#q#I}#q#r#LR#r~#I}MV#KfXQ1s%p7[OY#I}YZGQZ]#I}]^GQ^#o#I}#o#p#LR#p#q#I}#q#r#LR#r~#I}6y#Lb]Q1s%gS%jW%sp%v!b%x#tOY#LRYZHhZ]#LR]^Hh^r#LRrs#+ysw#LRwx#MZx#O#LR#O#P$#u#P#o#LR#o#p$$Z#p~#LR6y#Mf]Q1s%jW%sp%x#tOY#LRYZHhZ]#LR]^Hh^r#LRrs#+ysw#LRwx#N_x#O#LR#O#P$#u#P#o#LR#o#p$$Z#p~#LR6y#Nj]Q1s%jW%sp%x#tOY#LRYZHhZ]#LR]^Hh^r#LRrs#+ysw#LRwx$ cx#O#LR#O#P$#u#P#o#LR#o#p$$Z#p~#LR5c$ n]Q1s%jW%sp%x#tOY$ cYZJ|Z]$ c]^J|^r$ crs#0qsw$ cwx$ cx#O$ c#O#P$!g#P#o$ c#o#p$!{#p~$ c5c$!lTQ1sOY$ cYZJ|Z]$ c]^J|^~$ c5c$#SZQ1s%jWOY#/}YZ6ZZ]#/}]^6Z^r#/}rs#0qs#O#/}#O#P#2T#P#o#/}#o#p$ c#p~#/}6y$#zTQ1sOY#LRYZHhZ]#LR]^Hh^~#LR6y$$d]Q1s%gS%jWOY#4PYZ8bZ]#4P]^8b^r#4Prs#4{sw#4Pwx#6ox#O#4P#O#P#8c#P#o#4P#o#p#LR#p~#4PMV$%j_Q1s%p7[%jW%sp%x#tOY#I}YZGQZ]#I}]^GQ^r#I}rs!J_sw#I}wx$&ix#O#I}#O#P#K_#P#o#I}#o#p$$Z#p#q#I}#q#r#LR#r~#I}Ko$&v_Q1s%p7[%jW%sp%x#tOY$&iYZN[Z]$&i]^N[^r$&irs#;Rsw$&iwx$&ix#O$&i#O#P$'u#P#o$&i#o#p$!{#p#q$&i#q#r$ c#r~$&iKo$'|XQ1s%p7[OY$&iYZN[Z]$&i]^N[^#o$&i#o#p$ c#p#q$&i#q#r$ c#r~$&iMg$(pXQ1s%p7[OY!C{YZ$}Z]!C{]^$}^#o!C{#o#p$)]#p#q!C{#q#r$)]#r~!C{7Z$)n]Q1s%gS%jW%m`%sp%v!b%x#tOY$)]YZ!!SZ]$)]]^!!S^r$)]rs#?osw$)]wx#MZx#O$)]#O#P$*g#P#o$)]#o#p$*{#p~$)]7Z$*lTQ1sOY$)]YZ!!SZ]$)]]^!!S^~$)]7Z$+U]Q1s%gS%jWOY#4PYZ8bZ]#4P]^8b^r#4Prs#4{sw#4Pwx#6ox#O#4P#O#P#8c#P#o#4P#o#p$)]#p~#4PGz$,b]$}Q%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gz$-nZ!s,W%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gz$.t]$wQ%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{$/|_%q`%p7[%jW%e,X%sp%x#tOY$0{YZGQZ]$0{]^GQ^r$0{rs$2]sw$0{wx$Jex#O$0{#O#P$Fw#P#o$0{#o#p$Ic#p#q$0{#q#r$G]#r~$0{Gk$1^_%p7[%gS%jW%e,X%sp%v!b%x#tOY$0{YZGQZ]$0{]^GQ^r$0{rs$2]sw$0{wx$Ewx#O$0{#O#P$Fw#P#o$0{#o#p$Ic#p#q$0{#q#r$G]#r~$0{DT$2h_%p7[%gS%e,X%v!bOY$3gYZ(yZ]$3g]^(y^r$3grs$Basw$3gwx$4sx#O$3g#O#P$5o#P#o$3g#o#p$={#p#q$3g#q#r$6T#r~$3gDT$3t_%p7[%gS%jW%e,X%v!bOY$3gYZ(yZ]$3g]^(y^r$3grs$2]sw$3gwx$4sx#O$3g#O#P$5o#P#o$3g#o#p$={#p#q$3g#q#r$6T#r~$3gDT$4|Z%p7[%jW%e,XOr(yrs)wsw(ywx;bx#O(y#O#P2V#P#o(y#o#p7n#p#q(y#q#r2k#r~(yDT$5tT%p7[O#o$3g#o#p$6T#p#q$3g#q#r$6T#r~$3g-w$6`]%gS%jW%e,X%v!bOY$6TYZ2kZ]$6T]^2k^r$6Trs$7Xsw$6Twx$=Rx#O$6T#O#P$=u#P#o$6T#o#p$={#p~$6T-w$7b]%gS%e,X%v!bOY$6TYZ2kZ]$6T]^2k^r$6Trs$8Zsw$6Twx$=Rx#O$6T#O#P$=u#P#o$6T#o#p$={#p~$6T-w$8d]%gS%e,X%v!bOY$6TYZ2kZ]$6T]^2k^r$6Trs$9]sw$6Twx$=Rx#O$6T#O#P$=u#P#o$6T#o#p$={#p~$6T-o$9fZ%gS%e,X%v!bOY$9]YZ.kZ]$9]]^.k^w$9]wx$:Xx#O$9]#O#P$:s#P#o$9]#o#p$:y#p~$9]-o$:^V%e,XOw.kwx/qx#O.k#O#P0W#P#o.k#o#p0^#p~.k-o$:vPO~$9]-o$;QZ%gS%e,XOY$;sYZ0xZ]$;s]^0x^w$;swx$<gx#O$;s#O#P$<{#P#o$;s#o#p$9]#p~$;s,]$;zX%gS%e,XOY$;sYZ0xZ]$;s]^0x^w$;swx$<gx#O$;s#O#P$<{#P~$;s,]$<lT%e,XOw0xwx1px#O0x#O#P2P#P~0x,]$=OPO~$;s-w$=YX%jW%e,XOr2krs3asw2kwx5ix#O2k#O#P7h#P#o2k#o#p7n#p~2k-w$=xPO~$6T-w$>U]%gS%jW%e,XOY$>}YZ8bZ]$>}]^8b^r$>}rs$?ysw$>}wx$Amx#O$>}#O#P$BZ#P#o$>}#o#p$6T#p~$>},e$?WZ%gS%jW%e,XOY$>}YZ8bZ]$>}]^8b^r$>}rs$?ysw$>}wx$Amx#O$>}#O#P$BZ#P~$>},e$@QZ%gS%e,XOY$>}YZ8bZ]$>}]^8b^r$>}rs$@ssw$>}wx$Amx#O$>}#O#P$BZ#P~$>},e$@zZ%gS%e,XOY$>}YZ8bZ]$>}]^8b^r$>}rs$;ssw$>}wx$Amx#O$>}#O#P$BZ#P~$>},e$AtV%jW%e,XOr8brs9Osw8bwx:px#O8b#O#P;[#P~8b,e$B^PO~$>}DT$Bl_%p7[%gS%e,X%v!bOY$3gYZ(yZ]$3g]^(y^r$3grs$Cksw$3gwx$4sx#O$3g#O#P$5o#P#o$3g#o#p$={#p#q$3g#q#r$6T#r~$3gC{$Cv]%p7[%gS%e,X%v!bOY$CkYZ+oZ]$Ck]^+o^w$Ckwx$Dox#O$Ck#O#P$Ec#P#o$Ck#o#p$:y#p#q$Ck#q#r$9]#r~$CkC{$DvX%p7[%e,XOw+owx-Vx#O+o#O#P.V#P#o+o#o#p0^#p#q+o#q#r.k#r~+oC{$EhT%p7[O#o$Ck#o#p$9]#p#q$Ck#q#r$9]#r~$CkGk$FUZ%p7[%jW%e,X%sp%x#tOrGQrs)wswGQwxM^x#OGQ#O#PHS#P#oGQ#o#pLj#p#qGQ#q#rHh#r~GQGk$F|T%p7[O#o$0{#o#p$G]#p#q$0{#q#r$G]#r~$0{1_$Gl]%gS%jW%e,X%sp%v!b%x#tOY$G]YZHhZ]$G]]^Hh^r$G]rs$7Xsw$G]wx$Hex#O$G]#O#P$I]#P#o$G]#o#p$Ic#p~$G]1_$HpX%jW%e,X%sp%x#tOrHhrs3aswHhwxJWx#OHh#O#PLd#P#oHh#o#pLj#p~Hh1_$I`PO~$G]1_$Il]%gS%jW%e,XOY$>}YZ8bZ]$>}]^8b^r$>}rs$?ysw$>}wx$Amx#O$>}#O#P$BZ#P#o$>}#o#p$G]#p~$>}Gk$JrZ%p7[%jW%e,X%sp%x#tOrGQrs)wswGQwx$Kex#OGQ#O#PHS#P#oGQ#o#pLj#p#qGQ#q#rHh#r~GQGk$KtZ%h!f%p7[%jW%f,X%sp%x#tOrN[rs=OswN[wxN[x#ON[#O#P! Y#P#oN[#o#pKx#p#qN[#q#rJ|#r~N[G{$LzZf,X%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}<u$NQZ!OR%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{% W_T,X%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSxz$}z{%!V{!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{%!j]_R%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{%#v]$z,X%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}<u%%SZwR%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Mg%&Y^${,X%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`!a%'U!a#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}B^%'iZ&S&j%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{%(o_!dQ%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!O$}!O!P%)n!P!Q$}!Q![%,O![#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{%*P]%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!O$}!O!P%*x!P#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{%+]Z!m,X%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%,cg!f,V%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!Q$}!Q![%,O![!g$}!g!h%-z!h!l$}!l!m%2[!m#O$}#O#P! n#P#R$}#R#S%,O#S#X$}#X#Y%-z#Y#^$}#^#_%2[#_#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%.]a%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx{$}{|%/b|}$}}!O%/b!O!Q$}!Q![%0l![#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%/s]%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!Q$}!Q![%0l![#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%1Pc!f,V%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!Q$}!Q![%0l![!l$}!l!m%2[!m#O$}#O#P! n#P#R$}#R#S%0l#S#^$}#^#_%2[#_#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%2oZ!f,V%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{%3u_$|R%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!P$}!P!Q%4t!Q!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gz%5X]%OQ%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%6eu!f,V%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!O$}!O!P%8x!P!Q$}!Q![%:S![!d$}!d!e%<U!e!g$}!g!h%-z!h!l$}!l!m%2[!m!q$}!q!r%?O!r!z$}!z!{%Ar!{#O$}#O#P! n#P#R$}#R#S%:S#S#U$}#U#V%<U#V#X$}#X#Y%-z#Y#^$}#^#_%2[#_#c$}#c#d%?O#d#l$}#l#m%Ar#m#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%9Z]%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!Q$}!Q![%,O![#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%:gi!f,V%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!O$}!O!P%8x!P!Q$}!Q![%:S![!g$}!g!h%-z!h!l$}!l!m%2[!m#O$}#O#P! n#P#R$}#R#S%:S#S#X$}#X#Y%-z#Y#^$}#^#_%2[#_#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%<g`%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!Q$}!Q!R%=i!R!S%=i!S#O$}#O#P! n#P#R$}#R#S%=i#S#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%=|`!f,V%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!Q$}!Q!R%=i!R!S%=i!S#O$}#O#P! n#P#R$}#R#S%=i#S#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%?a_%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!Q$}!Q!Y%@`!Y#O$}#O#P! n#P#R$}#R#S%@`#S#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%@s_!f,V%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!Q$}!Q!Y%@`!Y#O$}#O#P! n#P#R$}#R#S%@`#S#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%BTc%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!Q$}!Q![%C`![!c$}!c!i%C`!i#O$}#O#P! n#P#R$}#R#S%C`#S#T$}#T#Z%C`#Z#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy%Csc!f,V%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!Q$}!Q![%C`![!c$}!c!i%C`!i#O$}#O#P! n#P#R$}#R#S%C`#S#T$}#T#Z%C`#Z#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Mg%Ec]x1s%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`%F[!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}<u%FoZ%WR%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{%GuZ#^,X%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{%H{_jR%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!^$}!^!_%Iz!_!`!'m!`!a!'m!a#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gz%J_]$xQ%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{%Kk]%V,X%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`!'m!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{%Lw^jR%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`!'m!`!a%Ms!a#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gz%NW]$yQ%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}G{& f]]Q#tP%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Mg&!tc%p7[%gS%jW%d&j%m`%sp%v!b%x#t%Q,XOr$}rs&Rsw$}wxFSx!Q$}!Q![&!_![!c$}!c!}&!_!}#O$}#O#P! n#P#R$}#R#S&!_#S#T$}#T#o&!_#o#p!#U#p#q$}#q#r!!S#r$g$}$g~&!_Mg&$fg%p7[%gS%jW%d&j%m`%sp%v!b%x#t%Q,XOr$}rs&%}sw$}wx&)Tx!Q$}!Q![&!_![!c$}!c!t&!_!t!u&,a!u!}&!_!}#O$}#O#P! n#P#R$}#R#S&!_#S#T$}#T#f&!_#f#g&,a#g#o&!_#o#p!#U#p#q$}#q#r!!S#r$g$}$g~&!_De&&[_%p7[%gS%e,X%m`%v!bOY!+XYZ'PZ]!+X]^'P^r!+Xrs&'Zsw!+Xwx!-gx#O!+X#O#P!>e#P#o!+X#o#p!@}#p#q!+X#q#r!>y#r~!+XDe&'hZ%p7[%gS%e,X%m`%v!bOr'Prs&(Zsw'Pwx(Px#O'P#O#P>v#P#o'P#o#pCU#p#q'P#q#r?[#r~'PD]&(hX%p7[%gS%i,X%m`%v!bOwDvwx,ex#ODv#O#PEn#P#oDv#o#pBd#p#qDv#q#rAn#r~DvGk&)b_%p7[%jW%e,X%sp%x#tOY$0{YZGQZ]$0{]^GQ^r$0{rs$2]sw$0{wx&*ax#O$0{#O#P$Fw#P#o$0{#o#p$Ic#p#q$0{#q#r$G]#r~$0{Gk&*nZ%p7[%jW%e,X%sp%x#tOrGQrs)wswGQwx&+ax#OGQ#O#PHS#P#oGQ#o#pLj#p#qGQ#q#rHh#r~GQFT&+nZ%p7[%jW%f,X%sp%x#tOrN[rs=OswN[wxN[x#ON[#O#P! Y#P#oN[#o#pKx#p#qN[#q#rJ|#r~N[Mg&,vc%p7[%gS%jW%d&j%m`%sp%v!b%x#t%Q,XOr$}rs&%}sw$}wx&)Tx!Q$}!Q![&!_![!c$}!c!}&!_!}#O$}#O#P! n#P#R$}#R#S&!_#S#T$}#T#o&!_#o#p!#U#p#q$}#q#r!!S#r$g$}$g~&!_Mg&.hg%p7[%gS%jW%d&j%m`%sp%v!b%x#t%Q,XOr$}rs&0Psw$}wx&2wx!Q$}!Q![&!_![!c$}!c!t&!_!t!u&5u!u!}&!_!}#O$}#O#P! n#P#R$}#R#S&!_#S#T$}#T#f&!_#f#g&5u#g#o&!_#o#p!#U#p#q$}#q#r!!S#r$g$}$g~&!_De&0^Z%p7[%gS%m`%v!b%r,XOr'Prs&1Psw'Pwx(Px#O'P#O#P>v#P#o'P#o#pCU#p#q'P#q#r?[#r~'PDe&1[Z%p7[%gS%m`%v!bOr'Prs&1}sw'Pwx(Px#O'P#O#P>v#P#o'P#o#pCU#p#q'P#q#r?[#r~'PD]&2[X%p7[%gS%w,X%m`%v!bOwDvwx,ex#ODv#O#PEn#P#oDv#o#pBd#p#qDv#q#rAn#r~DvGk&3UZ%p7[%jW%sp%x#t%l,XOrGQrs)wswGQwx&3wx#OGQ#O#PHS#P#oGQ#o#pLj#p#qGQ#q#rHh#r~GQGk&4SZ%p7[%jW%sp%x#tOrGQrs)wswGQwx&4ux#OGQ#O#PHS#P#oGQ#o#pLj#p#qGQ#q#rHh#r~GQFT&5SZ%p7[%jW%u,X%sp%x#tOrN[rs=OswN[wxN[x#ON[#O#P! Y#P#oN[#o#pKx#p#qN[#q#rJ|#r~N[Mg&6[c%p7[%gS%jW%d&j%m`%sp%v!b%x#t%Q,XOr$}rs&0Psw$}wx&2wx!Q$}!Q![&!_![!c$}!c!}&!_!}#O$}#O#P! n#P#R$}#R#S&!_#S#T$}#T#o&!_#o#p!#U#p#q$}#q#r!!S#r$g$}$g~&!_Mg&7|k%p7[%gS%jW%d&j%m`%sp%v!b%x#t%Q,XOr$}rs&%}sw$}wx&)Tx!Q$}!Q![&!_![!c$}!c!h&!_!h!i&5u!i!t&!_!t!u&,a!u!}&!_!}#O$}#O#P! n#P#R$}#R#S&!_#S#T$}#T#U&!_#U#V&,a#V#Y&!_#Y#Z&5u#Z#o&!_#o#p!#U#p#q$}#q#r!!S#r$g$}$g~&!_G{&:UZ!V,X%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}<u&;[Z!WR%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gz&<b]$vQ%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}Gy&=dX%gS%jW!ZGmOr8brs9Osw8bwx:Ux#O8b#O#P;[#P#o8b#o#p!!S#p~8bGz&>d]$uQ%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx!_$}!_!`$-Z!`#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}<u&?nX![7_%gS%jW%m`%sp%v!b%x#tOr!!Srs@Ssw!!SwxIbx#O!!S#O#P!#O#P#o!!S#o#p!#U#p~!!SGy&@nZ%P,V%p7[%gS%jW%m`%sp%v!b%x#tOr$}rs&Rsw$}wxFSx#O$}#O#P! n#P#o$}#o#p!#U#p#q$}#q#r!!S#r~$}",
                tokenizers: [legacyPrint, indentation, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, newlines],
                topRules: { "Script": [0, 3] },
                specialized: [{ term: 186, get: function (value) { return spec_identifier[value] || -1; } }],
                tokenPrec: 6594
            });
            exports.parser = parser;
            /***/ 
        }),
        /***/ "./node_modules/lezer-tree/dist/tree.cjs": 
        /*!***********************************************!*\
          !*** ./node_modules/lezer-tree/dist/tree.cjs ***!
          \***********************************************/
        /***/ (function (__unused_webpack_module, exports) {
            Object.defineProperty(exports, "__esModule", ({ value: true }));
            /// The default maximum length of a `TreeBuffer` node.
            var DefaultBufferLength = 1024;
            var nextPropID = 0;
            var CachedNode = new WeakMap();
            /// Each [node type](#tree.NodeType) can have metadata associated with
            /// it in props. Instances of this class represent prop names.
            var NodeProp = /** @class */ (function () {
                /// Create a new node prop type. You can optionally pass a
                /// `deserialize` function.
                function NodeProp(_b) {
                    var _c = _b === void 0 ? {} : _b, deserialize = _c.deserialize;
                    this.id = nextPropID++;
                    this.deserialize = deserialize || (function () {
                        throw new Error("This node type doesn't define a deserialize function");
                    });
                }
                /// Create a string-valued node prop whose deserialize function is
                /// the identity function.
                NodeProp.string = function () { return new NodeProp({ deserialize: function (str) { return str; } }); };
                /// Create a number-valued node prop whose deserialize function is
                /// just `Number`.
                NodeProp.number = function () { return new NodeProp({ deserialize: Number }); };
                /// Creates a boolean-valued node prop whose deserialize function
                /// returns true for any input.
                NodeProp.flag = function () { return new NodeProp({ deserialize: function () { return true; } }); };
                /// Store a value for this prop in the given object. This can be
                /// useful when building up a prop object to pass to the
                /// [`NodeType`](#tree.NodeType) constructor. Returns its first
                /// argument.
                NodeProp.prototype.set = function (propObj, value) {
                    propObj[this.id] = value;
                    return propObj;
                };
                /// This is meant to be used with
                /// [`NodeSet.extend`](#tree.NodeSet.extend) or
                /// [`Parser.withProps`](#lezer.Parser.withProps) to compute prop
                /// values for each node type in the set. Takes a [match
                /// object](#tree.NodeType^match) or function that returns undefined
                /// if the node type doesn't get this prop, and the prop's value if
                /// it does.
                NodeProp.prototype.add = function (match) {
                    var _this = this;
                    if (typeof match != "function")
                        match = NodeType.match(match);
                    return function (type) {
                        var result = match(type);
                        return result === undefined ? null : [_this, result];
                    };
                };
                return NodeProp;
            }());
            /// Prop that is used to describe matching delimiters. For opening
            /// delimiters, this holds an array of node names (written as a
            /// space-separated string when declaring this prop in a grammar)
            /// for the node types of closing delimiters that match it.
            NodeProp.closedBy = new NodeProp({ deserialize: function (str) { return str.split(" "); } });
            /// The inverse of [`openedBy`](#tree.NodeProp^closedBy). This is
            /// attached to closing delimiters, holding an array of node names
            /// of types of matching opening delimiters.
            NodeProp.openedBy = new NodeProp({ deserialize: function (str) { return str.split(" "); } });
            /// Used to assign node types to groups (for example, all node
            /// types that represent an expression could be tagged with an
            /// `"Expression"` group).
            NodeProp.group = new NodeProp({ deserialize: function (str) { return str.split(" "); } });
            var noProps = Object.create(null);
            /// Each node in a syntax tree has a node type associated with it.
            var NodeType = /** @class */ (function () {
                /// @internal
                function NodeType(
                /// The name of the node type. Not necessarily unique, but if the
                /// grammar was written properly, different node types with the
                /// same name within a node set should play the same semantic
                /// role.
                name, 
                /// @internal
                props, 
                /// The id of this node in its set. Corresponds to the term ids
                /// used in the parser.
                id, 
                /// @internal
                flags) {
                    if (flags === void 0) { flags = 0; }
                    this.name = name;
                    this.props = props;
                    this.id = id;
                    this.flags = flags;
                }
                NodeType.define = function (spec) {
                    var props = spec.props && spec.props.length ? Object.create(null) : noProps;
                    var flags = (spec.top ? 1 /* Top */ : 0) | (spec.skipped ? 2 /* Skipped */ : 0) |
                        (spec.error ? 4 /* Error */ : 0) | (spec.name == null ? 8 /* Anonymous */ : 0);
                    var type = new NodeType(spec.name || "", props, spec.id, flags);
                    if (spec.props)
                        for (var _b = 0, _c = spec.props; _b < _c.length; _b++) {
                            var src = _c[_b];
                            if (!Array.isArray(src))
                                src = src(type);
                            if (src)
                                src[0].set(props, src[1]);
                        }
                    return type;
                };
                /// Retrieves a node prop for this type. Will return `undefined` if
                /// the prop isn't present on this node.
                NodeType.prototype.prop = function (prop) { return this.props[prop.id]; };
                Object.defineProperty(NodeType.prototype, "isTop", {
                    /// True when this is the top node of a grammar.
                    get: function () { return (this.flags & 1 /* Top */) > 0; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(NodeType.prototype, "isSkipped", {
                    /// True when this node is produced by a skip rule.
                    get: function () { return (this.flags & 2 /* Skipped */) > 0; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(NodeType.prototype, "isError", {
                    /// Indicates whether this is an error node.
                    get: function () { return (this.flags & 4 /* Error */) > 0; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(NodeType.prototype, "isAnonymous", {
                    /// When true, this node type doesn't correspond to a user-declared
                    /// named node, for example because it is used to cache repetition.
                    get: function () { return (this.flags & 8 /* Anonymous */) > 0; },
                    enumerable: false,
                    configurable: true
                });
                /// Returns true when this node's name or one of its
                /// [groups](#tree.NodeProp^group) matches the given string.
                NodeType.prototype.is = function (name) {
                    if (typeof name == 'string') {
                        if (this.name == name)
                            return true;
                        var group = this.prop(NodeProp.group);
                        return group ? group.indexOf(name) > -1 : false;
                    }
                    return this.id == name;
                };
                /// Create a function from node types to arbitrary values by
                /// specifying an object whose property names are node or
                /// [group](#tree.NodeProp^group) names. Often useful with
                /// [`NodeProp.add`](#tree.NodeProp.add). You can put multiple
                /// names, separated by spaces, in a single property name to map
                /// multiple node names to a single value.
                NodeType.match = function (map) {
                    var direct = Object.create(null);
                    for (var prop in map)
                        for (var _b = 0, _c = prop.split(" "); _b < _c.length; _b++) {
                            var name_3 = _c[_b];
                            direct[name_3] = map[prop];
                        }
                    return function (node) {
                        for (var groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {
                            var found = direct[i < 0 ? node.name : groups[i]];
                            if (found)
                                return found;
                        }
                    };
                };
                return NodeType;
            }());
            /// An empty dummy node type to use when no actual type is available.
            NodeType.none = new NodeType("", Object.create(null), 0, 8 /* Anonymous */);
            /// A node set holds a collection of node types. It is used to
            /// compactly represent trees by storing their type ids, rather than a
            /// full pointer to the type object, in a number array. Each parser
            /// [has](#lezer.Parser.nodeSet) a node set, and [tree
            /// buffers](#tree.TreeBuffer) can only store collections of nodes
            /// from the same set. A set can have a maximum of 2**16 (65536)
            /// node types in it, so that the ids fit into 16-bit typed array
            /// slots.
            var NodeSet = /** @class */ (function () {
                /// Create a set with the given types. The `id` property of each
                /// type should correspond to its position within the array.
                function NodeSet(
                /// The node types in this set, by id.
                types) {
                    this.types = types;
                    for (var i = 0; i < types.length; i++)
                        if (types[i].id != i)
                            throw new RangeError("Node type ids should correspond to array positions when creating a node set");
                }
                /// Create a copy of this set with some node properties added. The
                /// arguments to this method should be created with
                /// [`NodeProp.add`](#tree.NodeProp.add).
                NodeSet.prototype.extend = function () {
                    var props = [];
                    for (var _b = 0; _b < arguments.length; _b++) {
                        props[_b] = arguments[_b];
                    }
                    var newTypes = [];
                    for (var _c = 0, _d = this.types; _c < _d.length; _c++) {
                        var type = _d[_c];
                        var newProps = null;
                        for (var _e = 0, props_1 = props; _e < props_1.length; _e++) {
                            var source = props_1[_e];
                            var add = source(type);
                            if (add) {
                                if (!newProps)
                                    newProps = Object.assign({}, type.props);
                                add[0].set(newProps, add[1]);
                            }
                        }
                        newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);
                    }
                    return new NodeSet(newTypes);
                };
                return NodeSet;
            }());
            /// A piece of syntax tree. There are two ways to approach these
            /// trees: the way they are actually stored in memory, and the
            /// convenient way.
            ///
            /// Syntax trees are stored as a tree of `Tree` and `TreeBuffer`
            /// objects. By packing detail information into `TreeBuffer` leaf
            /// nodes, the representation is made a lot more memory-efficient.
            ///
            /// However, when you want to actually work with tree nodes, this
            /// representation is very awkward, so most client code will want to
            /// use the `TreeCursor` interface instead, which provides a view on
            /// some part of this data structure, and can be used to move around
            /// to adjacent nodes.
            var Tree = /** @class */ (function () {
                /// Construct a new tree. You usually want to go through
                /// [`Tree.build`](#tree.Tree^build) instead.
                function Tree(type, 
                /// The tree's child nodes. Children small enough to fit in a
                /// `TreeBuffer will be represented as such, other children can be
                /// further `Tree` instances with their own internal structure.
                children, 
                /// The positions (offsets relative to the start of this tree) of
                /// the children.
                positions, 
                /// The total length of this tree
                length) {
                    this.type = type;
                    this.children = children;
                    this.positions = positions;
                    this.length = length;
                }
                /// @internal
                Tree.prototype.toString = function () {
                    var children = this.children.map(function (c) { return c.toString(); }).join();
                    return !this.type.name ? children :
                        (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) +
                            (children.length ? "(" + children + ")" : "");
                };
                /// Get a [tree cursor](#tree.TreeCursor) rooted at this tree. When
                /// `pos` is given, the cursor is [moved](#tree.TreeCursor.moveTo)
                /// to the given position and side.
                Tree.prototype.cursor = function (pos, side) {
                    if (side === void 0) { side = 0; }
                    var scope = (pos != null && CachedNode.get(this)) || this.topNode;
                    var cursor = new TreeCursor(scope);
                    if (pos != null) {
                        cursor.moveTo(pos, side);
                        CachedNode.set(this, cursor._tree);
                    }
                    return cursor;
                };
                /// Get a [tree cursor](#tree.TreeCursor) that, unlike regular
                /// cursors, doesn't skip [anonymous](#tree.NodeType.isAnonymous)
                /// nodes.
                Tree.prototype.fullCursor = function () {
                    return new TreeCursor(this.topNode, true);
                };
                Object.defineProperty(Tree.prototype, "topNode", {
                    /// Get a [syntax node](#tree.SyntaxNode) object for the top of the
                    /// tree.
                    get: function () {
                        return new TreeNode(this, 0, 0, null);
                    },
                    enumerable: false,
                    configurable: true
                });
                /// Get the [syntax node](#tree.SyntaxNode) at the given position.
                /// If `side` is -1, this will move into nodes that end at the
                /// position. If 1, it'll move into nodes that start at the
                /// position. With 0, it'll only enter nodes that cover the position
                /// from both sides.
                Tree.prototype.resolve = function (pos, side) {
                    if (side === void 0) { side = 0; }
                    return this.cursor(pos, side).node;
                };
                /// Iterate over the tree and its children, calling `enter` for any
                /// node that touches the `from`/`to` region (if given) before
                /// running over such a node's children, and `leave` (if given) when
                /// leaving the node. When `enter` returns `false`, the given node
                /// will not have its children iterated over (or `leave` called).
                Tree.prototype.iterate = function (spec) {
                    var enter = spec.enter, leave = spec.leave, _b = spec.from, from = _b === void 0 ? 0 : _b, _c = spec.to, to = _c === void 0 ? this.length : _c;
                    for (var c = this.cursor();;) {
                        var mustLeave = false;
                        if (c.from <= to && c.to >= from && (c.type.isAnonymous || enter(c.type, c.from, c.to) !== false)) {
                            if (c.firstChild())
                                continue;
                            if (!c.type.isAnonymous)
                                mustLeave = true;
                        }
                        for (;;) {
                            if (mustLeave && leave)
                                leave(c.type, c.from, c.to);
                            mustLeave = c.type.isAnonymous;
                            if (c.nextSibling())
                                break;
                            if (!c.parent())
                                return;
                            mustLeave = true;
                        }
                    }
                };
                /// Balance the direct children of this tree.
                Tree.prototype.balance = function (maxBufferLength) {
                    if (maxBufferLength === void 0) { maxBufferLength = DefaultBufferLength; }
                    return this.children.length <= BalanceBranchFactor ? this
                        : balanceRange(this.type, NodeType.none, this.children, this.positions, 0, this.children.length, 0, maxBufferLength, this.length, 0);
                };
                /// Build a tree from a postfix-ordered buffer of node information,
                /// or a cursor over such a buffer.
                Tree.build = function (data) { return buildTree(data); };
                return Tree;
            }());
            /// The empty tree
            Tree.empty = new Tree(NodeType.none, [], [], 0);
            // For trees that need a context hash attached, we're using this
            // kludge which assigns an extra property directly after
            // initialization (creating a single new object shape).
            function withHash(tree, hash) {
                if (hash)
                    tree.contextHash = hash;
                return tree;
            }
            /// Tree buffers contain (type, start, end, endIndex) quads for each
            /// node. In such a buffer, nodes are stored in prefix order (parents
            /// before children, with the endIndex of the parent indicating which
            /// children belong to it)
            var TreeBuffer = /** @class */ (function () {
                /// Create a tree buffer @internal
                function TreeBuffer(
                /// @internal
                buffer, 
                // The total length of the group of nodes in the buffer.
                length, 
                /// @internal
                set, type) {
                    if (type === void 0) { type = NodeType.none; }
                    this.buffer = buffer;
                    this.length = length;
                    this.set = set;
                    this.type = type;
                }
                /// @internal
                TreeBuffer.prototype.toString = function () {
                    var result = [];
                    for (var index = 0; index < this.buffer.length;) {
                        result.push(this.childString(index));
                        index = this.buffer[index + 3];
                    }
                    return result.join(",");
                };
                /// @internal
                TreeBuffer.prototype.childString = function (index) {
                    var id = this.buffer[index], endIndex = this.buffer[index + 3];
                    var type = this.set.types[id], result = type.name;
                    if (/\W/.test(result) && !type.isError)
                        result = JSON.stringify(result);
                    index += 4;
                    if (endIndex == index)
                        return result;
                    var children = [];
                    while (index < endIndex) {
                        children.push(this.childString(index));
                        index = this.buffer[index + 3];
                    }
                    return result + "(" + children.join(",") + ")";
                };
                /// @internal
                TreeBuffer.prototype.findChild = function (startIndex, endIndex, dir, after) {
                    var buffer = this.buffer, pick = -1;
                    for (var i = startIndex; i != endIndex; i = buffer[i + 3]) {
                        if (after != -100000000 /* None */) {
                            var start = buffer[i + 1], end = buffer[i + 2];
                            if (dir > 0) {
                                if (end > after)
                                    pick = i;
                                if (end > after)
                                    break;
                            }
                            else {
                                if (start < after)
                                    pick = i;
                                if (end >= after)
                                    break;
                            }
                        }
                        else {
                            pick = i;
                            if (dir > 0)
                                break;
                        }
                    }
                    return pick;
                };
                return TreeBuffer;
            }());
            var TreeNode = /** @class */ (function () {
                function TreeNode(node, from, index, _parent) {
                    this.node = node;
                    this.from = from;
                    this.index = index;
                    this._parent = _parent;
                }
                Object.defineProperty(TreeNode.prototype, "type", {
                    get: function () { return this.node.type; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(TreeNode.prototype, "name", {
                    get: function () { return this.node.type.name; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(TreeNode.prototype, "to", {
                    get: function () { return this.from + this.node.length; },
                    enumerable: false,
                    configurable: true
                });
                TreeNode.prototype.nextChild = function (i, dir, after, full) {
                    if (full === void 0) { full = false; }
                    for (var parent_1 = this;;) {
                        for (var _b = parent_1.node, children = _b.children, positions = _b.positions, e = dir > 0 ? children.length : -1; i != e; i += dir) {
                            var next = children[i], start = positions[i] + parent_1.from;
                            if (after != -100000000 /* None */ && (dir < 0 ? start >= after : start + next.length <= after))
                                continue;
                            if (next instanceof TreeBuffer) {
                                var index = next.findChild(0, next.buffer.length, dir, after == -100000000 /* None */ ? -100000000 /* None */ : after - start);
                                if (index > -1)
                                    return new BufferNode(new BufferContext(parent_1, next, i, start), null, index);
                            }
                            else if (full || (!next.type.isAnonymous || hasChild(next))) {
                                var inner = new TreeNode(next, start, i, parent_1);
                                return full || !inner.type.isAnonymous ? inner : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, after);
                            }
                        }
                        if (full || !parent_1.type.isAnonymous)
                            return null;
                        i = parent_1.index + dir;
                        parent_1 = parent_1._parent;
                        if (!parent_1)
                            return null;
                    }
                };
                Object.defineProperty(TreeNode.prototype, "firstChild", {
                    get: function () { return this.nextChild(0, 1, -100000000 /* None */); },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(TreeNode.prototype, "lastChild", {
                    get: function () { return this.nextChild(this.node.children.length - 1, -1, -100000000 /* None */); },
                    enumerable: false,
                    configurable: true
                });
                TreeNode.prototype.childAfter = function (pos) { return this.nextChild(0, 1, pos); };
                TreeNode.prototype.childBefore = function (pos) { return this.nextChild(this.node.children.length - 1, -1, pos); };
                TreeNode.prototype.nextSignificantParent = function () {
                    var val = this;
                    while (val.type.isAnonymous && val._parent)
                        val = val._parent;
                    return val;
                };
                Object.defineProperty(TreeNode.prototype, "parent", {
                    get: function () {
                        return this._parent ? this._parent.nextSignificantParent() : null;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(TreeNode.prototype, "nextSibling", {
                    get: function () {
                        return this._parent ? this._parent.nextChild(this.index + 1, 1, -1) : null;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(TreeNode.prototype, "prevSibling", {
                    get: function () {
                        return this._parent ? this._parent.nextChild(this.index - 1, -1, -1) : null;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(TreeNode.prototype, "cursor", {
                    get: function () { return new TreeCursor(this); },
                    enumerable: false,
                    configurable: true
                });
                TreeNode.prototype.resolve = function (pos, side) {
                    if (side === void 0) { side = 0; }
                    return this.cursor.moveTo(pos, side).node;
                };
                TreeNode.prototype.getChild = function (type, before, after) {
                    if (before === void 0) { before = null; }
                    if (after === void 0) { after = null; }
                    var r = getChildren(this, type, before, after);
                    return r.length ? r[0] : null;
                };
                TreeNode.prototype.getChildren = function (type, before, after) {
                    if (before === void 0) { before = null; }
                    if (after === void 0) { after = null; }
                    return getChildren(this, type, before, after);
                };
                /// @internal
                TreeNode.prototype.toString = function () { return this.node.toString(); };
                return TreeNode;
            }());
            function getChildren(node, type, before, after) {
                var cur = node.cursor, result = [];
                if (!cur.firstChild())
                    return result;
                if (before != null)
                    while (!cur.type.is(before))
                        if (!cur.nextSibling())
                            return result;
                for (;;) {
                    if (after != null && cur.type.is(after))
                        return result;
                    if (cur.type.is(type))
                        result.push(cur.node);
                    if (!cur.nextSibling())
                        return after == null ? result : [];
                }
            }
            var BufferContext = /** @class */ (function () {
                function BufferContext(parent, buffer, index, start) {
                    this.parent = parent;
                    this.buffer = buffer;
                    this.index = index;
                    this.start = start;
                }
                return BufferContext;
            }());
            var BufferNode = /** @class */ (function () {
                function BufferNode(context, _parent, index) {
                    this.context = context;
                    this._parent = _parent;
                    this.index = index;
                    this.type = context.buffer.set.types[context.buffer.buffer[index]];
                }
                Object.defineProperty(BufferNode.prototype, "name", {
                    get: function () { return this.type.name; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(BufferNode.prototype, "from", {
                    get: function () { return this.context.start + this.context.buffer.buffer[this.index + 1]; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(BufferNode.prototype, "to", {
                    get: function () { return this.context.start + this.context.buffer.buffer[this.index + 2]; },
                    enumerable: false,
                    configurable: true
                });
                BufferNode.prototype.child = function (dir, after) {
                    var buffer = this.context.buffer;
                    var index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, after == -100000000 /* None */ ? -100000000 /* None */ : after - this.context.start);
                    return index < 0 ? null : new BufferNode(this.context, this, index);
                };
                Object.defineProperty(BufferNode.prototype, "firstChild", {
                    get: function () { return this.child(1, -100000000 /* None */); },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(BufferNode.prototype, "lastChild", {
                    get: function () { return this.child(-1, -100000000 /* None */); },
                    enumerable: false,
                    configurable: true
                });
                BufferNode.prototype.childAfter = function (pos) { return this.child(1, pos); };
                BufferNode.prototype.childBefore = function (pos) { return this.child(-1, pos); };
                Object.defineProperty(BufferNode.prototype, "parent", {
                    get: function () {
                        return this._parent || this.context.parent.nextSignificantParent();
                    },
                    enumerable: false,
                    configurable: true
                });
                BufferNode.prototype.externalSibling = function (dir) {
                    return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, -1);
                };
                Object.defineProperty(BufferNode.prototype, "nextSibling", {
                    get: function () {
                        var buffer = this.context.buffer;
                        var after = buffer.buffer[this.index + 3];
                        if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length))
                            return new BufferNode(this.context, this._parent, after);
                        return this.externalSibling(1);
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(BufferNode.prototype, "prevSibling", {
                    get: function () {
                        var buffer = this.context.buffer;
                        var parentStart = this._parent ? this._parent.index + 4 : 0;
                        if (this.index == parentStart)
                            return this.externalSibling(-1);
                        return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, -100000000 /* None */));
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(BufferNode.prototype, "cursor", {
                    get: function () { return new TreeCursor(this); },
                    enumerable: false,
                    configurable: true
                });
                BufferNode.prototype.resolve = function (pos, side) {
                    if (side === void 0) { side = 0; }
                    return this.cursor.moveTo(pos, side).node;
                };
                /// @internal
                BufferNode.prototype.toString = function () { return this.context.buffer.childString(this.index); };
                BufferNode.prototype.getChild = function (type, before, after) {
                    if (before === void 0) { before = null; }
                    if (after === void 0) { after = null; }
                    var r = getChildren(this, type, before, after);
                    return r.length ? r[0] : null;
                };
                BufferNode.prototype.getChildren = function (type, before, after) {
                    if (before === void 0) { before = null; }
                    if (after === void 0) { after = null; }
                    return getChildren(this, type, before, after);
                };
                return BufferNode;
            }());
            /// A tree cursor object focuses on a given node in a syntax tree, and
            /// allows you to move to adjacent nodes.
            var TreeCursor = /** @class */ (function () {
                /// @internal
                function TreeCursor(node, full) {
                    if (full === void 0) { full = false; }
                    this.full = full;
                    this.buffer = null;
                    this.stack = [];
                    this.index = 0;
                    this.bufferNode = null;
                    if (node instanceof TreeNode) {
                        this.yieldNode(node);
                    }
                    else {
                        this._tree = node.context.parent;
                        this.buffer = node.context;
                        for (var n = node._parent; n; n = n._parent)
                            this.stack.unshift(n.index);
                        this.bufferNode = node;
                        this.yieldBuf(node.index);
                    }
                }
                Object.defineProperty(TreeCursor.prototype, "name", {
                    /// Shorthand for `.type.name`.
                    get: function () { return this.type.name; },
                    enumerable: false,
                    configurable: true
                });
                TreeCursor.prototype.yieldNode = function (node) {
                    if (!node)
                        return false;
                    this._tree = node;
                    this.type = node.type;
                    this.from = node.from;
                    this.to = node.to;
                    return true;
                };
                TreeCursor.prototype.yieldBuf = function (index, type) {
                    this.index = index;
                    var _b = this.buffer, start = _b.start, buffer = _b.buffer;
                    this.type = type || buffer.set.types[buffer.buffer[index]];
                    this.from = start + buffer.buffer[index + 1];
                    this.to = start + buffer.buffer[index + 2];
                    return true;
                };
                TreeCursor.prototype.yield = function (node) {
                    if (!node)
                        return false;
                    if (node instanceof TreeNode) {
                        this.buffer = null;
                        return this.yieldNode(node);
                    }
                    this.buffer = node.context;
                    return this.yieldBuf(node.index, node.type);
                };
                /// @internal
                TreeCursor.prototype.toString = function () {
                    return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();
                };
                /// @internal
                TreeCursor.prototype.enter = function (dir, after) {
                    if (!this.buffer)
                        return this.yield(this._tree.nextChild(dir < 0 ? this._tree.node.children.length - 1 : 0, dir, after, this.full));
                    var buffer = this.buffer.buffer;
                    var index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, after == -100000000 /* None */ ? -100000000 /* None */ : after - this.buffer.start);
                    if (index < 0)
                        return false;
                    this.stack.push(this.index);
                    return this.yieldBuf(index);
                };
                /// Move the cursor to this node's first child. When this returns
                /// false, the node has no child, and the cursor has not been moved.
                TreeCursor.prototype.firstChild = function () { return this.enter(1, -100000000 /* None */); };
                /// Move the cursor to this node's last child.
                TreeCursor.prototype.lastChild = function () { return this.enter(-1, -100000000 /* None */); };
                /// Move the cursor to the first child that starts at or after `pos`.
                TreeCursor.prototype.childAfter = function (pos) { return this.enter(1, pos); };
                /// Move to the last child that ends at or before `pos`.
                TreeCursor.prototype.childBefore = function (pos) { return this.enter(-1, pos); };
                /// Move the node's parent node, if this isn't the top node.
                TreeCursor.prototype.parent = function () {
                    if (!this.buffer)
                        return this.yieldNode(this.full ? this._tree._parent : this._tree.parent);
                    if (this.stack.length)
                        return this.yieldBuf(this.stack.pop());
                    var parent = this.full ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
                    this.buffer = null;
                    return this.yieldNode(parent);
                };
                /// @internal
                TreeCursor.prototype.sibling = function (dir) {
                    if (!this.buffer)
                        return !this._tree._parent ? false
                            : this.yield(this._tree._parent.nextChild(this._tree.index + dir, dir, -100000000 /* None */, this.full));
                    var buffer = this.buffer.buffer, d = this.stack.length - 1;
                    if (dir < 0) {
                        var parentStart = d < 0 ? 0 : this.stack[d] + 4;
                        if (this.index != parentStart)
                            return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, -100000000 /* None */));
                    }
                    else {
                        var after_1 = buffer.buffer[this.index + 3];
                        if (after_1 < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3]))
                            return this.yieldBuf(after_1);
                    }
                    return d < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, -100000000 /* None */, this.full)) : false;
                };
                /// Move to this node's next sibling, if any.
                TreeCursor.prototype.nextSibling = function () { return this.sibling(1); };
                /// Move to this node's previous sibling, if any.
                TreeCursor.prototype.prevSibling = function () { return this.sibling(-1); };
                TreeCursor.prototype.atLastNode = function (dir) {
                    var _b, _c;
                    var index, parent, buffer = this.buffer;
                    if (buffer) {
                        if (dir > 0) {
                            if (this.index < buffer.buffer.buffer.length)
                                return false;
                        }
                        else {
                            for (var i = 0; i < this.index; i++)
                                if (buffer.buffer.buffer[i + 3] < this.index)
                                    return false;
                        }
                        (index = buffer.index, parent = buffer.parent);
                    }
                    else {
                        (_b = this._tree, index = _b.index, parent = _b._parent);
                    }
                    for (; parent; _c = parent, index = _c.index, parent = _c._parent) {
                        for (var i = index + dir, e = dir < 0 ? -1 : parent.node.children.length; i != e; i += dir) {
                            var child = parent.node.children[i];
                            if (this.full || !child.type.isAnonymous || child instanceof TreeBuffer || hasChild(child))
                                return false;
                        }
                    }
                    return true;
                };
                TreeCursor.prototype.move = function (dir) {
                    if (this.enter(dir, -100000000 /* None */))
                        return true;
                    for (;;) {
                        if (this.sibling(dir))
                            return true;
                        if (this.atLastNode(dir) || !this.parent())
                            return false;
                    }
                };
                /// Move to the next node in a
                /// [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order_(NLR))
                /// traversal, going from a node to its first child or, if the
                /// current node is empty, its next sibling or the next sibling of
                /// the first parent node that has one.
                TreeCursor.prototype.next = function () { return this.move(1); };
                /// Move to the next node in a last-to-first pre-order traveral. A
                /// node is followed by ist last child or, if it has none, its
                /// previous sibling or the previous sibling of the first parent
                /// node that has one.
                TreeCursor.prototype.prev = function () { return this.move(-1); };
                /// Move the cursor to the innermost node that covers `pos`. If
                /// `side` is -1, it will enter nodes that end at `pos`. If it is 1,
                /// it will enter nodes that start at `pos`.
                TreeCursor.prototype.moveTo = function (pos, side) {
                    if (side === void 0) { side = 0; }
                    // Move up to a node that actually holds the position, if possible
                    while (this.from == this.to ||
                        (side < 1 ? this.from >= pos : this.from > pos) ||
                        (side > -1 ? this.to <= pos : this.to < pos))
                        if (!this.parent())
                            break;
                    // Then scan down into child nodes as far as possible
                    for (;;) {
                        if (side < 0 ? !this.childBefore(pos) : !this.childAfter(pos))
                            break;
                        if (this.from == this.to ||
                            (side < 1 ? this.from >= pos : this.from > pos) ||
                            (side > -1 ? this.to <= pos : this.to < pos)) {
                            this.parent();
                            break;
                        }
                    }
                    return this;
                };
                Object.defineProperty(TreeCursor.prototype, "node", {
                    /// Get a [syntax node](#tree.SyntaxNode) at the cursor's current
                    /// position.
                    get: function () {
                        if (!this.buffer)
                            return this._tree;
                        var cache = this.bufferNode, result = null, depth = 0;
                        if (cache && cache.context == this.buffer) {
                            scan: for (var index = this.index, d = this.stack.length; d >= 0;) {
                                for (var c = cache; c; c = c._parent)
                                    if (c.index == index) {
                                        if (index == this.index)
                                            return c;
                                        result = c;
                                        depth = d + 1;
                                        break scan;
                                    }
                                index = this.stack[--d];
                            }
                        }
                        for (var i = depth; i < this.stack.length; i++)
                            result = new BufferNode(this.buffer, result, this.stack[i]);
                        return this.bufferNode = new BufferNode(this.buffer, result, this.index);
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(TreeCursor.prototype, "tree", {
                    /// Get the [tree](#tree.Tree) that represents the current node, if
                    /// any. Will return null when the node is in a [tree
                    /// buffer](#tree.TreeBuffer).
                    get: function () {
                        return this.buffer ? null : this._tree.node;
                    },
                    enumerable: false,
                    configurable: true
                });
                return TreeCursor;
            }());
            function hasChild(tree) {
                return tree.children.some(function (ch) { return !ch.type.isAnonymous || ch instanceof TreeBuffer || hasChild(ch); });
            }
            var FlatBufferCursor = /** @class */ (function () {
                function FlatBufferCursor(buffer, index) {
                    this.buffer = buffer;
                    this.index = index;
                }
                Object.defineProperty(FlatBufferCursor.prototype, "id", {
                    get: function () { return this.buffer[this.index - 4]; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(FlatBufferCursor.prototype, "start", {
                    get: function () { return this.buffer[this.index - 3]; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(FlatBufferCursor.prototype, "end", {
                    get: function () { return this.buffer[this.index - 2]; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(FlatBufferCursor.prototype, "size", {
                    get: function () { return this.buffer[this.index - 1]; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(FlatBufferCursor.prototype, "pos", {
                    get: function () { return this.index; },
                    enumerable: false,
                    configurable: true
                });
                FlatBufferCursor.prototype.next = function () { this.index -= 4; };
                FlatBufferCursor.prototype.fork = function () { return new FlatBufferCursor(this.buffer, this.index); };
                return FlatBufferCursor;
            }());
            var BalanceBranchFactor = 8;
            function buildTree(data) {
                var _a;
                var buffer = data.buffer, nodeSet = data.nodeSet, _b = data.topID, topID = _b === void 0 ? 0 : _b, _c = data.maxBufferLength, maxBufferLength = _c === void 0 ? DefaultBufferLength : _c, _d = data.reused, reused = _d === void 0 ? [] : _d, _e = data.minRepeatType, minRepeatType = _e === void 0 ? nodeSet.types.length : _e;
                var cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;
                var types = nodeSet.types;
                var contextHash = 0;
                function takeNode(parentStart, minPos, children, positions, inRepeat) {
                    var id = cursor.id, start = cursor.start, end = cursor.end, size = cursor.size;
                    var startPos = start - parentStart;
                    if (size < 0) {
                        if (size == -1) { // Reused node
                            children.push(reused[id]);
                            positions.push(startPos);
                        }
                        else { // Context change
                            contextHash = id;
                        }
                        cursor.next();
                        return;
                    }
                    var type = types[id], node, buffer;
                    if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {
                        // Small enough for a buffer, and no reused nodes inside
                        var data_1 = new Uint16Array(buffer.size - buffer.skip);
                        var endPos = cursor.pos - buffer.size, index = data_1.length;
                        while (cursor.pos > endPos)
                            index = copyToBuffer(buffer.start, data_1, index, inRepeat);
                        node = new TreeBuffer(data_1, end - buffer.start, nodeSet, inRepeat < 0 ? NodeType.none : types[inRepeat]);
                        startPos = buffer.start - parentStart;
                    }
                    else { // Make it a node
                        var endPos = cursor.pos - size;
                        cursor.next();
                        var localChildren = [], localPositions = [];
                        var localInRepeat = id >= minRepeatType ? id : -1;
                        while (cursor.pos > endPos) {
                            if (cursor.id == localInRepeat)
                                cursor.next();
                            else
                                takeNode(start, endPos, localChildren, localPositions, localInRepeat);
                        }
                        localChildren.reverse();
                        localPositions.reverse();
                        if (localInRepeat > -1 && localChildren.length > BalanceBranchFactor)
                            node = balanceRange(type, type, localChildren, localPositions, 0, localChildren.length, 0, maxBufferLength, end - start, contextHash);
                        else
                            node = withHash(new Tree(type, localChildren, localPositions, end - start), contextHash);
                    }
                    children.push(node);
                    positions.push(startPos);
                }
                function findBufferSize(maxSize, inRepeat) {
                    // Scan through the buffer to find previous siblings that fit
                    // together in a TreeBuffer, and don't contain any reused nodes
                    // (which can't be stored in a buffer).
                    // If `inRepeat` is > -1, ignore node boundaries of that type for
                    // nesting, but make sure the end falls either at the start
                    // (`maxSize`) or before such a node.
                    var fork = cursor.fork();
                    var size = 0, start = 0, skip = 0, minStart = fork.end - maxBufferLength;
                    var result = { size: 0, start: 0, skip: 0 };
                    scan: for (var minPos = fork.pos - maxSize; fork.pos > minPos;) {
                        // Pretend nested repeat nodes of the same type don't exist
                        if (fork.id == inRepeat) {
                            // Except that we store the current state as a valid return
                            // value.
                            result.size = size;
                            result.start = start;
                            result.skip = skip;
                            skip += 4;
                            size += 4;
                            fork.next();
                            continue;
                        }
                        var nodeSize = fork.size, startPos = fork.pos - nodeSize;
                        if (nodeSize < 0 || startPos < minPos || fork.start < minStart)
                            break;
                        var localSkipped = fork.id >= minRepeatType ? 4 : 0;
                        var nodeStart = fork.start;
                        fork.next();
                        while (fork.pos > startPos) {
                            if (fork.size < 0)
                                break scan;
                            if (fork.id >= minRepeatType)
                                localSkipped += 4;
                            fork.next();
                        }
                        start = nodeStart;
                        size += nodeSize;
                        skip += localSkipped;
                    }
                    if (inRepeat < 0 || size == maxSize) {
                        result.size = size;
                        result.start = start;
                        result.skip = skip;
                    }
                    return result.size > 4 ? result : undefined;
                }
                function copyToBuffer(bufferStart, buffer, index, inRepeat) {
                    var id = cursor.id, start = cursor.start, end = cursor.end, size = cursor.size;
                    cursor.next();
                    if (id == inRepeat)
                        return index;
                    var startIndex = index;
                    if (size > 4) {
                        var endPos = cursor.pos - (size - 4);
                        while (cursor.pos > endPos)
                            index = copyToBuffer(bufferStart, buffer, index, inRepeat);
                    }
                    if (id < minRepeatType) { // Don't copy repeat nodes into buffers
                        buffer[--index] = startIndex;
                        buffer[--index] = end - bufferStart;
                        buffer[--index] = start - bufferStart;
                        buffer[--index] = id;
                    }
                    return index;
                }
                var children = [], positions = [];
                while (cursor.pos > 0)
                    takeNode(data.start || 0, 0, children, positions, -1);
                var length = (_a = data.length) !== null && _a !== void 0 ? _a : (children.length ? positions[0] + children[0].length : 0);
                return new Tree(types[topID], children.reverse(), positions.reverse(), length);
            }
            function balanceRange(outerType, innerType, children, positions, from, to, start, maxBufferLength, length, contextHash) {
                var localChildren = [], localPositions = [];
                if (length <= maxBufferLength) {
                    for (var i = from; i < to; i++) {
                        localChildren.push(children[i]);
                        localPositions.push(positions[i] - start);
                    }
                }
                else {
                    var maxChild = Math.max(maxBufferLength, Math.ceil(length * 1.5 / BalanceBranchFactor));
                    for (var i = from; i < to;) {
                        var groupFrom = i, groupStart = positions[i];
                        i++;
                        for (; i < to; i++) {
                            var nextEnd = positions[i] + children[i].length;
                            if (nextEnd - groupStart > maxChild)
                                break;
                        }
                        if (i == groupFrom + 1) {
                            var only = children[groupFrom];
                            if (only instanceof Tree && only.type == innerType && only.length > maxChild << 1) { // Too big, collapse
                                for (var j = 0; j < only.children.length; j++) {
                                    localChildren.push(only.children[j]);
                                    localPositions.push(only.positions[j] + groupStart - start);
                                }
                                continue;
                            }
                            localChildren.push(only);
                        }
                        else if (i == groupFrom + 1) {
                            localChildren.push(children[groupFrom]);
                        }
                        else {
                            var inner = balanceRange(innerType, innerType, children, positions, groupFrom, i, groupStart, maxBufferLength, positions[i - 1] + children[i - 1].length - groupStart, contextHash);
                            if (innerType != NodeType.none && !containsType(inner.children, innerType))
                                inner = withHash(new Tree(NodeType.none, inner.children, inner.positions, inner.length), contextHash);
                            localChildren.push(inner);
                        }
                        localPositions.push(groupStart - start);
                    }
                }
                return withHash(new Tree(outerType, localChildren, localPositions, length), contextHash);
            }
            function containsType(nodes, type) {
                for (var _b = 0, nodes_1 = nodes; _b < nodes_1.length; _b++) {
                    var elt = nodes_1[_b];
                    if (elt.type == type)
                        return true;
                }
                return false;
            }
            /// Tree fragments are used during [incremental
            /// parsing](#lezer.ParseOptions.fragments) to track parts of old
            /// trees that can be reused in a new parse. An array of fragments is
            /// used to track regions of an old tree whose nodes might be reused
            /// in new parses. Use the static
            /// [`applyChanges`](#tree.TreeFragment^applyChanges) method to update
            /// fragments for document changes.
            var TreeFragment = /** @class */ (function () {
                function TreeFragment(
                /// The start of the unchanged range pointed to by this fragment.
                /// This refers to an offset in the _updated_ document (as opposed
                /// to the original tree).
                from, 
                /// The end of the unchanged range.
                to, 
                /// The tree that this fragment is based on.
                tree, 
                /// The offset between the fragment's tree and the document that
                /// this fragment can be used against. Add this when going from
                /// document to tree positions, subtract it to go from tree to
                /// document positions.
                offset, open) {
                    this.from = from;
                    this.to = to;
                    this.tree = tree;
                    this.offset = offset;
                    this.open = open;
                }
                Object.defineProperty(TreeFragment.prototype, "openStart", {
                    get: function () { return (this.open & 1 /* Start */) > 0; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(TreeFragment.prototype, "openEnd", {
                    get: function () { return (this.open & 2 /* End */) > 0; },
                    enumerable: false,
                    configurable: true
                });
                /// Apply a set of edits to an array of fragments, removing or
                /// splitting fragments as necessary to remove edited ranges, and
                /// adjusting offsets for fragments that moved.
                TreeFragment.applyChanges = function (fragments, changes, minGap) {
                    if (minGap === void 0) { minGap = 128; }
                    if (!changes.length)
                        return fragments;
                    var result = [];
                    var fI = 1, nextF = fragments.length ? fragments[0] : null;
                    var cI = 0, pos = 0, off = 0;
                    for (;;) {
                        var nextC = cI < changes.length ? changes[cI++] : null;
                        var nextPos = nextC ? nextC.fromA : 1e9;
                        if (nextPos - pos >= minGap)
                            while (nextF && nextF.from < nextPos) {
                                var cut = nextF;
                                if (pos >= cut.from || nextPos <= cut.to || off) {
                                    var fFrom = Math.max(cut.from, pos) - off, fTo = Math.min(cut.to, nextPos) - off;
                                    cut = fFrom >= fTo ? null :
                                        new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, (cI > 0 ? 1 /* Start */ : 0) | (nextC ? 2 /* End */ : 0));
                                }
                                if (cut)
                                    result.push(cut);
                                if (nextF.to > nextPos)
                                    break;
                                nextF = fI < fragments.length ? fragments[fI++] : null;
                            }
                        if (!nextC)
                            break;
                        pos = nextC.toA;
                        off = nextC.toA - nextC.toB;
                    }
                    return result;
                };
                /// Create a set of fragments from a freshly parsed tree, or update
                /// an existing set of fragments by replacing the ones that overlap
                /// with a tree with content from the new tree. When `partial` is
                /// true, the parse is treated as incomplete, and the token at its
                /// end is not included in [`safeTo`](#tree.TreeFragment.safeTo).
                TreeFragment.addTree = function (tree, fragments, partial) {
                    if (fragments === void 0) { fragments = []; }
                    if (partial === void 0) { partial = false; }
                    var result = [new TreeFragment(0, tree.length, tree, 0, partial ? 2 /* End */ : 0)];
                    for (var _b = 0, fragments_1 = fragments; _b < fragments_1.length; _b++) {
                        var f = fragments_1[_b];
                        if (f.to > tree.length)
                            result.push(f);
                    }
                    return result;
                };
                return TreeFragment;
            }());
            // Creates an `Input` that is backed by a single, flat string.
            function stringInput(input) { return new StringInput(input); }
            var StringInput = /** @class */ (function () {
                function StringInput(string, length) {
                    if (length === void 0) { length = string.length; }
                    this.string = string;
                    this.length = length;
                }
                StringInput.prototype.get = function (pos) {
                    return pos < 0 || pos >= this.length ? -1 : this.string.charCodeAt(pos);
                };
                StringInput.prototype.lineAfter = function (pos) {
                    if (pos < 0)
                        return "";
                    var end = this.string.indexOf("\n", pos);
                    return this.string.slice(pos, end < 0 ? this.length : Math.min(end, this.length));
                };
                StringInput.prototype.read = function (from, to) { return this.string.slice(from, Math.min(this.length, to)); };
                StringInput.prototype.clip = function (at) { return new StringInput(this.string, at); };
                return StringInput;
            }());
            exports.DefaultBufferLength = DefaultBufferLength;
            exports.NodeProp = NodeProp;
            exports.NodeSet = NodeSet;
            exports.NodeType = NodeType;
            exports.Tree = Tree;
            exports.TreeBuffer = TreeBuffer;
            exports.TreeCursor = TreeCursor;
            exports.TreeFragment = TreeFragment;
            exports.stringInput = stringInput;
            //# sourceMappingURL=tree.cjs.map
            /***/ 
        }),
        /***/ "./node_modules/lezer/dist/index.cjs": 
        /*!*******************************************!*\
          !*** ./node_modules/lezer/dist/index.cjs ***!
          \*******************************************/
        /***/ (function (__unused_webpack_module, exports, __webpack_require__) {
            Object.defineProperty(exports, "__esModule", ({ value: true }));
            var lezerTree = __webpack_require__(/*! lezer-tree */ "./node_modules/lezer-tree/dist/tree.cjs");
            /// A parse stack. These are used internally by the parser to track
            /// parsing progress. They also provide some properties and methods
            /// that external code such as a tokenizer can use to get information
            /// about the parse state.
            var Stack = /** @class */ (function () {
                /// @internal
                function Stack(
                /// A the parse that this stack is part of @internal
                p, 
                /// Holds state, pos, value stack pos (15 bits array index, 15 bits
                /// buffer index) triplets for all but the top state
                /// @internal
                stack, 
                /// The current parse state @internal
                state, 
                // The position at which the next reduce should take place. This
                // can be less than `this.pos` when skipped expressions have been
                // added to the stack (which should be moved outside of the next
                // reduction)
                /// @internal
                reducePos, 
                /// The input position up to which this stack has parsed.
                pos, 
                /// The dynamic score of the stack, including dynamic precedence
                /// and error-recovery penalties
                /// @internal
                score, 
                // The output buffer. Holds (type, start, end, size) quads
                // representing nodes created by the parser, where `size` is
                // amount of buffer array entries covered by this node.
                /// @internal
                buffer, 
                // The base offset of the buffer. When stacks are split, the split
                // instance shared the buffer history with its parent up to
                // `bufferBase`, which is the absolute offset (including the
                // offset of previous splits) into the buffer at which this stack
                // starts writing.
                /// @internal
                bufferBase, 
                /// @internal
                curContext, 
                // A parent stack from which this was split off, if any. This is
                // set up so that it always points to a stack that has some
                // additional buffer content, never to a stack with an equal
                // `bufferBase`.
                /// @internal
                parent) {
                    this.p = p;
                    this.stack = stack;
                    this.state = state;
                    this.reducePos = reducePos;
                    this.pos = pos;
                    this.score = score;
                    this.buffer = buffer;
                    this.bufferBase = bufferBase;
                    this.curContext = curContext;
                    this.parent = parent;
                }
                /// @internal
                Stack.prototype.toString = function () {
                    return "[" + this.stack.filter(function (_, i) { return i % 3 == 0; }).concat(this.state) + "]@" + this.pos + (this.score ? "!" + this.score : "");
                };
                // Start an empty stack
                /// @internal
                Stack.start = function (p, state, pos) {
                    if (pos === void 0) { pos = 0; }
                    var cx = p.parser.context;
                    return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, null);
                };
                Object.defineProperty(Stack.prototype, "context", {
                    /// The stack's current [context](#lezer.ContextTracker) value, if
                    /// any. Its type will depend on the context tracker's type
                    /// parameter, or it will be `null` if there is no context
                    /// tracker.
                    get: function () { return this.curContext ? this.curContext.context : null; },
                    enumerable: false,
                    configurable: true
                });
                // Push a state onto the stack, tracking its start position as well
                // as the buffer base at that point.
                /// @internal
                Stack.prototype.pushState = function (state, start) {
                    this.stack.push(this.state, start, this.bufferBase + this.buffer.length);
                    this.state = state;
                };
                // Apply a reduce action
                /// @internal
                Stack.prototype.reduce = function (action) {
                    var depth = action >> 19 /* ReduceDepthShift */, type = action & 65535 /* ValueMask */;
                    var parser = this.p.parser;
                    var dPrec = parser.dynamicPrecedence(type);
                    if (dPrec)
                        this.score += dPrec;
                    if (depth == 0) {
                        // Zero-depth reductions are a special case—they add stuff to
                        // the stack without popping anything off.
                        if (type < parser.minRepeatTerm)
                            this.storeNode(type, this.reducePos, this.reducePos, 4, true);
                        this.pushState(parser.getGoto(this.state, type, true), this.reducePos);
                        this.reduceContext(type);
                        return;
                    }
                    // Find the base index into `this.stack`, content after which will
                    // be dropped. Note that with `StayFlag` reductions we need to
                    // consume two extra frames (the dummy parent node for the skipped
                    // expression and the state that we'll be staying in, which should
                    // be moved to `this.state`).
                    var base = this.stack.length - ((depth - 1) * 3) - (action & 262144 /* StayFlag */ ? 6 : 0);
                    var start = this.stack[base - 2];
                    var bufferBase = this.stack[base - 1], count = this.bufferBase + this.buffer.length - bufferBase;
                    // Store normal terms or `R -> R R` repeat reductions
                    if (type < parser.minRepeatTerm || (action & 131072 /* RepeatFlag */)) {
                        var pos = parser.stateFlag(this.state, 1 /* Skipped */) ? this.pos : this.reducePos;
                        this.storeNode(type, start, pos, count + 4, true);
                    }
                    if (action & 262144 /* StayFlag */) {
                        this.state = this.stack[base];
                    }
                    else {
                        var baseStateID = this.stack[base - 3];
                        this.state = parser.getGoto(baseStateID, type, true);
                    }
                    while (this.stack.length > base)
                        this.stack.pop();
                    this.reduceContext(type);
                };
                // Shift a value into the buffer
                /// @internal
                Stack.prototype.storeNode = function (term, start, end, size, isReduce) {
                    if (size === void 0) { size = 4; }
                    if (isReduce === void 0) { isReduce = false; }
                    if (term == 0 /* Err */) { // Try to omit/merge adjacent error nodes
                        var cur = this, top_1 = this.buffer.length;
                        if (top_1 == 0 && cur.parent) {
                            top_1 = cur.bufferBase - cur.parent.bufferBase;
                            cur = cur.parent;
                        }
                        if (top_1 > 0 && cur.buffer[top_1 - 4] == 0 /* Err */ && cur.buffer[top_1 - 1] > -1) {
                            if (start == end)
                                return;
                            if (cur.buffer[top_1 - 2] >= start) {
                                cur.buffer[top_1 - 2] = end;
                                return;
                            }
                        }
                    }
                    if (!isReduce || this.pos == end) { // Simple case, just append
                        this.buffer.push(term, start, end, size);
                    }
                    else { // There may be skipped nodes that have to be moved forward
                        var index = this.buffer.length;
                        if (index > 0 && this.buffer[index - 4] != 0 /* Err */)
                            while (index > 0 && this.buffer[index - 2] > end) {
                                // Move this record forward
                                this.buffer[index] = this.buffer[index - 4];
                                this.buffer[index + 1] = this.buffer[index - 3];
                                this.buffer[index + 2] = this.buffer[index - 2];
                                this.buffer[index + 3] = this.buffer[index - 1];
                                index -= 4;
                                if (size > 4)
                                    size -= 4;
                            }
                        this.buffer[index] = term;
                        this.buffer[index + 1] = start;
                        this.buffer[index + 2] = end;
                        this.buffer[index + 3] = size;
                    }
                };
                // Apply a shift action
                /// @internal
                Stack.prototype.shift = function (action, next, nextEnd) {
                    if (action & 131072 /* GotoFlag */) {
                        this.pushState(action & 65535 /* ValueMask */, this.pos);
                    }
                    else if ((action & 262144 /* StayFlag */) == 0) { // Regular shift
                        var start = this.pos, nextState = action, parser = this.p.parser;
                        if (nextEnd > this.pos || next <= parser.maxNode) {
                            this.pos = nextEnd;
                            if (!parser.stateFlag(nextState, 1 /* Skipped */))
                                this.reducePos = nextEnd;
                        }
                        this.pushState(nextState, start);
                        if (next <= parser.maxNode)
                            this.buffer.push(next, start, nextEnd, 4);
                        this.shiftContext(next);
                    }
                    else { // Shift-and-stay, which means this is a skipped token
                        if (next <= this.p.parser.maxNode)
                            this.buffer.push(next, this.pos, nextEnd, 4);
                        this.pos = nextEnd;
                    }
                };
                // Apply an action
                /// @internal
                Stack.prototype.apply = function (action, next, nextEnd) {
                    if (action & 65536 /* ReduceFlag */)
                        this.reduce(action);
                    else
                        this.shift(action, next, nextEnd);
                };
                // Add a prebuilt node into the buffer. This may be a reused node or
                // the result of running a nested parser.
                /// @internal
                Stack.prototype.useNode = function (value, next) {
                    var index = this.p.reused.length - 1;
                    if (index < 0 || this.p.reused[index] != value) {
                        this.p.reused.push(value);
                        index++;
                    }
                    var start = this.pos;
                    this.reducePos = this.pos = start + value.length;
                    this.pushState(next, start);
                    this.buffer.push(index, start, this.reducePos, -1 /* size < 0 means this is a reused value */);
                    if (this.curContext)
                        this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this.p.input, this));
                };
                // Split the stack. Due to the buffer sharing and the fact
                // that `this.stack` tends to stay quite shallow, this isn't very
                // expensive.
                /// @internal
                Stack.prototype.split = function () {
                    var parent = this;
                    var off = parent.buffer.length;
                    // Because the top of the buffer (after this.pos) may be mutated
                    // to reorder reductions and skipped tokens, and shared buffers
                    // should be immutable, this copies any outstanding skipped tokens
                    // to the new buffer, and puts the base pointer before them.
                    while (off > 0 && parent.buffer[off - 2] > parent.reducePos)
                        off -= 4;
                    var buffer = parent.buffer.slice(off), base = parent.bufferBase + off;
                    // Make sure parent points to an actual parent with content, if there is such a parent.
                    while (parent && base == parent.bufferBase)
                        parent = parent.parent;
                    return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, parent);
                };
                // Try to recover from an error by 'deleting' (ignoring) one token.
                /// @internal
                Stack.prototype.recoverByDelete = function (next, nextEnd) {
                    var isNode = next <= this.p.parser.maxNode;
                    if (isNode)
                        this.storeNode(next, this.pos, nextEnd);
                    this.storeNode(0 /* Err */, this.pos, nextEnd, isNode ? 8 : 4);
                    this.pos = this.reducePos = nextEnd;
                    this.score -= 200 /* Token */;
                };
                /// Check if the given term would be able to be shifted (optionally
                /// after some reductions) on this stack. This can be useful for
                /// external tokenizers that want to make sure they only provide a
                /// given token when it applies.
                Stack.prototype.canShift = function (term) {
                    for (var sim = new SimulatedStack(this);;) {
                        var action = this.p.parser.stateSlot(sim.top, 4 /* DefaultReduce */) || this.p.parser.hasAction(sim.top, term);
                        if ((action & 65536 /* ReduceFlag */) == 0)
                            return true;
                        if (action == 0)
                            return false;
                        sim.reduce(action);
                    }
                };
                Object.defineProperty(Stack.prototype, "ruleStart", {
                    /// Find the start position of the rule that is currently being parsed.
                    get: function () {
                        for (var state = this.state, base = this.stack.length;;) {
                            var force = this.p.parser.stateSlot(state, 5 /* ForcedReduce */);
                            if (!(force & 65536 /* ReduceFlag */))
                                return 0;
                            base -= 3 * (force >> 19 /* ReduceDepthShift */);
                            if ((force & 65535 /* ValueMask */) < this.p.parser.minRepeatTerm)
                                return this.stack[base + 1];
                            state = this.stack[base];
                        }
                    },
                    enumerable: false,
                    configurable: true
                });
                /// Find the start position of an instance of any of the given term
                /// types, or return `null` when none of them are found.
                ///
                /// **Note:** this is only reliable when there is at least some
                /// state that unambiguously matches the given rule on the stack.
                /// I.e. if you have a grammar like this, where the difference
                /// between `a` and `b` is only apparent at the third token:
                ///
                ///     a { b | c }
                ///     b { "x" "y" "x" }
                ///     c { "x" "y" "z" }
                ///
                /// Then a parse state after `"x"` will not reliably tell you that
                /// `b` is on the stack. You _can_ pass `[b, c]` to reliably check
                /// for either of those two rules (assuming that `a` isn't part of
                /// some rule that includes other things starting with `"x"`).
                ///
                /// When `before` is given, this keeps scanning up the stack until
                /// it finds a match that starts before that position.
                ///
                /// Note that you have to be careful when using this in tokenizers,
                /// since it's relatively easy to introduce data dependencies that
                /// break incremental parsing by using this method.
                Stack.prototype.startOf = function (types, before) {
                    var state = this.state, frame = this.stack.length, parser = this.p.parser;
                    for (;;) {
                        var force = parser.stateSlot(state, 5 /* ForcedReduce */);
                        var depth = force >> 19 /* ReduceDepthShift */, term = force & 65535 /* ValueMask */;
                        if (types.indexOf(term) > -1) {
                            var base = frame - (3 * (force >> 19 /* ReduceDepthShift */)), pos = this.stack[base + 1];
                            if (before == null || before > pos)
                                return pos;
                        }
                        if (frame == 0)
                            return null;
                        if (depth == 0) {
                            frame -= 3;
                            state = this.stack[frame];
                        }
                        else {
                            frame -= 3 * (depth - 1);
                            state = parser.getGoto(this.stack[frame - 3], term, true);
                        }
                    }
                };
                // Apply up to Recover.MaxNext recovery actions that conceptually
                // inserts some missing token or rule.
                /// @internal
                Stack.prototype.recoverByInsert = function (next) {
                    if (this.stack.length >= 300 /* MaxInsertStackDepth */)
                        return [];
                    var nextStates = this.p.parser.nextStates(this.state);
                    if (nextStates.length > 4 /* MaxNext */ << 1 || this.stack.length >= 120 /* DampenInsertStackDepth */) {
                        var best = [];
                        for (var i = 0, s = void 0; i < nextStates.length; i += 2) {
                            if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next))
                                best.push(nextStates[i], s);
                        }
                        if (this.stack.length < 120 /* DampenInsertStackDepth */) {
                            var _loop_1 = function (i) {
                                var s = nextStates[i + 1];
                                if (!best.some(function (v, i) { return (i & 1) && v == s; }))
                                    best.push(nextStates[i], s);
                            };
                            for (var i = 0; best.length < 4 /* MaxNext */ << 1 && i < nextStates.length; i += 2) {
                                _loop_1(i);
                            }
                        }
                        nextStates = best;
                    }
                    var result = [];
                    for (var i = 0; i < nextStates.length && result.length < 4 /* MaxNext */; i += 2) {
                        var s = nextStates[i + 1];
                        if (s == this.state)
                            continue;
                        var stack = this.split();
                        stack.storeNode(0 /* Err */, stack.pos, stack.pos, 4, true);
                        stack.pushState(s, this.pos);
                        stack.shiftContext(nextStates[i]);
                        stack.score -= 200 /* Token */;
                        result.push(stack);
                    }
                    return result;
                };
                // Force a reduce, if possible. Return false if that can't
                // be done.
                /// @internal
                Stack.prototype.forceReduce = function () {
                    var reduce = this.p.parser.stateSlot(this.state, 5 /* ForcedReduce */);
                    if ((reduce & 65536 /* ReduceFlag */) == 0)
                        return false;
                    if (!this.p.parser.validAction(this.state, reduce)) {
                        this.storeNode(0 /* Err */, this.reducePos, this.reducePos, 4, true);
                        this.score -= 100 /* Reduce */;
                    }
                    this.reduce(reduce);
                    return true;
                };
                /// @internal
                Stack.prototype.forceAll = function () {
                    while (!this.p.parser.stateFlag(this.state, 2 /* Accepting */) && this.forceReduce()) { }
                    return this;
                };
                Object.defineProperty(Stack.prototype, "deadEnd", {
                    /// Check whether this state has no further actions (assumed to be a direct descendant of the
                    /// top state, since any other states must be able to continue
                    /// somehow). @internal
                    get: function () {
                        if (this.stack.length != 3)
                            return false;
                        var parser = this.p.parser;
                        return parser.data[parser.stateSlot(this.state, 1 /* Actions */)] == 65535 /* End */ &&
                            !parser.stateSlot(this.state, 4 /* DefaultReduce */);
                    },
                    enumerable: false,
                    configurable: true
                });
                /// Restart the stack (put it back in its start state). Only safe
                /// when this.stack.length == 3 (state is directly below the top
                /// state). @internal
                Stack.prototype.restart = function () {
                    this.state = this.stack[0];
                    this.stack.length = 0;
                };
                /// @internal
                Stack.prototype.sameState = function (other) {
                    if (this.state != other.state || this.stack.length != other.stack.length)
                        return false;
                    for (var i = 0; i < this.stack.length; i += 3)
                        if (this.stack[i] != other.stack[i])
                            return false;
                    return true;
                };
                Object.defineProperty(Stack.prototype, "parser", {
                    /// Get the parser used by this stack.
                    get: function () { return this.p.parser; },
                    enumerable: false,
                    configurable: true
                });
                /// Test whether a given dialect (by numeric ID, as exported from
                /// the terms file) is enabled.
                Stack.prototype.dialectEnabled = function (dialectID) { return this.p.parser.dialect.flags[dialectID]; };
                Stack.prototype.shiftContext = function (term) {
                    if (this.curContext)
                        this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this.p.input, this));
                };
                Stack.prototype.reduceContext = function (term) {
                    if (this.curContext)
                        this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this.p.input, this));
                };
                /// @internal
                Stack.prototype.emitContext = function () {
                    var cx = this.curContext;
                    if (!cx.tracker.strict)
                        return;
                    var last = this.buffer.length - 1;
                    if (last < 0 || this.buffer[last] != -2)
                        this.buffer.push(cx.hash, this.reducePos, this.reducePos, -2);
                };
                Stack.prototype.updateContext = function (context) {
                    if (context != this.curContext.context) {
                        var newCx = new StackContext(this.curContext.tracker, context);
                        if (newCx.hash != this.curContext.hash)
                            this.emitContext();
                        this.curContext = newCx;
                    }
                };
                return Stack;
            }());
            var StackContext = /** @class */ (function () {
                function StackContext(tracker, context) {
                    this.tracker = tracker;
                    this.context = context;
                    this.hash = tracker.hash(context);
                }
                return StackContext;
            }());
            var Recover;
            (function (Recover) {
                Recover[Recover["Token"] = 200] = "Token";
                Recover[Recover["Reduce"] = 100] = "Reduce";
                Recover[Recover["MaxNext"] = 4] = "MaxNext";
                Recover[Recover["MaxInsertStackDepth"] = 300] = "MaxInsertStackDepth";
                Recover[Recover["DampenInsertStackDepth"] = 120] = "DampenInsertStackDepth";
            })(Recover || (Recover = {}));
            // Used to cheaply run some reductions to scan ahead without mutating
            // an entire stack
            var SimulatedStack = /** @class */ (function () {
                function SimulatedStack(stack) {
                    this.stack = stack;
                    this.top = stack.state;
                    this.rest = stack.stack;
                    this.offset = this.rest.length;
                }
                SimulatedStack.prototype.reduce = function (action) {
                    var term = action & 65535 /* ValueMask */, depth = action >> 19 /* ReduceDepthShift */;
                    if (depth == 0) {
                        if (this.rest == this.stack.stack)
                            this.rest = this.rest.slice();
                        this.rest.push(this.top, 0, 0);
                        this.offset += 3;
                    }
                    else {
                        this.offset -= (depth - 1) * 3;
                    }
                    var goto = this.stack.p.parser.getGoto(this.rest[this.offset - 3], term, true);
                    this.top = goto;
                };
                return SimulatedStack;
            }());
            // This is given to `Tree.build` to build a buffer, and encapsulates
            // the parent-stack-walking necessary to read the nodes.
            var StackBufferCursor = /** @class */ (function () {
                function StackBufferCursor(stack, pos, index) {
                    this.stack = stack;
                    this.pos = pos;
                    this.index = index;
                    this.buffer = stack.buffer;
                    if (this.index == 0)
                        this.maybeNext();
                }
                StackBufferCursor.create = function (stack) {
                    return new StackBufferCursor(stack, stack.bufferBase + stack.buffer.length, stack.buffer.length);
                };
                StackBufferCursor.prototype.maybeNext = function () {
                    var next = this.stack.parent;
                    if (next != null) {
                        this.index = this.stack.bufferBase - next.bufferBase;
                        this.stack = next;
                        this.buffer = next.buffer;
                    }
                };
                Object.defineProperty(StackBufferCursor.prototype, "id", {
                    get: function () { return this.buffer[this.index - 4]; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(StackBufferCursor.prototype, "start", {
                    get: function () { return this.buffer[this.index - 3]; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(StackBufferCursor.prototype, "end", {
                    get: function () { return this.buffer[this.index - 2]; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(StackBufferCursor.prototype, "size", {
                    get: function () { return this.buffer[this.index - 1]; },
                    enumerable: false,
                    configurable: true
                });
                StackBufferCursor.prototype.next = function () {
                    this.index -= 4;
                    this.pos -= 4;
                    if (this.index == 0)
                        this.maybeNext();
                };
                StackBufferCursor.prototype.fork = function () {
                    return new StackBufferCursor(this.stack, this.pos, this.index);
                };
                return StackBufferCursor;
            }());
            /// Tokenizers write the tokens they read into instances of this class.
            var Token = /** @class */ (function () {
                function Token() {
                    /// The start of the token. This is set by the parser, and should not
                    /// be mutated by the tokenizer.
                    this.start = -1;
                    /// This starts at -1, and should be updated to a term id when a
                    /// matching token is found.
                    this.value = -1;
                    /// When setting `.value`, you should also set `.end` to the end
                    /// position of the token. (You'll usually want to use the `accept`
                    /// method.)
                    this.end = -1;
                }
                /// Accept a token, setting `value` and `end` to the given values.
                Token.prototype.accept = function (value, end) {
                    this.value = value;
                    this.end = end;
                };
                return Token;
            }());
            /// @internal
            var TokenGroup = /** @class */ (function () {
                function TokenGroup(data, id) {
                    this.data = data;
                    this.id = id;
                }
                TokenGroup.prototype.token = function (input, token, stack) { readToken(this.data, input, token, stack, this.id); };
                return TokenGroup;
            }());
            TokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;
            /// Exports that are used for `@external tokens` in the grammar should
            /// export an instance of this class.
            var ExternalTokenizer = /** @class */ (function () {
                /// Create a tokenizer. The first argument is the function that,
                /// given an input stream and a token object,
                /// [fills](#lezer.Token.accept) the token object if it recognizes a
                /// token. `token.start` should be used as the start position to
                /// scan from.
                function ExternalTokenizer(
                /// @internal
                token, options) {
                    if (options === void 0) { options = {}; }
                    this.token = token;
                    this.contextual = !!options.contextual;
                    this.fallback = !!options.fallback;
                    this.extend = !!options.extend;
                }
                return ExternalTokenizer;
            }());
            // Tokenizer data is stored a big uint16 array containing, for each
            // state:
            //
            //  - A group bitmask, indicating what token groups are reachable from
            //    this state, so that paths that can only lead to tokens not in
            //    any of the current groups can be cut off early.
            //
            //  - The position of the end of the state's sequence of accepting
            //    tokens
            //
            //  - The number of outgoing edges for the state
            //
            //  - The accepting tokens, as (token id, group mask) pairs
            //
            //  - The outgoing edges, as (start character, end character, state
            //    index) triples, with end character being exclusive
            //
            // This function interprets that data, running through a stream as
            // long as new states with the a matching group mask can be reached,
            // and updating `token` when it matches a token.
            function readToken(data, input, token, stack, group) {
                var state = 0, groupMask = 1 << group, dialect = stack.p.parser.dialect;
                scan: for (var pos = token.start;;) {
                    if ((groupMask & data[state]) == 0)
                        break;
                    var accEnd = data[state + 1];
                    // Check whether this state can lead to a token in the current group
                    // Accept tokens in this state, possibly overwriting
                    // lower-precedence / shorter tokens
                    for (var i = state + 3; i < accEnd; i += 2)
                        if ((data[i + 1] & groupMask) > 0) {
                            var term = data[i];
                            if (dialect.allows(term) &&
                                (token.value == -1 || token.value == term || stack.p.parser.overrides(term, token.value))) {
                                token.accept(term, pos);
                                break;
                            }
                        }
                    var next = input.get(pos++);
                    // Do a binary search on the state's edges
                    for (var low = 0, high = data[state + 2]; low < high;) {
                        var mid = (low + high) >> 1;
                        var index = accEnd + mid + (mid << 1);
                        var from = data[index], to = data[index + 1];
                        if (next < from)
                            high = mid;
                        else if (next >= to)
                            low = mid + 1;
                        else {
                            state = data[index + 2];
                            continue scan;
                        }
                    }
                    break;
                }
            }
            // See lezer-generator/src/encode.ts for comments about the encoding
            // used here
            function decodeArray(input, Type) {
                if (Type === void 0) { Type = Uint16Array; }
                if (typeof input != "string")
                    return input;
                var array = null;
                for (var pos = 0, out = 0; pos < input.length;) {
                    var value = 0;
                    for (;;) {
                        var next = input.charCodeAt(pos++), stop_1 = false;
                        if (next == 126 /* BigValCode */) {
                            value = 65535 /* BigVal */;
                            break;
                        }
                        if (next >= 92 /* Gap2 */)
                            next--;
                        if (next >= 34 /* Gap1 */)
                            next--;
                        var digit = next - 32 /* Start */;
                        if (digit >= 46 /* Base */) {
                            digit -= 46 /* Base */;
                            stop_1 = true;
                        }
                        value += digit;
                        if (stop_1)
                            break;
                        value *= 46 /* Base */;
                    }
                    if (array)
                        array[out++] = value;
                    else
                        array = new Type(value);
                }
                return array;
            }
            // FIXME find some way to reduce recovery work done when the input
            // doesn't match the grammar at all.
            // Environment variable used to control console output
            var verbose = typeof process != "undefined" && /\bparse\b/.test(process.env.LOG);
            var stackIDs = null;
            function cutAt(tree, pos, side) {
                var cursor = tree.cursor(pos);
                for (;;) {
                    if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos)))
                        for (;;) {
                            if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError)
                                return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 5)) : Math.min(tree.length, Math.max(cursor.from + 1, pos + 5));
                            if (side < 0 ? cursor.prevSibling() : cursor.nextSibling())
                                break;
                            if (!cursor.parent())
                                return side < 0 ? 0 : tree.length;
                        }
                }
            }
            var FragmentCursor = /** @class */ (function () {
                function FragmentCursor(fragments) {
                    this.fragments = fragments;
                    this.i = 0;
                    this.fragment = null;
                    this.safeFrom = -1;
                    this.safeTo = -1;
                    this.trees = [];
                    this.start = [];
                    this.index = [];
                    this.nextFragment();
                }
                FragmentCursor.prototype.nextFragment = function () {
                    var fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];
                    if (fr) {
                        this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;
                        this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;
                        while (this.trees.length) {
                            this.trees.pop();
                            this.start.pop();
                            this.index.pop();
                        }
                        this.trees.push(fr.tree);
                        this.start.push(-fr.offset);
                        this.index.push(0);
                        this.nextStart = this.safeFrom;
                    }
                    else {
                        this.nextStart = 1e9;
                    }
                };
                // `pos` must be >= any previously given `pos` for this cursor
                FragmentCursor.prototype.nodeAt = function (pos) {
                    if (pos < this.nextStart)
                        return null;
                    while (this.fragment && this.safeTo <= pos)
                        this.nextFragment();
                    if (!this.fragment)
                        return null;
                    for (;;) {
                        var last = this.trees.length - 1;
                        if (last < 0) { // End of tree
                            this.nextFragment();
                            return null;
                        }
                        var top_2 = this.trees[last], index = this.index[last];
                        if (index == top_2.children.length) {
                            this.trees.pop();
                            this.start.pop();
                            this.index.pop();
                            continue;
                        }
                        var next = top_2.children[index];
                        var start = this.start[last] + top_2.positions[index];
                        if (start > pos) {
                            this.nextStart = start;
                            return null;
                        }
                        else if (start == pos && start + next.length <= this.safeTo) {
                            return start == pos && start >= this.safeFrom ? next : null;
                        }
                        if (next instanceof lezerTree.TreeBuffer) {
                            this.index[last]++;
                            this.nextStart = start + next.length;
                        }
                        else {
                            this.index[last]++;
                            if (start + next.length >= pos) { // Enter this node
                                this.trees.push(next);
                                this.start.push(start);
                                this.index.push(0);
                            }
                        }
                    }
                };
                return FragmentCursor;
            }());
            var CachedToken = /** @class */ (function (_super) {
                __extends(CachedToken, _super);
                function CachedToken() {
                    var _this = _super.apply(this, arguments) || this;
                    _this.extended = -1;
                    _this.mask = 0;
                    _this.context = 0;
                    return _this;
                }
                CachedToken.prototype.clear = function (start) {
                    this.start = start;
                    this.value = this.extended = -1;
                };
                return CachedToken;
            }(Token));
            var dummyToken = new Token;
            var TokenCache = /** @class */ (function () {
                function TokenCache(parser) {
                    this.tokens = [];
                    this.mainToken = dummyToken;
                    this.actions = [];
                    this.tokens = parser.tokenizers.map(function (_) { return new CachedToken; });
                }
                TokenCache.prototype.getActions = function (stack, input) {
                    var actionIndex = 0;
                    var main = null;
                    var parser = stack.p.parser, tokenizers = parser.tokenizers;
                    var mask = parser.stateSlot(stack.state, 3 /* TokenizerMask */);
                    var context = stack.curContext ? stack.curContext.hash : 0;
                    for (var i = 0; i < tokenizers.length; i++) {
                        if (((1 << i) & mask) == 0)
                            continue;
                        var tokenizer = tokenizers[i], token = this.tokens[i];
                        if (main && !tokenizer.fallback)
                            continue;
                        if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {
                            this.updateCachedToken(token, tokenizer, stack, input);
                            token.mask = mask;
                            token.context = context;
                        }
                        if (token.value != 0 /* Err */) {
                            var startIndex = actionIndex;
                            if (token.extended > -1)
                                actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);
                            actionIndex = this.addActions(stack, token.value, token.end, actionIndex);
                            if (!tokenizer.extend) {
                                main = token;
                                if (actionIndex > startIndex)
                                    break;
                            }
                        }
                    }
                    while (this.actions.length > actionIndex)
                        this.actions.pop();
                    if (!main) {
                        main = dummyToken;
                        main.start = stack.pos;
                        if (stack.pos == input.length)
                            main.accept(stack.p.parser.eofTerm, stack.pos);
                        else
                            main.accept(0 /* Err */, stack.pos + 1);
                    }
                    this.mainToken = main;
                    return this.actions;
                };
                TokenCache.prototype.updateCachedToken = function (token, tokenizer, stack, input) {
                    token.clear(stack.pos);
                    tokenizer.token(input, token, stack);
                    if (token.value > -1) {
                        var parser = stack.p.parser;
                        for (var i = 0; i < parser.specialized.length; i++)
                            if (parser.specialized[i] == token.value) {
                                var result = parser.specializers[i](input.read(token.start, token.end), stack);
                                if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {
                                    if ((result & 1) == 0 /* Specialize */)
                                        token.value = result >> 1;
                                    else
                                        token.extended = result >> 1;
                                    break;
                                }
                            }
                    }
                    else if (stack.pos == input.length) {
                        token.accept(stack.p.parser.eofTerm, stack.pos);
                    }
                    else {
                        token.accept(0 /* Err */, stack.pos + 1);
                    }
                };
                TokenCache.prototype.putAction = function (action, token, end, index) {
                    // Don't add duplicate actions
                    for (var i = 0; i < index; i += 3)
                        if (this.actions[i] == action)
                            return index;
                    this.actions[index++] = action;
                    this.actions[index++] = token;
                    this.actions[index++] = end;
                    return index;
                };
                TokenCache.prototype.addActions = function (stack, token, end, index) {
                    var state = stack.state, parser = stack.p.parser, data = parser.data;
                    for (var set = 0; set < 2; set++) {
                        for (var i = parser.stateSlot(state, set ? 2 /* Skip */ : 1 /* Actions */);; i += 3) {
                            if (data[i] == 65535 /* End */) {
                                if (data[i + 1] == 1 /* Next */) {
                                    i = pair(data, i + 2);
                                }
                                else {
                                    if (index == 0 && data[i + 1] == 2 /* Other */)
                                        index = this.putAction(pair(data, i + 1), token, end, index);
                                    break;
                                }
                            }
                            if (data[i] == token)
                                index = this.putAction(pair(data, i + 1), token, end, index);
                        }
                    }
                    return index;
                };
                return TokenCache;
            }());
            var Rec;
            (function (Rec) {
                Rec[Rec["Distance"] = 5] = "Distance";
                Rec[Rec["MaxRemainingPerStep"] = 3] = "MaxRemainingPerStep";
                Rec[Rec["MinBufferLengthPrune"] = 200] = "MinBufferLengthPrune";
                Rec[Rec["ForceReduceLimit"] = 10] = "ForceReduceLimit";
            })(Rec || (Rec = {}));
            /// A parse context can be used for step-by-step parsing. After
            /// creating it, you repeatedly call `.advance()` until it returns a
            /// tree to indicate it has reached the end of the parse.
            var Parse = /** @class */ (function () {
                function Parse(parser, input, startPos, context) {
                    this.parser = parser;
                    this.input = input;
                    this.startPos = startPos;
                    this.context = context;
                    // The position to which the parse has advanced.
                    this.pos = 0;
                    this.recovering = 0;
                    this.nextStackID = 0x2654;
                    this.nested = null;
                    this.nestEnd = 0;
                    this.nestWrap = null;
                    this.reused = [];
                    this.tokens = new TokenCache(parser);
                    this.topTerm = parser.top[1];
                    this.stacks = [Stack.start(this, parser.top[0], this.startPos)];
                    var fragments = context === null || context === void 0 ? void 0 : context.fragments;
                    this.fragments = fragments && fragments.length ? new FragmentCursor(fragments) : null;
                }
                // Move the parser forward. This will process all parse stacks at
                // `this.pos` and try to advance them to a further position. If no
                // stack for such a position is found, it'll start error-recovery.
                //
                // When the parse is finished, this will return a syntax tree. When
                // not, it returns `null`.
                Parse.prototype.advance = function () {
                    if (this.nested) {
                        var result = this.nested.advance();
                        this.pos = this.nested.pos;
                        if (result) {
                            this.finishNested(this.stacks[0], result);
                            this.nested = null;
                        }
                        return null;
                    }
                    var stacks = this.stacks, pos = this.pos;
                    // This will hold stacks beyond `pos`.
                    var newStacks = this.stacks = [];
                    var stopped, stoppedTokens;
                    var maybeNest;
                    // Keep advancing any stacks at `pos` until they either move
                    // forward or can't be advanced. Gather stacks that can't be
                    // advanced further in `stopped`.
                    for (var i = 0; i < stacks.length; i++) {
                        var stack = stacks[i], nest = void 0;
                        for (;;) {
                            if (stack.pos > pos) {
                                newStacks.push(stack);
                            }
                            else if (nest = this.checkNest(stack)) {
                                if (!maybeNest || maybeNest.stack.score < stack.score)
                                    maybeNest = nest;
                            }
                            else if (this.advanceStack(stack, newStacks, stacks)) {
                                continue;
                            }
                            else {
                                if (!stopped) {
                                    stopped = [];
                                    stoppedTokens = [];
                                }
                                stopped.push(stack);
                                var tok = this.tokens.mainToken;
                                stoppedTokens.push(tok.value, tok.end);
                            }
                            break;
                        }
                    }
                    if (maybeNest) {
                        this.startNested(maybeNest);
                        return null;
                    }
                    if (!newStacks.length) {
                        var finished = stopped && findFinished(stopped);
                        if (finished)
                            return this.stackToTree(finished);
                        if (this.parser.strict) {
                            if (verbose && stopped)
                                console.log("Stuck with token " + this.parser.getName(this.tokens.mainToken.value));
                            throw new SyntaxError("No parse at " + pos);
                        }
                        if (!this.recovering)
                            this.recovering = 5 /* Distance */;
                    }
                    if (this.recovering && stopped) {
                        var finished = this.runRecovery(stopped, stoppedTokens, newStacks);
                        if (finished)
                            return this.stackToTree(finished.forceAll());
                    }
                    if (this.recovering) {
                        var maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3 /* MaxRemainingPerStep */;
                        if (newStacks.length > maxRemaining) {
                            newStacks.sort(function (a, b) { return b.score - a.score; });
                            while (newStacks.length > maxRemaining)
                                newStacks.pop();
                        }
                        if (newStacks.some(function (s) { return s.reducePos > pos; }))
                            this.recovering--;
                    }
                    else if (newStacks.length > 1) {
                        // Prune stacks that are in the same state, or that have been
                        // running without splitting for a while, to avoid getting stuck
                        // with multiple successful stacks running endlessly on.
                        outer: for (var i = 0; i < newStacks.length - 1; i++) {
                            var stack = newStacks[i];
                            for (var j = i + 1; j < newStacks.length; j++) {
                                var other = newStacks[j];
                                if (stack.sameState(other) ||
                                    stack.buffer.length > 200 /* MinBufferLengthPrune */ && other.buffer.length > 200 /* MinBufferLengthPrune */) {
                                    if (((stack.score - other.score) || (stack.buffer.length - other.buffer.length)) > 0) {
                                        newStacks.splice(j--, 1);
                                    }
                                    else {
                                        newStacks.splice(i--, 1);
                                        continue outer;
                                    }
                                }
                            }
                        }
                    }
                    this.pos = newStacks[0].pos;
                    for (var i = 1; i < newStacks.length; i++)
                        if (newStacks[i].pos < this.pos)
                            this.pos = newStacks[i].pos;
                    return null;
                };
                // Returns an updated version of the given stack, or null if the
                // stack can't advance normally. When `split` and `stacks` are
                // given, stacks split off by ambiguous operations will be pushed to
                // `split`, or added to `stacks` if they move `pos` forward.
                Parse.prototype.advanceStack = function (stack, stacks, split) {
                    var start = stack.pos, _b = this, input = _b.input, parser = _b.parser;
                    var base = verbose ? this.stackID(stack) + " -> " : "";
                    if (this.fragments) {
                        var strictCx = stack.curContext && stack.curContext.tracker.strict, cxHash = strictCx ? stack.curContext.hash : 0;
                        for (var cached = this.fragments.nodeAt(start); cached;) {
                            var match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;
                            if (match > -1 && cached.length && (!strictCx || (cached.contextHash || 0) == cxHash)) {
                                stack.useNode(cached, match);
                                if (verbose)
                                    console.log(base + this.stackID(stack) + (" (via reuse of " + parser.getName(cached.type.id) + ")"));
                                return true;
                            }
                            if (!(cached instanceof lezerTree.Tree) || cached.children.length == 0 || cached.positions[0] > 0)
                                break;
                            var inner = cached.children[0];
                            if (inner instanceof lezerTree.Tree)
                                cached = inner;
                            else
                                break;
                        }
                    }
                    var defaultReduce = parser.stateSlot(stack.state, 4 /* DefaultReduce */);
                    if (defaultReduce > 0) {
                        stack.reduce(defaultReduce);
                        if (verbose)
                            console.log(base + this.stackID(stack) + (" (via always-reduce " + parser.getName(defaultReduce & 65535 /* ValueMask */) + ")"));
                        return true;
                    }
                    var actions = this.tokens.getActions(stack, input);
                    for (var i = 0; i < actions.length;) {
                        var action = actions[i++], term = actions[i++], end = actions[i++];
                        var last = i == actions.length || !split;
                        var localStack = last ? stack : stack.split();
                        localStack.apply(action, term, end);
                        if (verbose)
                            console.log(base + this.stackID(localStack) + (" (via " + ((action & 65536 /* ReduceFlag */) == 0 ? "shift"
                                : "reduce of " + parser.getName(action & 65535 /* ValueMask */)) + " for " + parser.getName(term) + " @ " + start + (localStack == stack ? "" : ", split") + ")"));
                        if (last)
                            return true;
                        else if (localStack.pos > start)
                            stacks.push(localStack);
                        else
                            split.push(localStack);
                    }
                    return false;
                };
                // Advance a given stack forward as far as it will go. Returns the
                // (possibly updated) stack if it got stuck, or null if it moved
                // forward and was given to `pushStackDedup`.
                Parse.prototype.advanceFully = function (stack, newStacks) {
                    var pos = stack.pos;
                    for (;;) {
                        var nest = this.checkNest(stack);
                        if (nest)
                            return nest;
                        if (!this.advanceStack(stack, null, null))
                            return false;
                        if (stack.pos > pos) {
                            pushStackDedup(stack, newStacks);
                            return true;
                        }
                    }
                };
                Parse.prototype.runRecovery = function (stacks, tokens, newStacks) {
                    var finished = null, restarted = false;
                    var maybeNest;
                    for (var i = 0; i < stacks.length; i++) {
                        var stack = stacks[i], token = tokens[i << 1], tokenEnd = tokens[(i << 1) + 1];
                        var base = verbose ? this.stackID(stack) + " -> " : "";
                        if (stack.deadEnd) {
                            if (restarted)
                                continue;
                            restarted = true;
                            stack.restart();
                            if (verbose)
                                console.log(base + this.stackID(stack) + " (restarted)");
                            var done = this.advanceFully(stack, newStacks);
                            if (done) {
                                if (done !== true)
                                    maybeNest = done;
                                continue;
                            }
                        }
                        var force = stack.split(), forceBase = base;
                        for (var j = 0; force.forceReduce() && j < 10 /* ForceReduceLimit */; j++) {
                            if (verbose)
                                console.log(forceBase + this.stackID(force) + " (via force-reduce)");
                            var done = this.advanceFully(force, newStacks);
                            if (done) {
                                if (done !== true)
                                    maybeNest = done;
                                break;
                            }
                            if (verbose)
                                forceBase = this.stackID(force) + " -> ";
                        }
                        for (var _b = 0, _c = stack.recoverByInsert(token); _b < _c.length; _b++) {
                            var insert = _c[_b];
                            if (verbose)
                                console.log(base + this.stackID(insert) + " (via recover-insert)");
                            this.advanceFully(insert, newStacks);
                        }
                        if (this.input.length > stack.pos) {
                            if (tokenEnd == stack.pos) {
                                tokenEnd++;
                                token = 0 /* Err */;
                            }
                            stack.recoverByDelete(token, tokenEnd);
                            if (verbose)
                                console.log(base + this.stackID(stack) + (" (via recover-delete " + this.parser.getName(token) + ")"));
                            pushStackDedup(stack, newStacks);
                        }
                        else if (!finished || finished.score < stack.score) {
                            finished = stack;
                        }
                    }
                    if (finished)
                        return finished;
                    if (maybeNest)
                        for (var _d = 0, _e = this.stacks; _d < _e.length; _d++) {
                            var s = _e[_d];
                            if (s.score > maybeNest.stack.score) {
                                maybeNest = undefined;
                                break;
                            }
                        }
                    if (maybeNest)
                        this.startNested(maybeNest);
                    return null;
                };
                Parse.prototype.forceFinish = function () {
                    var stack = this.stacks[0].split();
                    if (this.nested)
                        this.finishNested(stack, this.nested.forceFinish());
                    return this.stackToTree(stack.forceAll());
                };
                // Convert the stack's buffer to a syntax tree.
                Parse.prototype.stackToTree = function (stack, pos) {
                    if (pos === void 0) { pos = stack.pos; }
                    if (this.parser.context)
                        stack.emitContext();
                    return lezerTree.Tree.build({ buffer: StackBufferCursor.create(stack),
                        nodeSet: this.parser.nodeSet,
                        topID: this.topTerm,
                        maxBufferLength: this.parser.bufferLength,
                        reused: this.reused,
                        start: this.startPos,
                        length: pos - this.startPos,
                        minRepeatType: this.parser.minRepeatTerm });
                };
                Parse.prototype.checkNest = function (stack) {
                    var info = this.parser.findNested(stack.state);
                    if (!info)
                        return null;
                    var spec = info.value;
                    if (typeof spec == "function")
                        spec = spec(this.input, stack);
                    return spec ? { stack: stack, info: info, spec: spec } : null;
                };
                Parse.prototype.startNested = function (nest) {
                    var stack = nest.stack, info = nest.info, spec = nest.spec;
                    this.stacks = [stack];
                    this.nestEnd = this.scanForNestEnd(stack, info.end, spec.filterEnd);
                    this.nestWrap = typeof spec.wrapType == "number" ? this.parser.nodeSet.types[spec.wrapType] : spec.wrapType || null;
                    if (spec.startParse) {
                        this.nested = spec.startParse(this.input.clip(this.nestEnd), stack.pos, this.context);
                    }
                    else {
                        this.finishNested(stack);
                    }
                };
                Parse.prototype.scanForNestEnd = function (stack, endToken, filter) {
                    for (var pos = stack.pos; pos < this.input.length; pos++) {
                        dummyToken.start = pos;
                        dummyToken.value = -1;
                        endToken.token(this.input, dummyToken, stack);
                        if (dummyToken.value > -1 && (!filter || filter(this.input.read(pos, dummyToken.end))))
                            return pos;
                    }
                    return this.input.length;
                };
                Parse.prototype.finishNested = function (stack, tree) {
                    if (this.nestWrap)
                        tree = new lezerTree.Tree(this.nestWrap, tree ? [tree] : [], tree ? [0] : [], this.nestEnd - stack.pos);
                    else if (!tree)
                        tree = new lezerTree.Tree(lezerTree.NodeType.none, [], [], this.nestEnd - stack.pos);
                    var info = this.parser.findNested(stack.state);
                    stack.useNode(tree, this.parser.getGoto(stack.state, info.placeholder, true));
                    if (verbose)
                        console.log(this.stackID(stack) + " (via unnest)");
                };
                Parse.prototype.stackID = function (stack) {
                    var id = (stackIDs || (stackIDs = new WeakMap)).get(stack);
                    if (!id)
                        stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));
                    return id + stack;
                };
                return Parse;
            }());
            function pushStackDedup(stack, newStacks) {
                for (var i = 0; i < newStacks.length; i++) {
                    var other = newStacks[i];
                    if (other.pos == stack.pos && other.sameState(stack)) {
                        if (newStacks[i].score < stack.score)
                            newStacks[i] = stack;
                        return;
                    }
                }
                newStacks.push(stack);
            }
            var Dialect = /** @class */ (function () {
                function Dialect(source, flags, disabled) {
                    this.source = source;
                    this.flags = flags;
                    this.disabled = disabled;
                }
                Dialect.prototype.allows = function (term) { return !this.disabled || this.disabled[term] == 0; };
                return Dialect;
            }());
            var id = function (x) { return x; };
            /// Context trackers are used to track stateful context (such as
            /// indentation in the Python grammar, or parent elements in the XML
            /// grammar) needed by external tokenizers. You declare them in a
            /// grammar file as `@context exportName from "module"`.
            ///
            /// Context values should be immutable, and can be updated (replaced)
            /// on shift or reduce actions.
            var ContextTracker = /** @class */ (function () {
                /// The export used in a `@context` declaration should be of this
                /// type.
                function ContextTracker(spec) {
                    this.start = spec.start;
                    this.shift = spec.shift || id;
                    this.reduce = spec.reduce || id;
                    this.reuse = spec.reuse || id;
                    this.hash = spec.hash;
                    this.strict = spec.strict !== false;
                }
                return ContextTracker;
            }());
            /// A parser holds the parse tables for a given grammar, as generated
            /// by `lezer-generator`.
            var Parser = /** @class */ (function () {
                /// @internal
                function Parser(spec) {
                    var _this = this;
                    /// @internal
                    this.bufferLength = lezerTree.DefaultBufferLength;
                    /// @internal
                    this.strict = false;
                    this.cachedDialect = null;
                    if (spec.version != 13 /* Version */)
                        throw new RangeError("Parser version (" + spec.version + ") doesn't match runtime version (" + 13 /* Version */ + ")");
                    var tokenArray = decodeArray(spec.tokenData);
                    var nodeNames = spec.nodeNames.split(" ");
                    this.minRepeatTerm = nodeNames.length;
                    this.context = spec.context;
                    for (var i = 0; i < spec.repeatNodeCount; i++)
                        nodeNames.push("");
                    var nodeProps = [];
                    for (var i = 0; i < nodeNames.length; i++)
                        nodeProps.push([]);
                    function setProp(nodeID, prop, value) {
                        nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);
                    }
                    if (spec.nodeProps)
                        for (var _b = 0, _c = spec.nodeProps; _b < _c.length; _b++) {
                            var propSpec = _c[_b];
                            var prop = propSpec[0];
                            for (var i = 1; i < propSpec.length;) {
                                var next = propSpec[i++];
                                if (next >= 0) {
                                    setProp(next, prop, propSpec[i++]);
                                }
                                else {
                                    var value = propSpec[i + -next];
                                    for (var j = -next; j > 0; j--)
                                        setProp(propSpec[i++], prop, value);
                                    i++;
                                }
                            }
                        }
                    this.specialized = new Uint16Array(spec.specialized ? spec.specialized.length : 0);
                    this.specializers = [];
                    if (spec.specialized)
                        for (var i = 0; i < spec.specialized.length; i++) {
                            this.specialized[i] = spec.specialized[i].term;
                            this.specializers[i] = spec.specialized[i].get;
                        }
                    this.states = decodeArray(spec.states, Uint32Array);
                    this.data = decodeArray(spec.stateData);
                    this.goto = decodeArray(spec.goto);
                    var topTerms = Object.keys(spec.topRules).map(function (r) { return spec.topRules[r][1]; });
                    this.nodeSet = new lezerTree.NodeSet(nodeNames.map(function (name, i) { return lezerTree.NodeType.define({
                        name: i >= _this.minRepeatTerm ? undefined : name,
                        id: i,
                        props: nodeProps[i],
                        top: topTerms.indexOf(i) > -1,
                        error: i == 0,
                        skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1
                    }); }));
                    this.maxTerm = spec.maxTerm;
                    this.tokenizers = spec.tokenizers.map(function (value) { return typeof value == "number" ? new TokenGroup(tokenArray, value) : value; });
                    this.topRules = spec.topRules;
                    this.nested = (spec.nested || []).map(function (_b) {
                        var name = _b[0], value = _b[1], endToken = _b[2], placeholder = _b[3];
                        return { name: name, value: value, end: new TokenGroup(decodeArray(endToken), 0), placeholder: placeholder };
                    });
                    this.dialects = spec.dialects || {};
                    this.dynamicPrecedences = spec.dynamicPrecedences || null;
                    this.tokenPrecTable = spec.tokenPrec;
                    this.termNames = spec.termNames || null;
                    this.maxNode = this.nodeSet.types.length - 1;
                    this.dialect = this.parseDialect();
                    this.top = this.topRules[Object.keys(this.topRules)[0]];
                }
                /// Parse a given string or stream.
                Parser.prototype.parse = function (input, startPos, context) {
                    if (startPos === void 0) { startPos = 0; }
                    if (context === void 0) { context = {}; }
                    if (typeof input == "string")
                        input = lezerTree.stringInput(input);
                    var cx = new Parse(this, input, startPos, context);
                    for (;;) {
                        var done = cx.advance();
                        if (done)
                            return done;
                    }
                };
                /// Start an incremental parse.
                Parser.prototype.startParse = function (input, startPos, context) {
                    if (startPos === void 0) { startPos = 0; }
                    if (context === void 0) { context = {}; }
                    if (typeof input == "string")
                        input = lezerTree.stringInput(input);
                    return new Parse(this, input, startPos, context);
                };
                /// Get a goto table entry @internal
                Parser.prototype.getGoto = function (state, term, loose) {
                    if (loose === void 0) { loose = false; }
                    var table = this.goto;
                    if (term >= table[0])
                        return -1;
                    for (var pos = table[term + 1];;) {
                        var groupTag = table[pos++], last = groupTag & 1;
                        var target = table[pos++];
                        if (last && loose)
                            return target;
                        for (var end = pos + (groupTag >> 1); pos < end; pos++)
                            if (table[pos] == state)
                                return target;
                        if (last)
                            return -1;
                    }
                };
                /// Check if this state has an action for a given terminal @internal
                Parser.prototype.hasAction = function (state, terminal) {
                    var data = this.data;
                    for (var set = 0; set < 2; set++) {
                        for (var i = this.stateSlot(state, set ? 2 /* Skip */ : 1 /* Actions */), next = void 0;; i += 3) {
                            if ((next = data[i]) == 65535 /* End */) {
                                if (data[i + 1] == 1 /* Next */)
                                    next = data[i = pair(data, i + 2)];
                                else if (data[i + 1] == 2 /* Other */)
                                    return pair(data, i + 2);
                                else
                                    break;
                            }
                            if (next == terminal || next == 0 /* Err */)
                                return pair(data, i + 1);
                        }
                    }
                    return 0;
                };
                /// @internal
                Parser.prototype.stateSlot = function (state, slot) {
                    return this.states[(state * 6 /* Size */) + slot];
                };
                /// @internal
                Parser.prototype.stateFlag = function (state, flag) {
                    return (this.stateSlot(state, 0 /* Flags */) & flag) > 0;
                };
                /// @internal
                Parser.prototype.findNested = function (state) {
                    var flags = this.stateSlot(state, 0 /* Flags */);
                    return flags & 4 /* StartNest */ ? this.nested[flags >> 10 /* NestShift */] : null;
                };
                /// @internal
                Parser.prototype.validAction = function (state, action) {
                    if (action == this.stateSlot(state, 4 /* DefaultReduce */))
                        return true;
                    for (var i = this.stateSlot(state, 1 /* Actions */);; i += 3) {
                        if (this.data[i] == 65535 /* End */) {
                            if (this.data[i + 1] == 1 /* Next */)
                                i = pair(this.data, i + 2);
                            else
                                return false;
                        }
                        if (action == pair(this.data, i + 1))
                            return true;
                    }
                };
                /// Get the states that can follow this one through shift actions or
                /// goto jumps. @internal
                Parser.prototype.nextStates = function (state) {
                    var result = [];
                    var _loop_2 = function (i) {
                        if (this_1.data[i] == 65535 /* End */) {
                            if (this_1.data[i + 1] == 1 /* Next */)
                                i = pair(this_1.data, i + 2);
                            else
                                return out_i_1 = i, "break";
                        }
                        if ((this_1.data[i + 2] & (65536 /* ReduceFlag */ >> 16)) == 0) {
                            var value_1 = this_1.data[i + 1];
                            if (!result.some(function (v, i) { return (i & 1) && v == value_1; }))
                                result.push(this_1.data[i], value_1);
                        }
                        out_i_1 = i;
                    };
                    var this_1 = this, out_i_1;
                    for (var i = this.stateSlot(state, 1 /* Actions */);; i += 3) {
                        var state_1 = _loop_2(i);
                        i = out_i_1;
                        if (state_1 === "break")
                            break;
                    }
                    return result;
                };
                /// @internal
                Parser.prototype.overrides = function (token, prev) {
                    var iPrev = findOffset(this.data, this.tokenPrecTable, prev);
                    return iPrev < 0 || findOffset(this.data, this.tokenPrecTable, token) < iPrev;
                };
                /// Configure the parser. Returns a new parser instance that has the
                /// given settings modified. Settings not provided in `config` are
                /// kept from the original parser.
                Parser.prototype.configure = function (config) {
                    var _b;
                    // Hideous reflection-based kludge to make it easy to create a
                    // slightly modified copy of a parser.
                    var copy = Object.assign(Object.create(Parser.prototype), this);
                    if (config.props)
                        copy.nodeSet = (_b = this.nodeSet).extend.apply(_b, config.props);
                    if (config.top) {
                        var info = this.topRules[config.top];
                        if (!info)
                            throw new RangeError("Invalid top rule name " + config.top);
                        copy.top = info;
                    }
                    if (config.tokenizers)
                        copy.tokenizers = this.tokenizers.map(function (t) {
                            var found = config.tokenizers.find(function (r) { return r.from == t; });
                            return found ? found.to : t;
                        });
                    if (config.dialect)
                        copy.dialect = this.parseDialect(config.dialect);
                    if (config.nested)
                        copy.nested = this.nested.map(function (obj) {
                            if (!Object.prototype.hasOwnProperty.call(config.nested, obj.name))
                                return obj;
                            return { name: obj.name, value: config.nested[obj.name], end: obj.end, placeholder: obj.placeholder };
                        });
                    if (config.strict != null)
                        copy.strict = config.strict;
                    if (config.bufferLength != null)
                        copy.bufferLength = config.bufferLength;
                    return copy;
                };
                /// Returns the name associated with a given term. This will only
                /// work for all terms when the parser was generated with the
                /// `--names` option. By default, only the names of tagged terms are
                /// stored.
                Parser.prototype.getName = function (term) {
                    return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);
                };
                Object.defineProperty(Parser.prototype, "eofTerm", {
                    /// The eof term id is always allocated directly after the node
                    /// types. @internal
                    get: function () { return this.maxNode + 1; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(Parser.prototype, "hasNested", {
                    /// Tells you whether this grammar has any nested grammars.
                    get: function () { return this.nested.length > 0; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(Parser.prototype, "topNode", {
                    /// The type of top node produced by the parser.
                    get: function () { return this.nodeSet.types[this.top[1]]; },
                    enumerable: false,
                    configurable: true
                });
                /// @internal
                Parser.prototype.dynamicPrecedence = function (term) {
                    var prec = this.dynamicPrecedences;
                    return prec == null ? 0 : prec[term] || 0;
                };
                /// @internal
                Parser.prototype.parseDialect = function (dialect) {
                    if (this.cachedDialect && this.cachedDialect.source == dialect)
                        return this.cachedDialect;
                    var values = Object.keys(this.dialects), flags = values.map(function () { return false; });
                    if (dialect)
                        for (var _b = 0, _c = dialect.split(" "); _b < _c.length; _b++) {
                            var part = _c[_b];
                            var id_1 = values.indexOf(part);
                            if (id_1 >= 0)
                                flags[id_1] = true;
                        }
                    var disabled = null;
                    for (var i = 0; i < values.length; i++)
                        if (!flags[i]) {
                            for (var j = this.dialects[values[i]], id_2; (id_2 = this.data[j++]) != 65535 /* End */;)
                                (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id_2] = 1;
                        }
                    return this.cachedDialect = new Dialect(dialect, flags, disabled);
                };
                /// (used by the output of the parser generator) @internal
                Parser.deserialize = function (spec) {
                    return new Parser(spec);
                };
                return Parser;
            }());
            function pair(data, off) { return data[off] | (data[off + 1] << 16); }
            function findOffset(data, start, term) {
                for (var i = start, next = void 0; (next = data[i]) != 65535 /* End */; i++)
                    if (next == term)
                        return i - start;
                return -1;
            }
            function findFinished(stacks) {
                var best = null;
                for (var _b = 0, stacks_1 = stacks; _b < stacks_1.length; _b++) {
                    var stack = stacks_1[_b];
                    if (stack.pos == stack.p.input.length &&
                        stack.p.parser.stateFlag(stack.state, 2 /* Accepting */) &&
                        (!best || best.score < stack.score))
                        best = stack;
                }
                return best;
            }
            exports.NodeProp = lezerTree.NodeProp;
            exports.NodeSet = lezerTree.NodeSet;
            exports.NodeType = lezerTree.NodeType;
            exports.Tree = lezerTree.Tree;
            exports.TreeCursor = lezerTree.TreeCursor;
            exports.ContextTracker = ContextTracker;
            exports.ExternalTokenizer = ExternalTokenizer;
            exports.Parser = Parser;
            exports.Stack = Stack;
            exports.Token = Token;
            //# sourceMappingURL=index.cjs.map
            /***/ 
        }),
        /***/ "./ast.ts": 
        /*!****************!*\
          !*** ./ast.ts ***!
          \****************/
        /***/ (function (__unused_webpack_module, exports) {
            Object.defineProperty(exports, "__esModule", ({ value: true }));
            exports.isUop = exports.isOp = exports.isLiteral = void 0;
            function isLiteral(maybeLit) {
                var tag = maybeLit.tag;
                if (tag === "number" || tag === "true" || tag === "false" || tag === "none") {
                    return true;
                }
                else {
                    return false;
                }
            }
            exports.isLiteral = isLiteral;
            var ops = { "+": true, "-": true, "*": true, "//": true, "%": true, "==": true, "!=": true,
                "<=": true, ">=": true, "<": true, ">": true, "is": true };
            function isOp(maybeOp) {
                return maybeOp in ops;
            }
            exports.isOp = isOp;
            var uops = { "not": true, "-": true };
            function isUop(maybeUop) {
                return maybeUop in uops;
            }
            exports.isUop = isUop;
            /***/ 
        }),
        /***/ "./compiler.ts": 
        /*!*********************!*\
          !*** ./compiler.ts ***!
          \*********************/
        /***/ (function (__unused_webpack_module, exports, __webpack_require__) {
            var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
                function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
                return new (P || (P = Promise))(function (resolve, reject) {
                    function fulfilled(value) { try {
                        step(generator.next(value));
                    }
                    catch (e) {
                        reject(e);
                    } }
                    function rejected(value) { try {
                        step(generator["throw"](value));
                    }
                    catch (e) {
                        reject(e);
                    } }
                    function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
                    step((generator = generator.apply(thisArg, _arguments || [])).next());
                });
            };
            var __generator = (this && this.__generator) || function (thisArg, body) {
                var _ = { label: 0, sent: function () { if (t[0] & 1)
                        throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
                return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
                function verb(n) { return function (v) { return step([n, v]); }; }
                function step(op) {
                    if (f)
                        throw new TypeError("Generator is already executing.");
                    while (_)
                        try {
                            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                                return t;
                            if (y = 0, t)
                                op = [op[0] & 2, t.value];
                            switch (op[0]) {
                                case 0:
                                case 1:
                                    t = op;
                                    break;
                                case 4:
                                    _.label++;
                                    return { value: op[1], done: false };
                                case 5:
                                    _.label++;
                                    y = op[1];
                                    op = [0];
                                    continue;
                                case 7:
                                    op = _.ops.pop();
                                    _.trys.pop();
                                    continue;
                                default:
                                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                        _ = 0;
                                        continue;
                                    }
                                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                        _.label = op[1];
                                        break;
                                    }
                                    if (op[0] === 6 && _.label < t[1]) {
                                        _.label = t[1];
                                        t = op;
                                        break;
                                    }
                                    if (t && _.label < t[2]) {
                                        _.label = t[2];
                                        _.ops.push(op);
                                        break;
                                    }
                                    if (t[2])
                                        _.ops.pop();
                                    _.trys.pop();
                                    continue;
                            }
                            op = body.call(thisArg, _);
                        }
                        catch (e) {
                            op = [6, e];
                            y = 0;
                        }
                        finally {
                            f = t = 0;
                        }
                    if (op[0] & 5)
                        throw op[1];
                    return { value: op[0] ? op[1] : void 0, done: true };
                }
            };
            var __spreadArrays = (this && this.__spreadArrays) || function () {
                for (var s = 0, i = 0, il = arguments.length; i < il; i++)
                    s += arguments[i].length;
                for (var r = Array(s), k = 0, i = 0; i < il; i++)
                    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                        r[k] = a[j];
                return r;
            };
            var __importDefault = (this && this.__importDefault) || function (mod) {
                return (mod && mod.__esModule) ? mod : { "default": mod };
            };
            Object.defineProperty(exports, "__esModule", ({ value: true }));
            exports.compile = exports.codeGenStmt = exports.codeGenExpr = exports.uopStmts = exports.opStmts = exports.run = void 0;
            var wabt_1 = __importDefault(__webpack_require__(/*! wabt */ "wabt"));
            var parser_1 = __webpack_require__(/*! ./parser */ "./parser.ts");
            var tc_1 = __webpack_require__(/*! ./tc */ "./tc.ts");
            var LoopLabel = 1;
            function variableNames(stmts) {
                var vars = [];
                stmts.forEach(function (stmt) {
                    if (stmt.tag === "vardef") {
                        vars.push(stmt.name);
                    }
                });
                return vars;
            }
            function funs(stmts) {
                return stmts.filter(function (stmt) { return stmt.tag === "define"; });
            }
            function nonFuns(stmts) {
                return stmts.filter(function (stmt) { return stmt.tag !== "define"; });
            }
            function varsFunsStmts(stmts) {
                return [variableNames(stmts), funs(stmts), nonFuns(stmts)];
            }
            function run(watSource, config) {
                return __awaiter(this, void 0, void 0, function () {
                    var wabtApi, parsed, binary, wasmModule;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, wabt_1.default()];
                            case 1:
                                wabtApi = _a.sent();
                                parsed = wabtApi.parseWat("example", watSource);
                                binary = parsed.toBinary({});
                                return [4 /*yield*/, WebAssembly.instantiate(binary.buffer, config)];
                            case 2:
                                wasmModule = _a.sent();
                                return [2 /*return*/, wasmModule.instance.exports._start()];
                        }
                    });
                });
            }
            exports.run = run;
            function opStmts(op) {
                //+ | - | * | // | % | == | != | <= | >= | < | > | is  
                switch (op) {
                    case "+": return ["i32.add"];
                    case "-": return ["i32.sub"];
                    case "*": return ["i32.mul"];
                    case "//": return ["i32.div_s"];
                    case "%": return ["i32.rem_s"];
                    case "==": return ["i32.eq"];
                    case "!=": return ["i32.ne"];
                    case "<=": return ["i32.le_s"];
                    case ">=": return ["i32.ge_s"];
                    case "<": return ["i32.lt_s"];
                    case ">": return ["i32.gt_s"];
                    default:
                        throw new Error("Unhandled or unknown op: " + op);
                }
            }
            exports.opStmts = opStmts;
            function uopStmts(uop, oprdCode) {
                switch (uop) {
                    case "not": return __spreadArrays(oprdCode, ["i32.eqz"]);
                    case "-": return __spreadArrays(["(i32.const 0)"], oprdCode, ["i32.sub"]);
                }
            }
            exports.uopStmts = uopStmts;
            function codeGenExpr(expr, locals) {
                switch (expr.tag) {
                    case "number": return ["(i32.const " + expr.value + ")"];
                    case "true": return ["(i32.const 1)"];
                    case "false": return ["(i32.const 0)"];
                    case "id":
                        // Since we type-checked for making sure all variable exist, here we
                        // just check if it's a local variable and assume it is global if not
                        if (locals.has(expr.name)) {
                            return ["(local.get $" + expr.name + ")"];
                        }
                        else {
                            return ["(global.get $" + expr.name + ")"];
                        }
                    case "binop": {
                        var lhsExprs = codeGenExpr(expr.lhs, locals);
                        var rhsExprs = codeGenExpr(expr.rhs, locals);
                        var opstmts = opStmts(expr.op);
                        return __spreadArrays(lhsExprs, rhsExprs, opstmts);
                    }
                    case "uniop": {
                        var oprdExprs = codeGenExpr(expr.oprd, locals);
                        var uopstmts = uopStmts(expr.uop, oprdExprs);
                        return uopstmts;
                    }
                    case "parenthesized": {
                        var contExpr = codeGenExpr(expr.content, locals);
                        return contExpr;
                    }
                    case "call":
                        var valStmts = expr.args.map(function (e) { return codeGenExpr(e, locals); }).flat();
                        var toCall = expr.name;
                        if (expr.name === "print") {
                            switch (expr.args[0].a) {
                                case "bool":
                                    toCall = "print_bool";
                                    break;
                                case "int":
                                    toCall = "print_num";
                                    break;
                                case "none":
                                    toCall = "print_none";
                                    break;
                            }
                        }
                        valStmts.push("(call $" + toCall + ")");
                        return valStmts;
                }
            }
            exports.codeGenExpr = codeGenExpr;
            function codeGenStmt(stmt, locals) {
                switch (stmt.tag) {
                    case "define":
                        var withParamsAndVariables_1 = new Map(locals.entries());
                        // Construct the environment for the function body
                        var variables = variableNames(stmt.body);
                        variables.forEach(function (v) { return withParamsAndVariables_1.set(v, true); });
                        stmt.params.forEach(function (p) { return withParamsAndVariables_1.set(p.name, true); });
                        // Construct the code for params and variable declarations in the body
                        var params = stmt.params.map(function (p) { return "(param $" + p.name + " i32)"; }).join(" ");
                        var varDecls = variables.map(function (v) { return "(local $" + v + " i32)"; }).join("\n");
                        var stmts = stmt.body.map(function (s) { return codeGenStmt(s, withParamsAndVariables_1); }).flat();
                        var stmtsBody = stmts.join("\n");
                        return ["(func $" + stmt.name + " " + params + " (result i32)\n        (local $scratch i32)\n        " + varDecls + "\n        " + stmtsBody + "\n        (i32.const 0))"];
                    case "if":
                        var ifCode = "";
                        for (var i = 0; i < stmt.ifs.length; i++) {
                            if (i == 0) {
                                var cond = codeGenExpr(stmt.ifs[i].condition, locals).flat();
                                var condCode = cond.join("\n");
                                var ifbody = stmt.ifs[i].body.map(function (s) { return codeGenStmt(s, withParamsAndVariables_1); }).flat();
                                var bodyCode = ifbody.join("\n");
                                var exifCode = ("\n          " + condCode + "\n          (if\n\n            (then\n\n              " + bodyCode + "\n            )\n          ");
                                ifCode = [ifCode, exifCode].flat().join("\n");
                            }
                            else {
                                var cond = codeGenExpr(stmt.ifs[i].condition, locals).flat();
                                var condCode = cond.join("\n");
                                var ifbody = stmt.ifs[i].body.map(function (s) { return codeGenStmt(s, withParamsAndVariables_1); }).flat();
                                var bodyCode = ifbody.join("\n");
                                var exifCode = ("\n          (else\n          " + condCode + "\n          (if\n          (then\n            " + bodyCode + "\n          )\n          ");
                                ifCode = [ifCode, exifCode].flat().join("\n");
                            }
                        }
                        if ("else" in stmt) {
                            var elsebody = stmt.else.map(function (s) { return codeGenStmt(s, withParamsAndVariables_1); }).flat();
                            var bodyCode = elsebody.join("\n");
                            var exifCode = ("\n        (else\n          " + bodyCode + "\n        )\n        ");
                            ifCode = [ifCode, exifCode].flat().join("\n");
                        }
                        ifCode = [ifCode, ")".repeat(stmt.ifs.length * 2 - 2), ")"].flat().join("");
                        return [ifCode];
                    case "while":
                        var looplabel = "loop" + LoopLabel.toString();
                        var blocklabel = "block" + LoopLabel.toString();
                        var whilecond = codeGenExpr(stmt.condition, locals).flat();
                        var whilecondCode = whilecond.join("\n");
                        var whilebody = stmt.body.map(function (s) { return codeGenStmt(s, locals); }).flat();
                        var whilebodyCode = whilebody.join("\n");
                        var whileCode = "\n      (block $" + blocklabel + "\n        (loop $" + looplabel + "\n          " + whilecondCode + "\n          i32.eqz\n          br_if $" + blocklabel + "\n          " + whilebodyCode + "\n          br $" + looplabel + "\n        )\n      )\n      ";
                        return [whileCode];
                    case "return":
                        var valStmts = codeGenExpr(stmt.value, locals);
                        valStmts.push("return");
                        return valStmts;
                    case "assign":
                        var valStmts = codeGenExpr(stmt.value, locals);
                        if (locals.has(stmt.name)) {
                            valStmts.push("(local.set $" + stmt.name + ")");
                        }
                        else {
                            valStmts.push("(global.set $" + stmt.name + ")");
                        }
                        return valStmts;
                    case "vardef":
                        var valStmts = codeGenExpr(stmt.value, locals);
                        if (locals.has(stmt.name)) {
                            valStmts.push("(local.set $" + stmt.name + ")");
                        }
                        else {
                            valStmts.push("(global.set $" + stmt.name + ")");
                        }
                        return valStmts;
                    case "expr":
                        var result = codeGenExpr(stmt.expr, locals);
                        result.push("(local.set $scratch)");
                        return result;
                }
            }
            exports.codeGenStmt = codeGenStmt;
            function compile(source) {
                var ast = parser_1.parseProgram(source);
                ast = tc_1.tcProgram(ast);
                var emptyEnv = new Map();
                var _a = varsFunsStmts(ast), vars = _a[0], funs = _a[1], stmts = _a[2];
                var funsCode = funs.map(function (f) { return codeGenStmt(f, emptyEnv); }).map(function (f) { return f.join("\n"); });
                var allFuns = funsCode.join("\n\n");
                var varDecls = vars.map(function (v) { return "(global $" + v + " (mut i32) (i32.const 0))"; }).join("\n");
                var allStmts = stmts.map(function (s) { return codeGenStmt(s, emptyEnv); }).flat();
                var main = __spreadArrays(["(local $scratch i32)"], allStmts).join("\n");
                var lastStmt = ast[ast.length - 1];
                var isExpr = lastStmt.tag === "expr";
                var retType = "";
                var retVal = "";
                if (isExpr) {
                    retType = "(result i32)";
                    retVal = "(local.get $scratch)";
                }
                return "\n    (module\n      (func $print_num (import \"imports\" \"print_num\") (param i32) (result i32))\n      (func $print_bool (import \"imports\" \"print_bool\") (param i32) (result i32))\n      (func $print_none (import \"imports\" \"print_none\")  (result i32))\n      " + varDecls + "\n      " + allFuns + "\n      (func (export \"_start\") " + retType + "\n        " + main + "\n        " + retVal + "\n      )\n    ) \n  ";
            }
            exports.compile = compile;
            /***/ 
        }),
        /***/ "./parser.ts": 
        /*!*******************!*\
          !*** ./parser.ts ***!
          \*******************/
        /***/ (function (__unused_webpack_module, exports, __webpack_require__) {
            Object.defineProperty(exports, "__esModule", ({ value: true }));
            exports.traverseArguments = exports.traverseExpr = exports.traverseParameters = exports.traverseType = exports.traverseAssignment = exports.traverseBody = exports.traverseIf = exports.traverseStmt = exports.traverseStmts = exports.parseProgram = void 0;
            var lezer_python_1 = __webpack_require__(/*! lezer-python */ "./node_modules/lezer-python/dist/index.cjs");
            var ast_1 = __webpack_require__(/*! ./ast */ "./ast.ts");
            function parseProgram(source) {
                var t = lezer_python_1.parser.parse(source).cursor();
                return traverseStmts(source, t);
            }
            exports.parseProgram = parseProgram;
            function traverseStmts(s, t) {
                // The top node in the program is a Script node with a list of children
                // that are various statements
                t.firstChild();
                var stmts = [];
                do {
                    stmts.push(traverseStmt(s, t));
                } while (t.nextSibling()); // t.nextSibling() returns false when it reaches
                //  the end of the list of children
                return stmts;
            }
            exports.traverseStmts = traverseStmts;
            /*
              Invariant – t must focus on the same node at the end of the traversal
            */
            function traverseStmt(s, t) {
                switch (t.type.name) {
                    case "ReturnStatement":
                        t.firstChild(); // Focus return keyword
                        t.nextSibling(); // Focus expression
                        var value = traverseExpr(s, t);
                        t.parent();
                        return { tag: "return", value: value };
                    case "AssignStatement":
                        return traverseAssignment(s, t);
                    case "IfStatement":
                        return traverseIf(s, t);
                    case "WhileStatement":
                        t.firstChild(); //while
                        t.nextSibling(); //condition
                        var whilecondition = traverseExpr(s, t);
                        t.nextSibling(); //body
                        t.firstChild(); //:
                        var whilebody = traverseBody(s, t);
                        return { tag: "while", condition: whilecondition, body: whilebody };
                    case "ExpressionStatement":
                        t.firstChild(); // The child is some kind of expression, the
                        // ExpressionStatement is just a wrapper with no information
                        var expr = traverseExpr(s, t);
                        t.parent();
                        return { tag: "expr", expr: expr };
                    case "FunctionDefinition":
                        t.firstChild(); // Focus on def
                        t.nextSibling(); // Focus on name of function
                        var name = s.substring(t.from, t.to);
                        t.nextSibling(); // Focus on ParamList
                        var params = traverseParameters(s, t);
                        t.nextSibling(); // Focus on Body or TypeDef
                        var ret = "none";
                        var maybeTD = t;
                        if (maybeTD.type.name === "TypeDef") {
                            t.firstChild();
                            ret = traverseType(s, t);
                            t.parent();
                        }
                        t.nextSibling(); // Focus on single statement (for now)
                        t.firstChild(); // Focus on :
                        var body = [];
                        while (t.nextSibling()) {
                            body.push(traverseStmt(s, t));
                        }
                        t.parent(); // Pop to Body
                        t.parent(); // Pop to FunctionDefinition
                        return {
                            tag: "define",
                            name: name, params: params, body: body, ret: ret
                        };
                }
            }
            exports.traverseStmt = traverseStmt;
            function traverseIf(s, t) {
                var vifs = [];
                t.firstChild();
                do {
                    if (t.type.name == "else") {
                        t.nextSibling();
                        var ebody = traverseBody(s, t);
                        t.parent();
                        return { tag: "if", ifs: vifs, else: ebody };
                    }
                    else if (t.type.name == "elif" || t.type.name == "if") {
                        t.nextSibling();
                        var cond = traverseExpr(s, t);
                        t.nextSibling();
                        var body = traverseBody(s, t);
                        var curif = { tag: "subif", condition: cond, body: body };
                        vifs.push(curif);
                    }
                } while (t.nextSibling());
                t.parent();
                return { tag: "if", ifs: vifs };
            }
            exports.traverseIf = traverseIf;
            function traverseBody(s, t) {
                t.firstChild();
                t.nextSibling();
                var stmts = [];
                do {
                    stmts.push(traverseStmt(s, t));
                } while (t.nextSibling()); // t.nextSibling() returns false when it reaches
                //  the end of the list of children
                t.parent();
                return stmts;
            }
            exports.traverseBody = traverseBody;
            function traverseAssignment(s, t) {
                t.firstChild(); // focused on name (the first child)
                var name = s.substring(t.from, t.to);
                t.nextSibling();
                if (t.type.name === "TypeDef") {
                    t.firstChild();
                    t.nextSibling();
                    var type = traverseType(s, t);
                    t.parent();
                    t.nextSibling();
                    t.nextSibling();
                    var value = traverseExpr(s, t);
                    t.parent();
                    return { tag: "vardef", name: name, value: value, type: type };
                }
                t.nextSibling(); // focused on the value expression
                var value = traverseExpr(s, t);
                t.parent();
                return { tag: "assign", name: name, value: value };
            }
            exports.traverseAssignment = traverseAssignment;
            function traverseType(s, t) {
                switch (t.type.name) {
                    case "VariableName":
                        var name_1 = s.substring(t.from, t.to);
                        if (name_1 != "int" && name_1 != "bool") {
                            throw new Error("Unknown type: " + name_1);
                        }
                        return name_1;
                    default:
                        throw new Error("Unknown type: " + t.type.name);
                }
            }
            exports.traverseType = traverseType;
            function traverseParameters(s, t) {
                t.firstChild(); // Focuses on open paren
                var parameters = [];
                t.nextSibling(); // Focuses on a VariableName
                while (t.type.name !== ")") {
                    var name_2 = s.substring(t.from, t.to);
                    t.nextSibling(); // Focuses on "TypeDef", hopefully, or "," if mistake
                    var nextTagName = t.type.name; // NOTE(joe): a bit of a hack so the next line doesn't if-split
                    if (nextTagName !== "TypeDef") {
                        throw new Error("Missed type annotation for parameter " + name_2);
                    }
                    ;
                    t.firstChild(); // Enter TypeDef
                    t.nextSibling(); // Focuses on type itself
                    var typ = traverseType(s, t);
                    t.parent();
                    t.nextSibling(); // Move on to comma or ")"
                    parameters.push({ name: name_2, typ: typ });
                    t.nextSibling(); // Focuses on a VariableName
                }
                t.parent(); // Pop to ParamList
                return parameters;
            }
            exports.traverseParameters = traverseParameters;
            function traverseExpr(s, t) {
                switch (t.type.name) {
                    case "Boolean":
                        if (s.substring(t.from, t.to) === "True") {
                            return { tag: "true" };
                        }
                        else {
                            return { tag: "false" };
                        }
                    case "Number":
                        return { tag: "number", value: Number(s.substring(t.from, t.to)) };
                    case "None":
                        return { tag: "none" };
                    case "VariableName":
                        return { tag: "id", name: s.substring(t.from, t.to) };
                    case "CallExpression":
                        t.firstChild(); // Focus name
                        var name = s.substring(t.from, t.to);
                        t.nextSibling(); // Focus ArgList
                        t.firstChild(); // Focus open paren
                        var args = traverseArguments(t, s);
                        var result = { tag: "call", name: name, args: args };
                        t.parent();
                        return result;
                    case "BinaryExpression":
                        t.firstChild(); // go to lhs
                        var lhsExpr = traverseExpr(s, t);
                        t.nextSibling(); // go to op
                        var opStr = s.substring(t.from, t.to);
                        if (!ast_1.isOp(opStr)) {
                            throw new Error("Unknown or unhandled binary op: " + opStr);
                        }
                        t.nextSibling(); // go to rhs
                        var rhsExpr = traverseExpr(s, t);
                        t.parent();
                        return {
                            tag: "binop",
                            op: opStr,
                            lhs: lhsExpr,
                            rhs: rhsExpr
                        };
                    case "ParenthesizedExpression":
                        t.firstChild();
                        t.nextSibling();
                        var cont = traverseExpr(s, t);
                        t.parent();
                        return {
                            tag: "parenthesized",
                            content: cont
                        };
                    case "UnaryExpression":
                        t.firstChild(); // go to op
                        var uopStr = s.substring(t.from, t.to);
                        if (!ast_1.isUop(uopStr)) {
                            throw new Error("Unknown or unhandled unary op: " + uopStr);
                        }
                        t.nextSibling(); // go to operand
                        var operand = traverseExpr(s, t);
                        t.parent();
                        return {
                            tag: "uniop",
                            uop: uopStr,
                            oprd: operand
                        };
                }
            }
            exports.traverseExpr = traverseExpr;
            function traverseArguments(c, s) {
                c.firstChild(); // Focuses on open paren
                var args = [];
                c.nextSibling();
                while (c.type.name !== ")") {
                    var expr = traverseExpr(s, c);
                    args.push(expr);
                    c.nextSibling(); // Focuses on either "," or ")"
                    c.nextSibling(); // Focuses on a VariableName
                }
                c.parent(); // Pop to ArgList
                return args;
            }
            exports.traverseArguments = traverseArguments;
            /***/ 
        }),
        /***/ "./tc.ts": 
        /*!***************!*\
          !*** ./tc.ts ***!
          \***************/
        /***/ (function (__unused_webpack_module, exports, __webpack_require__) {
            var __assign = (this && this.__assign) || function () {
                __assign = Object.assign || function (t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                        s = arguments[i];
                        for (var p in s)
                            if (Object.prototype.hasOwnProperty.call(s, p))
                                t[p] = s[p];
                    }
                    return t;
                };
                return __assign.apply(this, arguments);
            };
            Object.defineProperty(exports, "__esModule", ({ value: true }));
            exports.tcProgram = exports.tcSubif = exports.tcStmt = exports.tcExpr = void 0;
            var ast_1 = __webpack_require__(/*! ./ast */ "./ast.ts");
            function tcExpr(e, functions, variables) {
                switch (e.tag) {
                    case "number": return __assign(__assign({}, e), { a: "int" });
                    case "true": return __assign(__assign({}, e), { a: "bool" });
                    case "false": return __assign(__assign({}, e), { a: "bool" });
                    case "none": return __assign(__assign({}, e), { a: "none" });
                    case "binop": {
                        e.lhs = tcExpr(e.lhs, functions, variables);
                        e.rhs = tcExpr(e.rhs, functions, variables);
                        switch (e.op) {
                            case "+":
                                if (e.lhs.a != "int" || e.rhs.a != "int") {
                                    throw new Error("Invalid Operands for " + e.op);
                                }
                                return __assign(__assign({}, e), { a: "int" });
                            case "-":
                                if (e.lhs.a != "int" || e.rhs.a != "int") {
                                    throw new Error("Invalid Operands for " + e.op);
                                }
                                return __assign(__assign({}, e), { a: "int" });
                            case "*":
                                if (e.lhs.a != "int" || e.rhs.a != "int") {
                                    throw new Error("Invalid Operands for " + e.op);
                                }
                                return __assign(__assign({}, e), { a: "int" });
                            case "//":
                                if (e.lhs.a != "int" || e.rhs.a != "int") {
                                    throw new Error("Invalid Operands for " + e.op);
                                }
                                return __assign(__assign({}, e), { a: "int" });
                            case "%":
                                if (e.lhs.a != "int" || e.rhs.a != "int") {
                                    throw new Error("Invalid Operands for " + e.op);
                                }
                                return __assign(__assign({}, e), { a: "int" });
                            case "==":
                                if (!((e.lhs.a == "int" && e.rhs.a == "int") || (e.lhs.a == "bool" && e.rhs.a == "bool"))) {
                                    throw new Error("Invalid Operands for " + e.op);
                                }
                                return __assign(__assign({}, e), { a: "bool" });
                            case "!=":
                                if (!((e.lhs.a == "int" && e.rhs.a == "int") || (e.lhs.a == "bool" && e.rhs.a == "bool"))) {
                                    throw new Error("Invalid Operands for " + e.op);
                                }
                                return __assign(__assign({}, e), { a: "bool" });
                            case "<=":
                                if (!(e.lhs.a == "int" && e.rhs.a == "int")) {
                                    throw new Error("Invalid Operands for " + e.op);
                                }
                                return __assign(__assign({}, e), { a: "bool" });
                            case ">=":
                                if (!(e.lhs.a == "int" && e.rhs.a == "int")) {
                                    throw new Error("Invalid Operands for " + e.op);
                                }
                                return __assign(__assign({}, e), { a: "bool" });
                            case "<":
                                if (!(e.lhs.a == "int" && e.rhs.a == "int")) {
                                    throw new Error("Invalid Operands for " + e.op);
                                }
                                return __assign(__assign({}, e), { a: "bool" });
                            case ">":
                                if (!(e.lhs.a == "int" && e.rhs.a == "int")) {
                                    throw new Error("Invalid Operands for " + e.op);
                                }
                                return __assign(__assign({}, e), { a: "bool" });
                            default: throw new Error("Unhandled op " + e.op);
                        }
                    }
                    case "uniop": {
                        e.oprd = tcExpr(e.oprd, functions, variables);
                        switch (e.uop) {
                            case "not":
                                if (e.oprd.a != "bool") {
                                    throw new Error("Invalid Operand for " + e.uop);
                                }
                                return __assign(__assign({}, e), { a: "bool" });
                            case "-":
                                if (e.oprd.a != "int") {
                                    throw new Error("Invalid Operand for " + e.uop);
                                }
                                return __assign(__assign({}, e), { a: "int" });
                        }
                    }
                    case "parenthesized": {
                        e.content = tcExpr(e.content, functions, variables);
                        return __assign(__assign({}, e), { a: e.content.a });
                    }
                    case "id": return __assign(__assign({}, e), { a: variables.get(e.name) });
                    case "call":
                        if (e.name === "print") {
                            if (e.args.length !== 1) {
                                throw new Error("print expects a single argument");
                            }
                            var newArgs_1 = [tcExpr(e.args[0], functions, variables)];
                            var res = __assign(__assign({}, e), { a: "none", args: newArgs_1 });
                            return res;
                        }
                        if (!functions.has(e.name)) {
                            throw new Error("function " + e.name + " not found");
                        }
                        var _a = functions.get(e.name), args = _a[0], ret = _a[1];
                        if (args.length !== e.args.length) {
                            throw new Error("Expected " + args.length + " arguments but got " + e.args.length);
                        }
                        var newArgs = args.map(function (a, i) {
                            var argtyp = tcExpr(e.args[i], functions, variables);
                            if (a !== argtyp.a) {
                                throw new Error("Got " + argtyp + " as argument " + (i + 1) + ", expected " + a);
                            }
                            return argtyp;
                        });
                        return __assign(__assign({}, e), { a: ret, args: newArgs });
                }
            }
            exports.tcExpr = tcExpr;
            function tcStmt(s, functions, variables, currentReturn) {
                var localvariables = new Map();
                switch (s.tag) {
                    case "vardef": {
                        if (!ast_1.isLiteral(s.value)) {
                            throw new Error("Cannot assign non literal in variable definition");
                        }
                        var rhs = tcExpr(s.value, functions, variables);
                        if (rhs.a != s.type) {
                            throw new Error("Cannot assign " + rhs + " to type " + s.type);
                        }
                        else {
                            if (localvariables.has(s.name)) {
                                throw new Error("Duplicate definition of " + s.name + " in same scope");
                            }
                            localvariables.set(s.name, s.type);
                            variables.set(s.name, s.type);
                        }
                        return __assign(__assign({}, s), { value: rhs });
                    }
                    case "assign": {
                        var rhs = tcExpr(s.value, functions, variables);
                        if (variables.has(s.name) && variables.get(s.name) !== rhs.a) {
                            throw new Error("Cannot assign " + rhs + " to " + variables.get(s.name));
                        }
                        else if (!variables.has(s.name)) {
                            throw new Error("Assignment before definition " + s.name);
                        }
                        return __assign(__assign({}, s), { value: rhs });
                    }
                    case "define": {
                        var bodyvars_1 = new Map(variables.entries());
                        s.params.forEach(function (p) { bodyvars_1.set(p.name, p.typ); });
                        var newStmts = s.body.map(function (bs) { return tcStmt(bs, functions, bodyvars_1, s.ret); });
                        return __assign(__assign({}, s), { body: newStmts });
                    }
                    case "if": {
                        var newifs = [];
                        for (var _i = 0, _a = s.ifs; _i < _a.length; _i++) {
                            var i = _a[_i];
                            newifs.push(tcSubif(i, functions, variables, currentReturn));
                        }
                        if ('else' in s) {
                            var newelse = s.else.map(function (bs) { return tcStmt(bs, functions, variables, currentReturn); });
                            return __assign(__assign({}, s), { ifs: newifs, else: newelse });
                        }
                        return __assign(__assign({}, s), { ifs: newifs });
                    }
                    case "while": {
                        var newbody = s.body.map(function (bs) { return tcStmt(bs, functions, variables, currentReturn); });
                        return __assign(__assign({}, s), { condition: tcExpr(s.condition, functions, variables), body: newbody });
                    }
                    case "expr": {
                        var ret = tcExpr(s.expr, functions, variables);
                        return __assign(__assign({}, s), { expr: ret });
                    }
                    case "return": {
                        var valTyp = tcExpr(s.value, functions, variables);
                        if (valTyp.a !== currentReturn) {
                            throw new Error(valTyp + " returned but " + currentReturn + " expected.");
                        }
                        return __assign(__assign({}, s), { value: valTyp });
                    }
                }
            }
            exports.tcStmt = tcStmt;
            function tcSubif(i, functions, variables, currentReturn) {
                i.condition = tcExpr(i.condition, functions, variables);
                if (i.condition.a != "bool") {
                    throw new Error("Conditional statement not typed boolean");
                }
                var newbody = i.body.map(function (bs) { return tcStmt(bs, functions, variables, currentReturn); });
                for (var _i = 0, _a = i.body; _i < _a.length; _i++) {
                    var istmt = _a[_i];
                    if (istmt.tag == "vardef") {
                        throw new Error("Variable definition in If block");
                    }
                }
                return __assign(__assign({}, i), { body: newbody });
            }
            exports.tcSubif = tcSubif;
            function tcProgram(p) {
                var functions = new Map();
                p.forEach(function (s) {
                    if (s.tag === "define") {
                        functions.set(s.name, [s.params.map(function (p) { return p.typ; }), s.ret]);
                    }
                });
                var globals = new Map();
                return p.map(function (s) {
                    if (s.tag === "vardef") {
                        if (!ast_1.isLiteral(s.value)) {
                            throw new Error("Cannot assign non literal in variable definition");
                        }
                        var rhs = tcExpr(s.value, functions, globals);
                        if (rhs.a != s.type) {
                            throw new Error("Cannot assign " + rhs + " to type " + s.type);
                        }
                        else {
                            if (globals.has(s.name)) {
                                throw new Error("Duplicate definition of " + s.name + " in same scope");
                            }
                        }
                        globals.set(s.name, rhs.a);
                        return __assign(__assign({}, s), { value: rhs });
                    }
                    else {
                        var res = tcStmt(s, functions, globals, "none");
                        return res;
                    }
                });
            }
            exports.tcProgram = tcProgram;
            /***/ 
        }),
        /***/ "./webstart.ts": 
        /*!*********************!*\
          !*** ./webstart.ts ***!
          \*********************/
        /***/ (function (__unused_webpack_module, exports, __webpack_require__) {
            var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
                function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
                return new (P || (P = Promise))(function (resolve, reject) {
                    function fulfilled(value) { try {
                        step(generator.next(value));
                    }
                    catch (e) {
                        reject(e);
                    } }
                    function rejected(value) { try {
                        step(generator["throw"](value));
                    }
                    catch (e) {
                        reject(e);
                    } }
                    function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
                    step((generator = generator.apply(thisArg, _arguments || [])).next());
                });
            };
            var __generator = (this && this.__generator) || function (thisArg, body) {
                var _ = { label: 0, sent: function () { if (t[0] & 1)
                        throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
                return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
                function verb(n) { return function (v) { return step([n, v]); }; }
                function step(op) {
                    if (f)
                        throw new TypeError("Generator is already executing.");
                    while (_)
                        try {
                            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                                return t;
                            if (y = 0, t)
                                op = [op[0] & 2, t.value];
                            switch (op[0]) {
                                case 0:
                                case 1:
                                    t = op;
                                    break;
                                case 4:
                                    _.label++;
                                    return { value: op[1], done: false };
                                case 5:
                                    _.label++;
                                    y = op[1];
                                    op = [0];
                                    continue;
                                case 7:
                                    op = _.ops.pop();
                                    _.trys.pop();
                                    continue;
                                default:
                                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                        _ = 0;
                                        continue;
                                    }
                                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                        _.label = op[1];
                                        break;
                                    }
                                    if (op[0] === 6 && _.label < t[1]) {
                                        _.label = t[1];
                                        t = op;
                                        break;
                                    }
                                    if (t && _.label < t[2]) {
                                        _.label = t[2];
                                        _.ops.push(op);
                                        break;
                                    }
                                    if (t[2])
                                        _.ops.pop();
                                    _.trys.pop();
                                    continue;
                            }
                            op = body.call(thisArg, _);
                        }
                        catch (e) {
                            op = [6, e];
                            y = 0;
                        }
                        finally {
                            f = t = 0;
                        }
                    if (op[0] & 5)
                        throw op[1];
                    return { value: op[0] ? op[1] : void 0, done: true };
                }
            };
            Object.defineProperty(exports, "__esModule", ({ value: true }));
            var compiler_1 = __webpack_require__(/*! ./compiler */ "./compiler.ts");
            document.addEventListener("DOMContentLoaded", function () {
                return __awaiter(void 0, void 0, void 0, function () {
                    function display(arg) {
                        var elt = document.createElement("pre");
                        document.getElementById("output").innerText = arg;
                        console.log("Logging from WASM: ", arg);
                    }
                    var importObject, runButton, userCode;
                    return __generator(this, function (_a) {
                        importObject = {
                            imports: {
                                print_num: function (arg) {
                                    console.log("Logging from WASM: ", arg);
                                    display(String(arg));
                                    return arg;
                                },
                                print_bool: function (arg) {
                                    if (arg === 0) {
                                        display("False");
                                    }
                                    else {
                                        display("True");
                                    }
                                    return arg;
                                },
                                print_none: function (arg) {
                                    display("None");
                                    return arg;
                                }
                            },
                        };
                        runButton = document.getElementById("run");
                        userCode = document.getElementById("user-code");
                        runButton.addEventListener("click", function () {
                            return __awaiter(void 0, void 0, void 0, function () {
                                var program, output, wat, code, result, e_1;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            program = userCode.value;
                                            output = document.getElementById("output");
                                            _a.label = 1;
                                        case 1:
                                            _a.trys.push([1, 3, , 4]);
                                            wat = compiler_1.compile(program);
                                            code = document.getElementById("generated-code");
                                            code.textContent = wat;
                                            return [4 /*yield*/, compiler_1.run(wat, importObject)];
                                        case 2:
                                            result = _a.sent();
                                            output.textContent += String(result);
                                            output.setAttribute("style", "color: black");
                                            return [3 /*break*/, 4];
                                        case 3:
                                            e_1 = _a.sent();
                                            console.error(e_1);
                                            output.textContent = String(e_1);
                                            output.setAttribute("style", "color: red");
                                            return [3 /*break*/, 4];
                                        case 4: return [2 /*return*/];
                                    }
                                });
                            });
                        });
                        userCode.value = localStorage.getItem("program");
                        userCode.addEventListener("keypress", function () {
                            return __awaiter(void 0, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    localStorage.setItem("program", userCode.value);
                                    return [2 /*return*/];
                                });
                            });
                        });
                        return [2 /*return*/];
                    });
                });
            });
            /***/ 
        }),
        /***/ "wabt": 
        /*!***********************!*\
          !*** external "wabt" ***!
          \***********************/
        /***/ (function (module) {
            module.exports = wabt;
            /***/ 
        })
        /******/ 
    });
    /************************************************************************/
    /******/ // The module cache
    /******/ var __webpack_module_cache__ = {};
    /******/
    /******/ // The require function
    /******/ function __webpack_require__(moduleId) {
        /******/ // Check if module is in cache
        /******/ if (__webpack_module_cache__[moduleId]) {
            /******/ return __webpack_module_cache__[moduleId].exports;
            /******/ }
        /******/ // Create a new module (and put it into the cache)
        /******/ var module = __webpack_module_cache__[moduleId] = {
            /******/ // no module.id needed
            /******/ // no module.loaded needed
            /******/ exports: {}
            /******/ 
        };
        /******/
        /******/ // Execute the module function
        /******/ __webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        /******/
        /******/ // Return the exports of the module
        /******/ return module.exports;
        /******/ 
    }
    /******/
    /************************************************************************/
    /******/ // startup
    /******/ // Load entry module
    /******/ // This entry module is referenced by other modules so it can't be inlined
    /******/ __webpack_require__("./webstart.ts");
    /******/ 
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
